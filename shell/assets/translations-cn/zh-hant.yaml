##############################
# Special stuff
##############################
generic:
  add: 添加
  all: 全部
  back: 返回
  cancel: 取消
  clear: 清除
  close: 關閉
  comingSoon: 即將上線
  copy: 複製
  create: 創建
  created: 創建時間
  customize: 自定義
  default: 默認
  disabled: 禁用
  done: 完成
  enabled: 啓用
  id: ID
  ignored: 忽略
  invalidCron: 無效的 cron 調度
  imagePullPolicy:
    always: 總是
    ifNotPresent: 如果不存在
    never: 從不
  labelsAndAnnotations: 標籤 & 註釋
  links: 鏈接
  loading: 正在加載&hellip;
  members: 成員
  na: N/A
  name: 名稱
  never: 從不
  none: 無
  notFound: 未找到
  number: '{prefix}{value, number}{suffix}'
  notification:
    title:
      succeed: 成功
      info: 信息
      warning: 警告
      error: 錯誤
  overview: 概述
  plusMore: "+ {n} 更多"
  readFromFile: 從文件讀取
  register: 註冊
  remove: 移除
  resource: |-
    {count, plural,
    one  {資源}
    other {資源}
    }
  resourceCount: |-
    {count, plural,
    one  {1資源}
    other {#資源}
    }
  save: 保存
  showAdvanced: 展開高級選項
  hideAdvanced: 隱藏高級選項
  techPreview: 技術預覽
  type: 類型
  unknown: 未知
  provisioning: '—'
  key: 鍵
  value: 值
  yes: 是
  no: 否
  units:
    time:
      5s: 5秒
      10s: 10秒
      30s: 30秒
      1m: 1分鐘
      5m: 5分鐘
      15m: 15分鐘
      30m: 30分鐘
      1h: 1小時
      2h: 2小時
      6h: 6小時
      1d: 1天
      7d: 7天
      30d: 30天
  completed: 已完成
  enable: 啓用
  disable: 禁用
  experimental: 實驗功能
  deprecated: 已棄用
  placeholder: "例如：{text}"
  moreInfo: 更多信息
  clearAll: 清除全部
  readFromFolder: 從文件夾讀取
  and: ' 和 '
  comma: ，
  basic: 基本信息
  inProgress: 進行中
locale:
  en-us: English
  zh-hans: 简体中文
  zh-hant: 繁體中文
  zh-hant-tw: 台灣繁體
  none: (None)
nav:
  backToRancher: Cluster Manager
  clusterTools: 集羣工具
  kubeconfig:
    download: 下載 KubeConfig
    copy: 將 KubeConfig 複製到剪切板
    options: KubeConfig 選項
  import: 導入 YAML
  home: 首頁
  shell: Kubectl Shell
  shellShortcut: Kubectl Shell {key}
  support: |-
    {hasSupport, select,
      true {支持}
      other {獲取支持}
    }
  restoreSnapshot: 還原快照
  rotateCertificates: 輪換證書
  rotateEncryptionKeys: 輪換加密密鑰
  saveAsRKETemplate: 保存爲 RKE 模板
  takeSnapshot: 拍攝快照
  group:
    cluster: 集羣
    inUse: 更多資源
    rbac: RBAC
    serviceDiscovery: 服務發現
    starred: 已收藏
    storage: 存儲
    workload: 工作負載
    monitoring: 監控
    advanced: 高級選項
    RKE1Configuration: RKE1 配置
    admission: 管理
    apps: 應用
    clusterProvisioning: 集羣配置
    core: 核心
    Discovery: 發現
    Policy: 策略
    Scheduling: 調度
    Storage: 存儲
    imageRepo: 鏡像倉庫
    globalMonitoring: 全局監控
    vlansubnet: 扁平網絡
    backupAndSnapshot: 備份和快照
    networks: 網絡
  ns:
    all: 所有命名空間
    clusterLevel: 集羣資源
    namespace: "{name}"
    namespaced: 命名空間資源
    orphan: 不在項目內
    project: "項目名稱: {name}"
    system: 系統命名空間
    user: 用戶命名空間
  apps: 應用
  categories:
    explore: 瀏覽集羣
    multiCluster: 全局應用
    legacy: 舊版應用
    configuration: 配置
  cisF5:
    label: F5 負載均衡服務
    controllers: F5 負載均衡
  search:
    placeholder: 輸入關鍵詞，搜索集羣
    noResults: 沒有匹配的集羣
  resourceSearch:
    label: 資源搜索
    toolTip: 資源搜索 {key}
    placeholder: 輸入關鍵詞，搜索資源
  header:
    setLoginPage: 設置爲登錄頁面
    restoreCards: 恢復隱藏的卡片
  userMenu:
    preferences: 偏好設置
    accountAndKeys: 賬號 & API 密鑰
    logOut: 登出
  failWhale:
    reload: 重新加載
    separator: 或者
  manageUI: 集羣管理 UI
  imageRepo:
    config: Harbor 配置
    logs: 日誌
    projects: 鏡像管理
  auditLog: 審計日誌
  quotas: 配額
  globalMonitoring:
    label: 全局監控
    dashboard: Dashboard
  vlanSubnet:
    label: 扁平網絡
product:
  apps: 應用
  auth: 用戶 & 認證
  backup: Rancher 備份
  cis: CIS Benchmark
  ecm: Cluster Manager
  explorer: 集羣瀏覽器
  fleet: 持續交付
  longhorn: Longhorn
  manager: 集羣管理
  gatekeeper: OPA Gatekeeper
  istio: Istio
  logging: Logging
  settings: 全局設置
  clusterManagement: 集羣管理
  monitoring: 監控
  mcapps: 多集羣應用
  neuvector: NeuVector
  harvesterManager: 虛擬化管理
  harvester: Harvester
  rancher: Rancher
suffix:
  percent: "%"
  milliCpus: milli CPU
  cores: 核
  cpus: CPU
  gpus: GPU
  ib: iB
  mib: MiB
  gb: GB
  revisions: |-
    {count, plural,
      =1 { 版本 }
      other { 版本 }
    }
  seconds: |-
    {count, plural,
      =1 { 秒 }
      other { 秒 }
    }
  sec: 秒
  times: |-
    {count, plural,
      =1 { 次 }
      other { 次 }
    }
  ago: 前
##############################
# Components & Pages
##############################
about:
  title: 簡介
  versions:
    title: 版本
    component: 組件
    version: 版本
    cli: CLI
    helm: Helm
    machine: Machine
    releaseNotes: '查看發行說明'
  os:
    mac: macOS
    windows: Windows
    linux: Linux
  downloadImageList:
    title: 鏡像列表
  downloadCLI:
    title: CLI 下載
  diagnostic:
    checkboxLabel: 發出其它請求
    checkboxTooltip: 用前 10 個資源的響應時間補充診斷數據，可能需要一些的時間才能完成。
    logs:
      subtitle: 最新日誌
    resourceCounts:
      subtitle: 資源數量
    systemInformation:
      browserLanguage: 瀏覽器語言
      browserUserAgent: 用戶瀏覽器
      cookieEnabled: 啓用 Cookie
      deviceMemory: 設備內存
      hardwareConcurrency: 硬件併發
      memJsHeapLimit: JS 堆內存大小限制
      memTotalJsHeapSize: JS 堆內存總大小
      memUsedJsHeapSize: 已使用的 JS 堆內存
      os: 操作系統
      subtitle: 系統信息
    title: 診斷
accountAndKeys:
  title: 賬號 & API 密鑰
  account:
    title: 賬號
    change: 更改密碼
  apiKeys:
    title: API 密鑰
    notAllowed: 你沒有權限管理 API 密鑰
    apiEndpoint: "API 端點"
    add:
      description:
        label: 描述
        placeholder: 可選擇輸入一個描述，以識別此 API 密鑰。
      label: 創建 API 密鑰
      expiry:
        label: 自動過期
        options:
          never: 從不
          day: 一天後過期
          month: 一個月後過期
          year: 一年後過期
          custom: 自定義
          maximum: "{value} - 最大有效期"
      customExpiry:
        options:
          minute: 分鐘
          hour: 小時
          day: 天
          month: 月
          year: 年
      scope: 範圍
      noScope: 無範圍
    info:
      accessKey: 訪問密鑰
      secretKey: 密文密鑰
      bearerToken: 持有者令牌
      saveWarning: 請善保存以上的信息。這是你唯一查看該信息的機會。如果丟失這些信息，你需要創建一個新的 API 密鑰。
      keyCreated: 已創建一個新的 API 密鑰。
      bearerTokenTip: "訪問密鑰和密文密鑰可以作爲 HTTP Basic auth 的用戶名和密碼發送，從而授權請求。你也可以將它們組合起來作爲一個持有者令牌使用。"
      ttlLimitedWarning: 系統配置導致該 API 密鑰的到期時間縮短了。
addClusterMemberDialog:
  title: 添加集羣成員
addProjectMemberDialog:
  title: 添加項目成員
authConfig:
  accessMode:
    label: '配置能登錄和使用 {vendor} 的人員名單'
    required: 只有授權用戶和用戶組能夠訪問
    restricted: '允許集羣和項目的成員，以及授權用戶和用戶組訪問'
    unrestricted: 允許所有用戶訪問
  allowedPrincipalIds:
    title: 授權的用戶和用戶組
  associatedWarning: '注意：你認證的 {provider} 用戶將作爲你當前登錄的 {vendor} 用戶（<code>{username}</code>）的替代登錄方式。此 {vendor} 用戶的所有全局權限、項目和集羣角色綁定也將應用到 {provider} 用戶。'
  github:
    clientId:
      label: 客戶端 ID
    clientSecret:
      label: 客戶端密文
    form:
      app:
        label: 應用名稱
        value: '輸入一個應用名稱，例如：我的 {vendor}'
      callback:
        label: 授權回調 URL
      description:
        label: 應用描述
        value: '選填項，可留空'
      homepage:
        label: 主頁 URL
      instruction: '請在表格中輸入以下值：'
      prefix:
        1: <li><a href="{baseUrl}/settings/developers" target="_blank" rel="noopener noreferrer nofollow">點擊這裏</a>，在新窗口中進入 GitHub 應用設置。</li>
        2: <li>點擊 "OAuth Apps" 標籤。</li>
        3: <li>點擊 "新建 OAuth 應用" 按鈕。</li>
      suffix:
        1: <li>點擊 "註冊應用"。</li>
        2: <li>複製並粘貼新創建的 OAuth 應用的客戶端ID和密碼到下面的字段中。</li>
    host:
      label: GitHub 企業版主機
      placeholder: 例如：github.mycompany.example
    target:
      label: 你想使用哪個版本的 GitHub?
      private: GitHub企業版的私有安裝
      public: 公有的GitHub.com
    table:
      server: Server IP 地址
      clientId: 客戶端 ID
  googleoauth:
    adminEmail: 管理員郵箱
    domain: 域名
    oauthCredentials:
      label: OAuth 憑證
      tip: 你可以在 Google API 開發者控制檯中找到 OAuth 憑證的 JSON 文件。
    serviceAccountCredentials:
      label: 服務賬號憑證
      tip: 你可以在 Google API 控制檯的服務賬號區域，找到服務賬號憑證的 JSON 文件。
    steps:
      1:
        title: '點擊<a href="https://console.developers.google.com/apis/credentials" target="_blank" rel="noopener noreferrer nofollow">此處</a>在新窗口中進入應用設置。'
        body:
          1: 登錄到你的賬號。導航到 "APIs & Services"，然後選擇 "OAuth consent screen"。
          2: '授權的域名：'
          3: '應用主頁鏈接： '
          4: '在 Google APIs 的範圍下，啓用 "email"，"profile"和"openid"。'
          5: '點擊“保存”。'
        topPrivateDomain: '上層私有域名：'
      2:
        title: '導航到 "Credentials" 標籤，創建你的 OAuth 客戶端 ID。'
        body:
          1: '選擇 "Create Credentials" 這個下拉菜單，並選擇 "OAuth clientID"，然後選擇 "Web application"。'
          2: '授權的 Javascript origin：'
          3: '授權的重定向 URI：'
          4: '點擊 "Create"，然後點擊 "Download JSON" 按鈕。'
          5: '在 OAuth 憑證框中，上傳下載的 JSON 文件。'
      3:
        title: '創建服務賬號憑證'
        introduction: '參照本<a href="{docsBase}/admin-settings/authentication/google/#3-creating-service-account-credentials" target="_blank" rel="noopener noreferrer nofollow">指南</a>：'
        body:
          1: 創建一個服務賬號。
          2: 爲這個服務賬號生成密鑰。
          3: 在你的 Google 域名中添加服務賬號作爲 OAuth 客戶端。
  ldap:
    freeipa: 配置 FreeIPA server。
    activedirectory: 配置 Active Directory 賬號。
    openldap: 配置 OpenLDAP server。
    defaultLoginDomain:
      label: 默認登錄域名
      placeholder: 例如：mycompany
      hint: 如果用戶在沒有指定域名的情況下登錄，將使用此域名。
    cert: 證書
    disabledStatusBitmask: 禁用狀態位掩碼
    groupDNAttribute: 用戶組域名屬性
    groupMemberMappingAttribute: 用戶組成員映射屬性
    groupMemberUserAttribute: 用戶組成員屬性
    groupSearchBase:
      label: 用戶組搜索庫
      placeholder: 'ou=groups,dc=mycompany,dc=com'
    hostname:
      hint: 可以使用逗號分隔列表來指定多個服務器
      label: 主機名/IP
      placeholder: 例如：server1,server2
    loginAttribute: 登錄屬性
    nameAttribute: 名稱屬性
    nestedGroupMembership:
      label: 屬於多個用戶組的用戶
      options:
        direct: 搜索只屬於單個用戶組的用戶
        nested: 搜索只屬於單個用戶組的用戶和屬於多個用戶組的用戶
    objectClass: 對象類
    password: 密碼
    port: 端口
    customizeSchema: 自定義模式
    users: 用戶
    groups: 組
    searchAttribute: 搜索屬性
    searchFilter: 搜索過濾條件
    serverConnectionTimeout: 服務器連接超時
    serviceAccountDN: Service Account 標識名稱
    serviceAccountPassword: 服務賬號密碼
    serviceAccountInfo: '{vendor} 需要一個對所有能夠登錄的域名都有隻讀訪問權的服務賬號，以在用戶使用 API 密鑰進行請求時，確定用戶屬於什麼組。'
    starttls:
      label: 啓動 TLS
      tip: 通過在連接過程中使用 TLS 封裝來升級非加密連接。不能與 TLS 結合使用。
    tls: TLS
    userEnabledAttribute: 用戶啓用屬性
    userMemberAttribute: 用戶成員屬性
    userSearchBase:
      label: 用戶搜索庫
      placeholder: '例如：ou=users,dc=mycompany,dc=com'
    username: 用戶名
    usernameAttribute: 用戶名屬性
    table:
      server: Server IP 地址
      clientId: 客戶端 ID
    userUniqueIdAttribute:
      label: 用戶唯一標識
      tip: 請使用用戶創建後全局唯一的用戶屬性，避免因該屬性值變化導致用戶權限丟失
    groupUniqueIdAttribute:
      label: 組唯一標識
      tip: 請使用用戶組創建後全局唯一的屬性，避免因該屬性值變化導致用戶權限丟失
  saml:
    entityID: Entity ID 字段
    UID: UID 字段
    adfs: 配置 AD FS 賬號
    api: '{vendor} API Host'
    cert:
      label: 證書
      placeholder: 粘貼證書，以-----BEGIN CERTIFICATE----- 開始。
    displayName: 顯示名稱字段
    groups: 用戶組字段
    key:
      label: 私鑰
      placeholder: 粘貼私鑰，一般以----BEGIN RSA PRIVATE KEY----開頭
    keycloak: 配置 Keycloak 賬號
    metadata:
      label: 元數據 XML
      placeholder: 粘貼 IDP 元數據 XML
    okta: 配置 Okta 賬號
    ping: 配置 Ping 賬號
    shibboleth: 配置 Shibboleth 賬號
    showLdap: 配置 OpenLDAP server
    userName: 用戶名字段
  azuread:
    tenantId: 租戶 ID
    applicationId: 應用 ID
    endpoint: 端點
    graphEndpoint: 圖端點
    tokenEndpoint: Token 端點
    authEndpoint: Auth 端點
    reply:
      info: 在開始設置之前，Azure AD 需要 Rancher Server 的白名單 URL。請確保在 Azure 門戶的回覆 URL 中設置了以下 URL。請注意，白名單 URL 可能需要 5 分鐘才能生效。
      label: 回覆 URL
    updateEndpoint:
      banner:
        linkText: 在此處進行更新。
        message: 必須更新 Azure AD 身份驗證：它使用了 Azure Graph API，該 API 將於 2022 年底棄用。
      button: 更新端點
      modal:
        body: <p><b>你可能需要進行額外的更改</b>。請確保 Azure AD 應用對 Microsoft Graph 具有以下應用權限：User.Read.All、Group.Read.All<br> 如果在 Rancher 中配置 Azure AD 身份驗證時自定義了端點，這些端點將不會自動更新。</p>
        title: 是否確認？此更新是不可逆的。
  oidc:
    oidc: 配置 OIDC 賬號
    keycloakoidc: 配置 Keycloak OIDC 賬號
    rancherUrl: Rancher URL
    clientId: 客戶端 ID
    clientSecret: 客戶端密文
    customEndpoint:
      label: 端點
      custom: 指定
      standard: 生成
    keycloak:
      url: Keycloak URL
      realm: Keycloak Realm
    issuer: 發行者
    authEndpoint: Auth 端點
    cert:
      label: 證書
      placeholder: 粘貼證書，以-----BEGIN CERTIFICATE----- 開始。
    key:
      label: 私鑰
      placeholder: 粘貼私鑰，一般以----BEGIN RSA PRIVATE KEY----開頭
  stateBanner:
    disabled: '{provider} 已禁用。'
    enabled: '{provider} 已啓用。'
  testAndEnable: 測試和啓用驗證
  noneEnabled: 本地驗證是長期開啓的。你也可以選擇以下的驗證提供程序。
  localEnabled: '{vendor} 配置爲允許訪問本地數據庫中的賬號。'
  manageLocal: 管理賬號
  cas:
    callbackURL:
      label: 服務回調 URL
      placeholder: CAS 服務回調 URL
    cas: 配置 Rancher 使用 CAS 進行認證
    connectionTimeout:
      label: 服務器連接超時
      placeholder: 例如：5000
    enableTLS: Use a secure connection
    hostUrl:
      label: CAS Host
      placeholder: 例如：cas-server.com
    loginEndpoint:
      label: 登錄 Endpoint
      placeholder: 例如：/cas/login
    logoutEndpoint:
      label: 登出 Endpoint
      placeholder: 例如：/cas/logout
    passwordField:
      label: 密碼字段
      placeholder: 例如：password
    port:
      label: 端口
      placeholder: 例如：6379
    usernameField:
      label: 用戶名字段
      placeholder: 例如：username
authGroups:
  actions:
    refresh: 刷新用戶組成員名單
    assignRoles: 爲當前用戶組成員分配全局角色
  assignEdit:
    assignTitle: 爲當前用戶組分配全局角色
assignTo:
  title: |-
    {count, plural,
      =1 { 分配集羣到&hellip; }
      other { 分配 {count} 集羣到&hellip; }
    }
  labelsTitle: |-
    {count, plural,
      =1 { 分配集羣到&hellip; }
      other { 分配 {count} 集羣到&hellip; }
    }
  workspace: 工作空間
asyncButton:
  apply:
    action: 應用
    success: 已應用
    waiting: 正在應用&hellip;
  continue:
    action: 繼續
    success: 已保存
    waiting: 正在保存&hellip;
  copy:
    action: 單擊複製
    success: 已複製
  create:
    action: 創建
    success: 創建時間
    waiting: 正在創建&hellip;
  default:
    action: 操作
    error: 錯誤
    success: 成功
    waiting: 等待中
  delete:
    action: 刪除
    success: 已刪除
    waiting: 正在刪除&hellip;
  disable:
    action: 禁用
    success: 禁用
    waiting: 正在關閉&hellip;
  activate:
    action: 激活
    waiting: 正在激活&hellip;
    success: 已激活
  deactivate:
    action: 停用
    waiting: 正在停用&hellip;
    success: 已停用
  done:
    action: 完成
    success: 已保存
    waiting: 正在保存&hellip;
  download:
    action: 下載
    success: 正在保存
    waiting: 正在下載&hellip;
  drain:
    action: 清空
    success: 已清空
    waiting: 正在清空&hellip;
  edit:
    action: 保存
    success: 已保存
    waiting: 正在保存&hellip;
  enable:
    action: 啓用
    success: 啓用
    waiting: 正在啓用&hellip;
  finish:
    action: 完成
    success: 已完成
    waiting: 正在處理&hellip;
  import:
    action: 導入
    success: 已導入
    waiting: 正在導入&hellip;
  install:
    action: 安裝
    success: 正在安裝
    waiting: 正在啓動&hellip;
  pause:
    action: 暫停編排
    success: 已暫停編排
    waiting: 正在暫停編排
    description: 由於編排已暫停，新的修改不會部署。要部署新修改，請恢復編排。
  refresh:
    action: ''
    actionIcon: refresh
    error: ''
    errorIcon: error
    success: ''
    successIcon: checkmark
    waiting: ''
    waitingIcon: refresh
  remove:
    action: 移除
    success: 已移除
    waiting: 正在移除&hellip;
  restore:
    action: 還原
    waiting: 正在還原&hellip;
    success: 已還原
  resume:
    action: 恢復編排
    success: 已恢復編排
    waiting: 正在恢復編排
  rollback:
    action: 回滾
    success: 已回滾
    waiting: 正在回滾工作負載
  rotate:
    action: 輪換
    waiting: 正在輪換&hellip;
    success: 已輪換
  snapshot:
    action: 立即創建快照
    waiting: 已啓動快照&hellip;
    success: 正在創建快照
  uninstall:
    action: 卸載
    success: 已卸載
    waiting: 正在卸載&hellip;
  update:
    action: 更新
    success: 已更新
    waiting: 正在更新&hellip;
  upgrade:
    action: 升級
    success: 正在升級
    waiting: 正在啓動&hellip;
  generate:
    action: 生成
    success: 已生成
    waiting: 正在生成&hellip;
  run:
    action: 運行
    success: 已完成
    waiting: 正在運行&hellip;
  diagnostic:
    action: 下載數據
    success: 正在保存
    waiting: 正在下載&hellip;
backupRestoreOperator:
  backupFilename: 備份文件名
  deleteTimeout:
    label: 刪除超時
    tip: 在刪除 Finalizers 強制刪除之前，等待資源刪除成功的秒數。
  deployment:
    rancherNamespace: Rancher ResourceSet 命名空間
    size: 大小
    storage:
      label: 默認存儲位置
      options:
        defaultStorageClass: '使用默認存儲類 ({name})'
        none: 無默認存儲位置
        pickPV: 使用已有的持久卷
        pickSC: 使用已有的存儲類
        s3: 使用 Amazon S3 兼容的對象存儲服務
      persistentVolume:
        label: 持久卷
      storageClass:
        label: 存儲類
      tip: '配置一個保存所有備份的默認存儲位置。你可以選擇對每個備份進行覆蓋，但僅限於使用與 S3 兼容的對象存儲。'
      warning: '此 {type} 沒有將其回收策略設置爲 "保留"。如果卷被更改或未綁定，你的備份可能會丟失。'
  encryption: 加密
  encryptionConfigName:
    backuptip: '<code>cattle-resource-system</code>命名空間中具有<code>encryption-provider-config.yaml</code>密鑰的任何密文。<br/>此文件的內容是還原此備份所必需的，Rancher Backup 不會存儲這些內容。'
    label: 加密配置密文
    options:
      none: 存儲未加密的備份內容。
      secret: '使用<a target="_blank" rel="noopener noreferrer nofollow" href="https://kubernetes.io/docs/tasks/administer-cluster/encrypt-data/#understanding-the-encryption-at-rest-configuration">加密配置密文</a>（推薦）對備份進行加密。'
    restoretip: '如果備份是在啓用加密的情況下進行的，則應在還原過程中使用包含相同 encryption-provider-config 的密文。'
    warning: '此文件的內容是還原此備份必需的，Rancher Backup 不會存儲這些內容。'
  lastBackup: 上次備份
  nextBackup: 下次備份
  noResourceSet: 你必須在此命名空間中定義一個 ResourceSet 來創建備份 CR。
  prune:
    label: 修剪
    tip: 刪除備份中不存在的 Rancher 管理的資源（推薦）
  resourceSetName: 資源集
  restoreFrom:
    default: 使用默認存儲目標恢復
    existing: 使用已有的備份配置恢復
    s3: 使用與 S3 兼容的對象存儲恢復
  retentionCount:
    label: 保留數量
    units: |-
      {count, plural,
        =1 { 文件 }
        other { 文件 }
      }
  s3:
    bucketName: 存儲桶名稱
    credentialSecretName: 憑證密文
    endpoint: 端點
    endpointCA:
      label: 端點 CA
      prompt: 端點 CA 必須是 Base64 編碼的
    folder: 文件夾
    insecureTLSSkipVerify: 跳過 TLS 驗證
    region: 區域
    storageLocation: 存儲位置
    titles:
      backupLocation: 備份源
      location: 存儲位置
      s3: S3
  schedule:
    label: 調度
    options:
      disabled: 單次備份
      enabled: 重複備份
    placeholder: 例如：@midnight or 0 0 * * *
  storageSource:
    configureS3: 使用 Amazon S3 兼容的對象存儲服務
    useBackup: 使用備份 CR 上指定的 S3 位置
    useDefault: 使用安裝時配置的默認存儲位置
  targetBackup: 目標備份
catalog:
  app:
    managed: 託管
    section:
      lastOperation: 上一操作
      notes: 發行說明
      openLogs: 查看日誌
      readme: Chart 自述
      resources:
        label: 資源
        busy: "{app} 完全安裝後，相關資源會出現。"
      values: Values YAML
  chart:
    header:
      charts: Chart
    info:
      appVersion: 應用版本
      chartVersions:
        label: Chart 版本
        showMore: 顯示更多
        showLess: 顯示較少
      home: 首頁
      maintainers: 維護者
      related: 相關
      chartUrls: Chart
      keywords: 關鍵詞
    errors:
      clusterToolExists: 此 Chart 含有固定的命名空間和名稱。找到一個匹配的 <a href="{url}">應用</a>，任何修改都將應用於此應用。
  charts:
    all: 全部
    categories:
      all: 所有類別
      infrastructure: 基礎設施
      storage: 存儲
      monitoring: 監控
      applications: 應用
      security: 安全
      networking: 網絡
      database: 數據庫
    certified:
      other: 其他
      partner: Partner
      rancher: '{vendor}'
    deploysOnWindows: 在 Windows 上部署
    windowsIncompatible: 僅 Linux
    versionWindowsIncompatible: 僅限 Linux 版本
    header: Chart
    noCharts: '沒有可用的 Chart，你有添加倉庫嗎？'
    noWindows: 你的應用商店沒有能夠部署在具有 Windows 節點的集羣的 Chart。
    noWindowsAndLinux: 你的應用商店沒有能部署在具有 Windows 和 Linux Worker 節點的集羣的 Chart。
    operatingSystems:
      all: 所有操作系統
      linux: Linux
      windows: Windows
    search: 篩選
  install:
    action:
      goToUpgrade: 編輯/升級
    appReadmeMissing: 此 Chart 沒有其他 Chart 信息。
    appReadmeTitle: Chart 信息（Helm 自述）
    chart: Chart
    error:
      requiresFound: '在安裝這個 Chart 前，你需要安裝<a href="{url}">{name}</a>。'
      requiresMissing: '這個 Chart 另一個提供 {name} 的 Chart，但我們找不到這個Chart。'
      insufficientCpu: '這個 Chart 需要 {need, number} 個 CPU 核，但集羣只有 {have, number} 個可用。'
      insufficientMemory: '這個 Cchart 需要 {need} 內存，但集羣只有 {have} 可用。'
      legacy:
        label: 這是個 {legacyType} 應用，無法在這裏修改。
        enableLegacy:
          prompt: 想編輯這個應用，你需要添加舊版功能。
          goto: 前往功能開關設置
        navigate: 導航到 {legacyType} 應用
        category:
          legacy: 舊版應用
          mcm: 多集羣
    header:
      install: '安裝 {name}'
      installGeneric: 安裝 Chart
      upgrade: '升級 {name}'
    helm:
      atomic: Atomic
      description:
        label: 描述
        placeholder: 例如：Helm 命令的目的
      cleanupOnFail: 失敗時的清理
      crds: 應用自定義資源定義
      dryRun: 空運行
      force: 強制
      historyMax:
        label: 保留最後一個
        unit: |-
          {value, plural,
            =1 { 版本 }
            other { 版本 }
          }
      hooks: 執行 Chart 鉤子
      openapi: 驗證 OpenAPI schema
      resetValues: 重置值
      timeout:
        label: 超時
        unit: |-
          {value, plural,
            =1 { 秒 }
            other { 秒 }
          }
      wait: 等待
    namespaceIsInProject: "這個 Chart 的目標命名空間<code>{namespace}</code>已經存在，不能添加到不同的項目中。"
    project: 安裝到項目
    section:
      chartOptions: 編輯選項
      valuesYaml: 編輯 YAML
      diff: 比較變化
    slideIn:
      dock: 停靠到底部
    steps:
      basics:
        label: 元數據
        subtext: 設置應用元數據
        description: 這個過程有助於 {action, select, install { 創建 } upgrade { 升級 } update { 更新 } } 這個 {existing, select, true { 應用 } false { Chart} }。首先設置 {vendor} 用來管理應用的基本信息。
        nsCreationDescription: "如果你要把應用安裝到新的命名空間，在命名空間字段中輸入其名稱，並選擇它。"
        createNamespace: "將創建命名空間 <code>{namespace}</code>。"
      clusterTplVersion:
        label: 版本
        subtext: 選擇模板版本
        description: 選擇一個集羣模板版本
      clusterTplValues:
        label: 值
        subtext: 更改集羣的定義方式
        description: 配置 Helm 用來定義集羣的值。
      helmValues:
        label: 值
        subtext: 更改應用的工作方式
        description: 配置 Helm 用來定義應用的值。
        chartInfo:
          button: 查看 Chart 信息
          label: Chart 信息
      helmCli:
        checkbox: 在安裝前自定義 Helm 選項
        label: Helm 選項
        subtext: 更改應用的部署方式
        description: 提供其他部署選項
    version: 版本
    versions:
      current: '{ver}（當前）'
      linux: '{ver}（僅限 Linux）'
      windows: '{ver}（僅限 Windows）'
  operation:
    tableHeaders:
      action: 操作
      releaseName: 版本名稱
      releaseNamespace: 版本命名空間
  repo:
    action:
      refresh: 刷新
    all: 全部
    gitBranch:
      label: Git 分支
      placeholder: 例如：master
      defaultMessage: '如果不填，默認使用 "master"。'
    gitRepo:
      label: Git 倉庫 URL
      placeholder: '例如：https://github.com/your-company/charts.git'
    name:
      rancher-charts: '{vendor}'
      rancher-partner-charts: Partner
      rancher-rke2-charts: RKE2
    target:
      git: 包含定義了 Helm Chart 或集羣模板的 Git 倉庫。
      http: 指向 Helm 生成的索引 HTTP(S) URL
      label: 目標
    url:
      label: 索引 URL
      placeholder: '例如：https://charts.rancher.io'
    tls:
      insecureSkipTLSVerify: 跳過證書驗證
  tools:
    header: 集羣工具
    noTools: "未找到集羣工具"
    action:
      install: 安裝
      upgrade: 升級/編輯
      edit: 編輯
      remove: 移除
      manage: 管理
  os:
    versionIncompatible: "此版本與 Windows 節點不兼容。"
    chartIncompatible: "此 Chart 與 Windows 節點不兼容。"
changePassword:
  title: 更改密碼
  cancel: 取消
  deleteKeys:
    label: 刪除所有 API 密鑰
  changeOnLogin:
    label: 要求用戶下次登錄時修改密碼
  generatePassword:
    label: 爲用戶生成隨機密碼
  currentPassword:
    label: 當前使用的密碼
  userGen:
    newPassword:
      label: 新密碼
    confirmPassword:
      label: 確認新密碼
  randomGen:
    generated:
      label: 生成的密碼
  newGeneratedPassword: 推薦密碼
  errors:
    mismatchedPassword: 前後兩次輸入的密碼不匹配
    failedToChange: 無法修改密碼
    failedDeleteKey: 無法刪除單個 API 密鑰
    failedDeleteKeys: 無法刪除多個 API 密鑰
    strengthError: 密碼強度弱
  strength:
    best: 強
    good: 中
    label: 密碼強度
    tooltip1: 密碼必須至少包含 {length} 個字符
    tooltip2: 至少包括數字、大寫字母、小寫字母、符號中的兩個類型
    weak: 弱
chartHeading:
  overview: 概述
  poweredBy: "Powered by:"
cis:
  addTest: 添加測試 ID
  alertNeeded: |-
    必須在 CIS Chart values.yaml 中開啓告警。
    這要求<a tabindex="0" href="{link}"> {vendor} 的 Monitoring 與 Alerting 應用</a>已經安裝
    ，而且接收器和路由<a target="_blank" rel='noopener noreferrer nofollow' href='{docsBase}/monitoring-alerting/configuration/#alertmanager-configuration/'>已配置告警發送</a>。
  alertOnComplete: 掃描完成告警
  alertOnFailure: 掃描失敗告警
  benchmarkVersion: Benchmark 版本
  clusterProvider: 集羣提供商
  cronSchedule:
    label: 調度
    placeholder: "例如：0 * * * *"
  customConfigMap: 自定義 Benchmark ConfigMap
  deleteBenchmarkWarning: |-
    {count, plural,
      =1 { 任何使用該 Benchmark 版本的配置文件將會失效。}
      other { 任何使用這些 Benchmark 版本的配置文件將會失效。 }
    }
  deleteProfileWarning: |-
    {count, plural,
      =1 { 任何使用此配置文件的定時掃描將會失效。}
      other { 任何使用這些配置文件的定時掃描將會失效。}
    }
  downloadAllReports: 下載所有保存的報告
  downloadLatestReport: 下載最新報告
  downloadReport: 下載報告
  maxKubernetesVersion: 允許的最大 Kubernetes 版本
  minKubernetesVersion: 允許的最低 Kubernetes 版本
  noProfiles: 此集羣類型沒有有效的 ClusterScanProfiles 可供選擇。
  noReportFound: 未找到掃描報告
  profile: 配置文件
  reports: 報告
  retention: 保留數量
  scan:
    description: 描述
    fail: 失敗
    lastScanTime: 上次掃描時間
    notApplicable: N/A
    number: 序號
    pass: 通過
    remediation: 補救
    scanDate: 掃描日期
    scanReport: 掃描報告
    skip: 跳過
    total: 總計
    warn: 警告
  scheduling:
    disable: 運行單次掃描
    enable: 定時運行掃描
  scoreWarning:
    label: 掃描 "warn" 結果的狀態
    protip: 即使一些測試生成 “warn” 輸出，只要掃描沒有失敗，則會默認標記爲 “通過”，。你可以在本區域中選擇 “fail” 選項來更改此行爲。
  testID: 測試 ID
  testsSkipped: 已跳過的測試
  testsToSkip: 要跳過的測試
cluster:
  addonChart:
    rancher-vsphere-cpi: vSphere CPI 配置
    rancher-vsphere-csi: vSphere CSI 配置
    rke2-calico: Calico 配置
    rke2-calico-crd: Calico 配置
    rke2-canal: Canal 配置
    rke2-cilium: Cilium 配置
    rke2-coredns: CoreDNS 配置
    rke2-ingress-nginx: NGINX Ingress 配置
    rke2-kube-proxy: Kube Proxy 配置
    rke2-metrics-server: Metrics Server 配置
    rke2-multus: Multus 配置
  agentEnvVars:
    label: Agent 環境
    detail: 向 Agent 容器添加額外的環境變量。這在配置 HTTP 代理時是最常用的。
    keyLabel: 變量名
  cloudProvider:
    aws:
      label: Amazon
    azure:
      label: Azure
    external:
      label: External
    gcp:
      label: Google
    rancher-vsphere:
      label: vSphere
      note: '<b>重要</b>：在附加配置標籤中配置 vSphere 雲提供商和存儲提供商選項。'
    harvester:
      label: Harvester
  copyConfig: 將 KubeConfig 複製到剪切板
  custom:
    nodeRole:
      label: 節點角色
      detail: 選擇節點在集羣中的角色。在集羣中，每個角色都需要至少一個節點。
    advanced:
      label: 高級選項
      detail: 對節點註冊方式的額外控制。每個註冊的節點需要的值，通常都不相同。
      nodeName: 節點名稱
      publicIp: 節點公共 IP
      privateIp: 節點私有 IP
      nodeLabel:
        title: 節點標籤
        label: 添加標籤
    registrationCommand:
      label: 註冊命令
      linuxDetail: 在每臺要註冊的 Linux 主機上運行此命令。
      windowsDetail: 在每臺要註冊的 Windows 主機中的 PowerShell 上運行此命令。Windows 節點只能充當 worker。
      windowsNotReady: 在用於添加 Windows worker 的註冊命令顯示之前，集羣必須已啓動並運行 Linux ETCD，Control Plane，以及 worker 節點。
      windowsWarning: 工作負載 Pod（包括由 Rancher Chart 部署的 Pod）將默認調度到 Linux 和 Windows 節點上。編輯 Chart 中的 NodeSelector 以將它們放置到兼容的節點上。
      insecure: "不安全：如果你的服務器具有自簽名證書，選擇此項以跳過 TLS 驗證。"
      windowsDeprecatedForRKE1: RKE1 已棄用 Windows 支持。建議你遷移到 RKE2。
  credential:
    banner:
      createCredential: |-
        {length, plural,
          =0 {請先創建一個用於與雲提供商對話的憑證}
          other {請創建一個新憑證}
        }
    selectExisting:
      label: 選擇現有
    select:
      option:
        new: 創建...
        none: 選擇憑證
    ack:
      accessKey:
        label: 訪問密鑰
        placeholder: 你的 ACK 訪問密鑰
      defaultRegion:
        help: 創建集群時使用的默認區域。需要驗證此憑證是否有效。
        label: 默認區域
      secretKey:
        label: SecretKey
        placeholder: 你的 ACK 密文密鑰
    tke:
      accessKeyId:
        label: 訪問密鑰 ID
        placeholder: 你的 騰訊雲 訪問密鑰 ID
      accessKeySecret:
        label: 訪問密鑰 Secret
        placeholder: 你的 騰訊雲 訪問密鑰 Secret
    aws:
      accessKey:
        label: 訪問密鑰
        placeholder: 你的 AWS 訪問密鑰
      defaultRegion:
        help: 創建集羣時使用的默認區域。需要驗證此憑證是否有效。
        label: 默認區域
      secretKey:
        label: SecretKey
        placeholder: 你的 AWS 密文密鑰
    azure:
      clientId:
        label: 客戶端 ID
      clientSecret:
        label: 客戶端密文
      environment:
        label: 環境
      subscriptionId:
        label: 訂閱 ID
      tenantId:
        label: 租戶 ID
    digitalocean:
      accessToken:
        help: 從 DigitalOcean <a href="https://cloud.digitalocean.com/settings/api/tokens" target="_blank" rel="noopener noreferrer nofollow">應用 & API</a> 中粘貼個人訪問 Token。
        label: 訪問 Token
        placeholder: 你的 DigitalOcean API 訪問 Token
    label: 雲憑證
    linode:
      accessToken:
        help: 從 Linode <a href="https://cloud.linode.com/profile/tokens" target="_blank" rel="noopener noreferrer nofollow">API Tokens</a> 粘貼個人訪問 Token。
        label: 訪問 Token
        placeholder: 你的 Linode API 訪問 Token
    name:
      label: 憑證名稱
      placeholder: 此憑證的名稱（可選）
    s3:
      accessKey:
        label: 訪問密鑰
        placeholder: 你的 API 訪問密鑰
      defaultRegion:
        label: 默認區域
        placeholder: "可選：要使用的默認區域"
      defaultBucket:
        label: 默認存儲桶
        placeholder: "可選：要使用的默認存儲桶"
      defaultEndpoint:
        label: 默認端點
        placeholder: "可選：要使用的默認端點"
      defaultFolder:
        label: 默認文件夾
        placeholder: "可選：要使用的默認文件夾"
      defaultEndpointCA:
        label: 默認端點 CA 證書
        placeholder: "可選：用於驗證端點的默認 CA 證書"
      defaultSkipSSLVerify:
        label: 接受任何證書（不安全）
      secretKey:
        label: SecretKey
        placeholder: 你的 API 密文密鑰
    vmwarevsphere:
      server:
        label: vCenter 或 ESXi Server
        placeholder: vcenter.domain.com
      port:
        label: 端口
      username:
        label: 用戶名
      password:
        label: 密碼
      note: '注意：免費的 ESXi 許可證不支持 API 訪問。僅支持具有有效或評估許可證的服務器。'
    gcp:
      authEncodedJson:
        label: 服務賬號
        placeholder: 服務帳號私鑰 JSON 文件
        help: |-
          <p>創建一個<a href="https://console.cloud.google.com/projectselector/iam-admin/serviceaccounts" target="_blank" rel="noopener noreferrer nofollow">服務賬號</a> JSON 私鑰文件，並在此處提供 JSON 文件。
          需要以下 IAM 角色：</p>
          <ul>
          <li><b>計算引擎</b>：Compute Viewer (roles/compute.viewer)</li>
          <li><b>項目</b>：Viewer (roles/viewer)</li>
          <li><b>Kubernetes 引擎</b>：Kubernetes 引擎管理員 (roles/container.admin)</li>
          <li><b>服務賬號</b>：服務賬號用戶(roles/iam.serviceAccountUser)</li>
          </ul>
          點擊<a href="https://cloud.google.com/kubernetes-engine/docs/how-to/iam-integration" target="_blank" rel="noopener noreferrer nofollow">此處</a>查看更多角色相關的信息。
    harvester:
      import: 導入的 Harvester
      external: 外部的 Harvester（實驗功能）
      namespace: 命名空間
      cpu: CPU
      memory: 內存
      disk: 磁盤
      image: 鏡像
      network: 網絡
      sshUser: SSH 用戶名
      userData:
        label: 用戶數據模板
        title: "用戶數據："
      networkData:
        label: 網絡數據模板
        title: "網絡數據："
      kubeconfigContent:
        label: KubeconfigContent
      placeholder: '命名空間/名稱'
      cluster: 集羣
      affinity:
        namespaces:
          placeholder: 例如：default,system,base
  description:
    label: 集羣描述
    placeholder: 輸入可以描述該集羣的文本
  harvester:
    importNotice: 導入 Harvester 集羣方式
    warning:
      label: 這是一個 Harvester 集羣 - 請啓用 Harvester 功能開關以對其進行管理。
      state: 警告
      cloudProvider:
        incompatible: 由於當前的 Harvester 版本與所選的 RKE2 Kubernetes 版本不兼容，因此你無法選擇 Harvester cloud provider。請單擊 <a target="_blank" rel="noopener noreferrer nofollow" href="https://www.suse.com/suse-harvester/support-matrix/all-supported-versions">此處</a>查看支持的 Kubernetes 版本。
    clusterWarning: |-
      還有 {count, plural,
      =1 {1個 Harvester 集羣未顯示}
      other { #個 Harvester 集羣未顯示}
      }
    registration:
      step1: "1. 前往目標 Harvester UI 的<code>高級設置</code>頁面。"
      step2: '2. 找到<code>cluster-registration-url</code>設置項，並點擊<code><i class="icon icon-actions" ></i></code> -> <code>編輯設置</code>按鈕。'
      step3: "3. 輸入以下注冊 URL，並點擊<code>保存</code>。"
      step4: "註冊 URL"
    machinePool:
      cpu:
        placeholder: 例如：2
      memory:
        placeholder: 例如：4
      disk:
        placeholder: 例如：4
      namespace:
        placeholder: 例如：default
      image:
        placeholder: 請選擇鏡像
      network:
        placeholder: 請選擇網絡
      sshUser:
        placeholder: 例如：ubuntu
        toolTip: 用於登錄選中的操作系統鏡像的 SSH 用戶名
  haveOneOwner: 至少有一名成員需要具有所有者角色。
  import:
    commandInstructions: '在運行支持的 Kubernetes 版本的 Kubernetes 集羣上，運行以下 <code>kubectl</code> 命令，以將其導入到 {vendor}：'
    commandInstructionsInsecure: '如果你看到&quot;證書由未知機構簽名&quot;的錯誤，你的 {vendor} 安裝了自簽名或不受信任的 SSL 證書。你可以運行下面的命令來繞過證書驗證：'
    clusterRoleBindingInstructions: '如果你在創建資源時遇到權限錯誤，你的用戶可能沒有綁定 <code>cluster-admin</code> 角色。你可以運行這個命令來申請角色：'
    clusterRoleBindingCommand: 'kubectl create clusterrolebinding cluster-admin-binding --clusterrole cluster-admin --user <your username from your kubeconfig>'
    privateRegistry:
      description: 爲這個集羣配置一個默認的私有鏡像倉庫。啓用後，集羣配置和系統附加組件啓動所需的所有鏡像都將從這個鏡像倉庫中拉取（注意：這個配置將覆蓋全局配置中的system-default-registry）。
      label: 私有鏡像倉庫
      placeholder: '例如: index.docker.io'
      title: 私有鏡像倉庫
    warningBanner: 不要導入已連接到另一個 Rancher 實例的集羣，避免損壞數據。
  importAction: 導入已有集羣
  kubernetesVersion:
    label: Kubernetes 版本
    experimental: 實驗功能
    deprecated: 已棄用
    deprecatedPatchWarning: 建議爲每個 Kubernetes 次要版本使用最新的補丁版本，已棄用的補丁版本可能對遷移有用。
    deprecatedPatches: 顯示已棄用的 Kubernetes 補丁版本
  toolsTip: 使用新集羣工具來管理和安裝 Monitoring、Logging 等工具。
  legacyWarning: 舊版功能開關已開啓，但是不是所有舊版功能都在 Kubernetes 1.21+ 中支持。
  log:
    connecting: 正在連接
    noData: 沒有預設的日誌項目
  name:
    label: 集羣名稱
    placeholder: 獨特的集羣名稱
  machineConfig:
    banner:
      updateInfo: 創建一個池用來更新主機配置
    aliyunecs:
      resourceGroup:
        label: 資源組
        all: 賬號全部資源
      region:
        label: 區域
        placeholder: 區域
      zone:
        label: 可用區
        prompt: 選擇可用區...
      vpcId:
        label: 專有網絡
        prompt: 選擇專有網絡...
        default: 默認專有網絡
      vswitchId:
        label: 交換機
        prompt: 選擇交換機...
        default: 默認交換機
      privateIp:
        label: 私有IP
        placeholder: 專用網絡中的私有 IP
      privateAddressOnly:
        label: 僅私網IP
      internetChargeType:
        label: 帶寬計費模式
        prompt: 選擇計費模式...
      internetChargeTypes:
        payByTraffic: 按使用流量計費
        payByBandwidth: 按固定帶寬計費
      instanceDescription:
        label: 實例描述
        placeholder: 該實例的描述
      instanceType:
        label: 實例類型
      imageId:
        label: 系統鏡像
        placeholder: 系統鏡像
      internetMaxBandwidth:
        label: 最大網絡帶寬
        placeholder: 1到200
        suffix: Mbps
      aliyunSLB:
        label: 阿里雲SLB ID
        placeholder: 阿里雲SLB ID
      systemDiskCategory:
        label: 系統盤種類
      systemDiskSize:
        label: 系統磁盤大小
        placeholder: "容量範圍: {min} ~ {max}"
        suffix: GB
      diskCategory:
        label: 數據盤種類
      diskSize:
        label: 數據磁盤大小
        placeholder: "容量範圍: {min} ~ {max}"
        suffix: GB
      ioOptimized:
        label: 是否為I/O優化實例
      upgradeKernel:
        label: 升級內核
      disk:
        cloud: 普通雲盤
        ephemeralSsd: 本地SSD盤
        efficiency: 高效雲盤
        ssd: SSD 雲盤
        essd: ESSD 雲盤
        auto: ESSD AutoPL 雲盤
      diskFs:
        label: diskFs
      securityGroup:
        mode:
          custom: 選擇一個現有的安全組：
          default: 標準：自動創建並使用一個 "{defaultGroup}"; 安全組
        title: 安全組
        vpcId: （先選擇一個專有網絡）
      tagTitle: ECS 標籤
      instanceChargeType:
        label: 實例付費模式
        prePaid: 包年包月
        postPaid: 按量付費
        spotStrategy: 搶佔式實例
      periodUnit:
        label: 購買資源的時長
        placeholder: 選擇購買資源時長...
        week: 周
        month: 個月
        year: 年
        half: 半
      spotDuration:
        label: 搶佔式實例使用時長
        default: 設定實例使用1小時
        none: 無確定使用時長
      spotStrategy:
        label: 搶佔式實例單台實例規格上限價
        spotAsPriceGo: 使用自動出價
        spotWithPriceLimit: 設置單台上限價
        info: 使用自動出價,以按量付費實例規格價格為上限，資源供需關係變化時，實例會被自動釋放，請做好數據備份工作。設定您的最高價（每實例/小時）,當市場價格高於您的出價或者資源供需關係變化時，實例會被自動釋放，請做好數據備份工作。
        suffix: ￥/小時
    aws:
      sizeLabel: |-
        {apiName}: {cpu, plural,
        =1 {1 vCPU}
        other {# vCPU}
        } / {memory, number} GiB 內存 / {storageSize, plural,
          =0 {EBS-Only}
          other {{storageSize, number} {storageUnit} {storageType}}
        }
    azure:
      availabilitySet:
        label: 可用性集（非託管）
      dns:
        help: 公共 IP 地址的唯一 DNS 標籤。
        label: DNS 標籤
      environment:
        label: 環境
      faultDomainCount:
        help: 如果可用性集已創建，將忽略容錯域數量。
        label: 容錯域數量
      image:
        help: 你需要使用託管磁盤來提供 ARM 資源標識符。
        label: 鏡像
      location:
        label: 位置
      managedDisks:
        label: 使用託管磁盤
      managedDisksSize:
        label: 託管磁盤大小
      nsg:
        help: 如果你使用託管的 Rancher 或提供現有的 NSG ，所有使用此模板的節點都會使用提供的 NSG。如果你沒有提供 NSG，將爲每個節點創建一個 NSG。
        label: 網絡安全組（NSG）
      openPort:
        add: 添加端口
        help: 如果你使用現有的 NSG，將忽略開放端口。
        label: 開放端口
      plan:
        label: 購買計劃
        placeholder: publisher:product:plan
      privateIp:
        label: 私有 IP 地址
      publicIpOptions:
        header: 公共 IP 選項
        noPublic:
          label: 沒有公共 IP
        staticPublicIp:
          label: 靜態公共 IP
      resourceGroup:
        label: 資源組
      size:
        label: 虛擬機大小
      sshUser:
        label: SSH 用戶名
      storageType:
        label: 儲存類型
      subnet:
        label: 子網
      subnetPrefix:
        label: 子網前綴
      updateDomainCount:
        help: 如果可用性集已創建，將忽略更新域數量。
        label: 更新域數量
      usePrivateIp:
        label: 使用私有 IP
      vnet:
        label: 虛擬網絡
        placeholder: '[resourcegroup:]name'
    digitalocean:
      sizeLabel: |-
        {plan, select,
          s {基礎： }
          g {通用： }
          gd {通用： }
          c {CPU： }
          m {內存： }
          so {存儲： }
          standard {標準： }
          other {}
        }{memoryGb} GB, {vcpus, plural,
          =1 {# vCPU}
          other {# vCPU}
        }, {disk} GB 磁盤 ({value})
      tags:
        label: Droplet 標籤
        placeholder: 例如：my_server
    linode:
      typeLabel: |-
        {label}, {vcpus, plural,
          =1 {# vCPU}
          other {# vCPU}
        }, {disk} GB 磁盤 ({value})
    vsphere:
      hostOptions:
        any: 任意
      vAppOptions:
        label: vApp 選項
        description: 選擇 OVF 環境屬性
        disable: 不使用 vApp
        auto: 使用 vApp 並使用網絡協議配置文件配置網絡
        manual: 提供自定義 vApp 配置
        restoreType: 還原類型
        transport:
          label: OVF 環境傳輸
          tooltip: com.vmware.guestInfo 或 ISO
          placeholder: 例如：com.vmware.guestInfo
        protocol:
          label: vApp IP 協議
          tooltip: IPv4 或 IPv6
          placeholder: 例如：IPv4
        allocation:
          label: vApp IP 分配策略
          tooltip: DHCP, 固定, 瞬態，或fixedAllocated
          placeholder: 例如：fixedAllocated
        properties:
          label: vApp 屬性
          add: 添加屬性
          keyPlaceholder: 例如：guestinfo.interface.0.ip.0.address
          valuePlaceholder: 例如：ip:虛擬機網絡，表達式，或字符串
      networks:
        label: 網絡
        add: 添加網絡
      guestinfo:
        label: guestinfo 配置參數
        add: 添加參數
        keyPlaceholder: 例如：guestinfo.hostname
        valuePlaceholder: 例如：myrancherhost
      creationMethods:
        template: '使用模板部署：數據中心'
        library: '使用模板部署：內容庫'
        vm: '克隆現有的虛擬機'
        legacy: '使用 boot2docker ISO 安裝（舊版）'
      scheduling:
        label: 調度
        description: 選擇虛擬機將被調度到哪個管理程序
        dataCenter: 數據中心
        resourcePool: 資源池
        dataStore: 數據存儲
        folder: 文件夾
        host:
          label: 主機
          note: 用於創建虛擬機的主機（如果是獨立的 ESXi 或是帶有 DRS 的集羣，請留空)
      instanceOptions:
        label: 實例選項
        description: 選擇虛擬機的大小和操作系統
        cpus: CPU
        memory: 內存
        disk: 磁盤
        creationMethod: 創建方法
        template:
          label: 模板
          none: 未找到模板
        contentLibrary: 內容庫
        libraryTemplate: 庫模板
        virtualMachine: 虛擬機
        osIsoUrl:
          label: 操作系統 ISO URL
          placeholder: '默認：最新的 rancheros-vmware 鏡像'
        cloudInit:
          label: Cloud Init
          placeholder: 例如：http://my_host/cloud-config.yml
          note: Cloud-init 文件 guestinfo 設置的 URL
        cloudConfigYaml: 雲配置 YAML
        os: 操作系統
      tags:
        label: 標籤
        description: 標籤用於向 vSphere 對象清單中的對象添加元數據，以便對對象進行排序和搜索。
        addTag: 添加標籤
      customAttributes:
        label: 自定義屬性（舊版）
        description: 自定義屬性用於向 vSphere 對象清單中的對象添加元數據，以便對對象進行排序和搜索。
        add: 添加自定義屬性
    amazonEc2:
      region: 區域
      zone: 區域
      instanceType: 實例類型
      rootSize:
        placeholder: '默認：16'
        label: 根磁盤大小
        suffix: GB
      selectedNetwork:
        label: 'VPC/子網'
        placeholder: 選擇一個 VPC 或子網
      iamInstanceProfile:
        label: IAM 實例配置文件名稱
        tooltip: Kubernetes 的 AWS 雲提供商支持要求使用實例配置文件
      ami:
        label: AMI ID
        placeholder: '默認：近版 Ubuntu LTS'
      sshUser:
        label: 用於 AMI 的 SSH 用戶名
        placeholder: '默認：ubuntu'
        tooltip: '所選 AMI 中的用戶名。此用戶名將用於 SSH 到這個節點。'
      securityGroup:
        title: 安全組
        vpcId: '（先選擇一個 VPC/子網）'
        mode:
          default: '標準：自動創建並使用一個 "{defaultGroup}" 安全組'
          custom: '選擇一個或多個現有的安全組：'
      volumeType:
        label: EBS 根卷類型
        placeholder: '默認：gp2'
      encryptEbsVolume: 加密 EBS 卷
      kmsKey:
        label: KMS 密鑰 ARN
        text: '沒有權限列出 KMS 密鑰。如果你知道密鑰 ARN，你可以輸入密鑰 ARN。'
      requestSpotInstance: 請求 Spot 實例
      spotPrice:
        label: Spot 價格
        placeholder: '默認：0.50'
        suffix: 每小時單價（美元）
      privateAddressOnly: 僅使用私有地址
      useEbsOptimizedInstance: EBS 優化實例
      httpEndpoint: 允許訪問 EC2 元數據
      httpTokens: 爲元數據使用 Token
      tagTitle: EC2 標籤
  addOns:
    additionalManifest:
      title: 其它清單文件
      tooltip: '集羣啓動時要應用的其它 Kubernetes 清單 YAML'
    dependencyBanner: 附加組件配置可能因 Kubernetes 版本而異。更改 Kubernetes 版本可能會重置以下值。
  advanced:
    argInfo:
      title: 補充 Kubelet 參數
      machineSelector:
        label: 添加主機選擇器
        listLabel: 添加參數
        bannerLabel: '注意：優先匹配最後一個的選擇器，並且只使用它的參數。匹配到的其他選擇器的參數不會合並。'
        title: '標籤匹配的主機：'
        subTitle: '使用 Kubelet 參數：'
        titleAlt: |-
          {count, plural,
            =1 { 所有主機均使用 Kubelet 參數： }
            other { 任何主機均使用 Kubelet 參數： }
          }
        kubeControllerManagerTitle: 補充的 Controller Manager 參數
        kubeApiServerTitle: 補充的 API server 參數
        kubeSchedulerTitle: 補充的 Scheduler 參數
        kubePlaceholder: 例如： max-pods=110
        protip: '參數格式為 <em>key=value</em>，將多行 <em>key=value</em> 鍵值對粘貼到輸入框內，以便批量輸入。'
    agentArgs:
      label: 如果內核參數與預期的 Kubelet 默認值不同，則拋出錯誤。
  banner:
    warning: '此集羣包含此表單不完全支持的 machineSelectorConfig。使用 YAML 編輯器管理完整配置。'
    os: '你正在將 {newOS} worker 節點添加到具有一個或多個 {existingOS} worker 節點的集羣。你可能需要升級或刪除某些已安裝的應用。'
    rke2-k3-reprovisioning: '更改集羣配置可能導致節點重新配置。詳情請參見 <a target="blank" href="{docsBase}/cluster-provisioning/rke-clusters/behavior-differences-between-rke1-and-rke2/" target="_blank" rel="noopener nofollow">文檔</a>。'
    desiredNodeGroupWarning: 沒有可用於運行 Cluster Agent 的節點。要讓集羣變爲 Active 狀態，至少需要有 1 個可用的節點。
  machinePool:
    name:
      label: 池名稱
      placeholder: 默認會隨機生成一個名稱
    nodeTotals:
      label:
        controlPlane: '{count} 個 Control Plane 節點'
        etcd: '{count} 個 ETCD 節點'
        worker: '{count} 個 worker 節點'
      tooltip:
        controlPlane: |-
          {count, plural,
            =0 { 一個集羣需要至少1個可用的 Control Plane 節點。}
            =1 { 只有1個 Control Plane 節點的集羣是不具備容錯能力的。}
            other {}
          }
        etcd: |-
          {count, plural,
            =0 { 一個集羣需要至少1個可用的 ETCD 節點。}
            =1 { 只有1個 ETCD 節點的集羣是不具備容錯能力的。}
            =2 { 集羣的節點數需要是奇數。只有2個 ETCD 節點的集羣是不具備容錯能力的。}
            =3 {}
            =4 { 集羣的節點數需要是奇數。}
            =5 {}
            =6 { 集羣的節點數需要是奇數。}
            =7 {}
            other { 不建議創建多於7個ETCD 節點。}
          }
        worker: |-
          {count, plural,
            =0 { 一個集羣需要至少1個可用的 Worker 節點。}
            =1 { 只有1個 Worker 節點的集羣是不具備容錯能力的。}
            other {}
          }
    quantity:
      label: 主機數量
    drain:
      header: 清空
      label: 刪除前清空
    role:
      label: 角色
    labels:
      label: Kubernetes 節點標籤
    autoReplace:
      label: 自動替換
      toolTip: 如果大於 0，則在此期間無法訪問的節點將被自動刪除和替換。
      unit: "秒"
  memberRoles:
    removeMessage: '注意：刪除用戶不會刪除其項目權限。'
    addClusterMember:
      labelSelect: 選擇成員
      labelAdd: 添加成員
      placeholder: 搜索成員以提供集羣訪問權限
      searchPlaceholder: 請輸入搜索
      noResults: 沒有匹配的結果
  privateRegistry:
    systemDefaultRegistry:
      label: 用於 {vendor} 鏡像的倉庫主機名
    mode:
      public: 從公共 DockerHub 中爲 {vendor} 拉取鏡像
      private: 從私有倉庫中爲 {vendor} 拉取鏡像
      advanced: 配置高級容器 Mirror 和倉庫驗證選項
  provider:
    ackoperatorsetting: Alibaba ACK
    alibaba: Alibaba
    aliyunecs: Aliyun ECS
    aliyunkubernetescontainerservice: Alibaba ACK
    aliyun: Alibaba ACK
    amazonec2: Amazon EC2
    amazoneks: Amazon EKS
    aws: Amazon
    azure: Azure
    azureaks: Azure AKS
    aks: Azure AKS
    azurekubernetesservice: Azure AKS
    baiducloudcontainerengine: 百度 CCE
    baidu: 百度 CCE
    cloudca: Cloud.ca
    cloudscale: Cloudscale
    custom: 自定義
    digitalocean: DigitalOcean
    docker: Docker
    eks: Amazon EKS
    exoscale: Exoscale
    gcp: Google
    google: Google GCE
    googlegke: Google GKE
    gke: Google GKE
    harvester: Harvester
    huaweicce: 華爲 CCE
    import: 通用
    imported: 已導入
    k3s: K3s
    kubeAdmin: KubeADM
    linode: Linode
    linodelke: Linode LKE
    local: 本地
    minikube: Minikube
    oci: Oracle OCI
    openstack: OpenStack
    opentelekomcloudcontainerengine: Open Telekom Cloud CCE
    otccce: Open Telekom Cloud CCE
    oracle: Oracle
    oracleoke: Oracle OKE
    otc: Open Telekom Cloud
    other: 其他
    packet: Equinix Metal
    pinganyunecs: 平安雲 ECS
    pnap: phoenixNAP
    rackspace: RackSpace
    rancherkubernetesengine: RKE
    rke2: RKE2
    rke: RKE1
    rkeWindows: Windows
    s3: S3 兼容
    softlayer: IBM 雲
    tencenttke: 騰訊雲 TKE
    tkeoperatorsetting: 騰訊雲 TKE
    tke: Tencent
    upcloud: UpCloud
    vmwarevsphere: VMware vSphere
    zstack: ZStack
  providerTag:
    rke2:
      harvester: '{tag}'
  providerGroup:
    create-custom1: 使用現有節點並使用 RKE 創建集羣
    create-custom2: 使用現有節點並使用 RKE2/K3s 創建集羣
    create-kontainer: 在託管的 Kubernetes 提供商中創建集羣
    register-kontainer: 在託管的 Kubernetes 提供商中註冊現有集羣
    create-rke1: 創建新節點並使用 RKE 創建集羣
    create-rke2: 創建節點並使用 RKE2/K3s 創建集羣
    create-template: 使用 Catalog 模板創建集羣
    register-custom: 導入任意 Kubernetes 集羣
  rke2:
    snapshots:
      suffix: 每個節點的快照
    systemService:
      rke2-coredns: 'CoreDNS'
      rke2-ingress-nginx: 'NGINX Ingress'
      rke2-kube-proxy: 'Kube Proxy'
      rke2-metrics-server: 'Metrics Server'
      header: 系統服務
    cni:
      label: 容器網絡
    cloudProvider:
      label: 雲提供商
      header: 雲提供商配置
    security:
      header: 安全
    defaultPodSecurityPolicyTemplateName:
      label: 默認 Pod 安全策略
    enableNetworkPolicy:
      label: 項目網絡隔離
    workNode:
      label: Worker 節點
    controlPlaneConcurrency:
      label: Control Plane 併發
      toolTip: "可以是固定的節點數（如 1），也可以是百分比（如 10%）"
    workerConcurrency:
      label: Worker 併發
      toolTip: "可以是固定的節點數（如 1），也可以是百分比（如 10%）"
    drain:
      label: 清空節點
      toolTip: 清空操作預先移除每個節點上的 Pod，使得升級中的節點上沒有運行的工作負載。不清空的升級速度更快，造成的混亂更少，但是 Pod 仍可能根據進行中的升級進行重啓。
    address:
      tooltip: 創建集羣后無法更改集羣網絡值。
      header: 尋址
      clusterCidr:
        label: 集羣 CIDR
      serviceCidr:
        label: 服務 CIDR
      dns:
        label: 集羣 DNS
      domain:
        label: 集羣域名
      nodePortRange:
        label: NodePort 服務端口範圍
      tlsSan:
        label: TLS 可選名稱
      fqdn:
        toolTip: FQDN 將解析爲集羣的健康 Control Plane 節點。
      caCerts:
        label: CA 證書
        toolTip: 客戶端用於驗證端點返回的證書是否有效的證書。
      ipv6:
        warning: 你正在使用 IPv6 CIDR。你可能需要額外配置主機驅動。
        enable: 啓用 IPv6 支持
    etcd:
      disableSnapshots:
        label: 自動快照
      snapshotScheduleCron:
        label: Cron 調度
      snapshotRetention:
        label: 保留最後一個
      exportMetric:
        label: 指標
        false: 僅在集羣內可用
        true: 暴露給公共接口
    deleteEmptyDir: 默認情況下，使用 emptyDir 卷的 pod 會在升級時被刪除。在 pod 生命週期中依賴於 emptyDir 持久卷的操作可能會受到影響。
  k3s:
    techPreview: K3s 配置處於技術預覽中
    systemService:
      coredns: 'CoreDNS'
      local-storage: '本地存儲'
      metrics-server: 'Metrics Server'
      servicelb: 'Klipper 服務 LB'
      traefik: 'Traefik Ingress'
  selectCredential:
    genericDescription: "{vendor} 沒有此驅動的內置支持。請查閱驅動的官方文檔，以瞭解身份驗證所需的字段。"
  snapshot:
    successTitle: 快照已開始
    errorTitle: "快照 {name} 出錯"
    successMessage: "已爲 {name} 請求快照"
    bulkSuccessTitle: 快照已開始
    bulkSuccessMessage: |-
      {count, plural,
        =1 { 已爲1個集羣請求快照 }
        other {已爲{count}個集羣請求快照}
      }
    failed: '{time} 後的快照已失敗'
    groupLabel: 位置
    rke1:
      local: 本地
      s3: s3
  tabs:
    ace: 授權端點
    addons: 附加配置
    advanced: 高級選項
    agentEnv: Agent 環境變量
    basic: 基本信息
    cluster: 集羣配置
    etcd: ETCD
    log: 配置日誌
    networking: 網絡
    machinePools: 主機池
    machines: 主機
    memberRoles: 成員角色
    registry: 鏡像倉庫
    upgrade: 升級策略
    registration: 註冊
  rotateCertificates:
    label: 輪換證書
    modalTitle: 輪換集羣證書
    services: 服務
    allServices: 輪換所有服務證書
    selectService: 輪換單個服務證書
  toggle:
    v1: RKE1
    v2: RKE2/K3s
  detail:
    kubernetesVersion: Kubernetes 版本
    machinePools: 主機池
    machineProvider: 主機提供商
    machines: 主機
    provisioner: 提供商
    rkeTemplate: RKE 模板
  managementTimeout: 集羣變成可用。可能已創建了集羣。建議在創建另一個集羣之前檢查集羣頁面。
  validation:
    iamInstanceProfileName: 如果選擇了 Amazon 雲提供商，則必須爲每個主機池定義“IAM 實例配置文件名稱”。
  copiedConfig: 已將 KubeConfig 複製到剪切板
  explore: 瀏覽
  exploreHarvester: 瀏覽
  rkeTemplateUpgrade: 模板修訂版 {name} 可用於升級
  k8sAuditLog: 查看 API Server 審計日誌
clusterIndexPage:
  hardwareResourceGauge:
    consumption: "{total} {units} {suffix} 中的 {useful}"
    cores: CPU
    pods: Pod
    ram: 內存
    used: 已使用
    reserved: 已預留
    units:
      cores: |-
        {count, plural,
        =1 {核}
        other {核}}
  header: 集羣儀表板
  resourceGauge:
    totalResources: 資源總額
  sections:
    capacity:
      label: 容量
    events:
      label: 事件
      resource:
        label: 資源
      date:
        label: 日期
    alerts:
      label: 告警
    clusterMetrics:
      label: 集羣指標
    etcdMetrics:
      label: ETCD 指標
    k8sMetrics:
      label: Kubernetes 組件指標
    gatekeeper:
      buttonText: 配置 OPA Gatekeeper
      disabled: 未配置 OPA Gatekeeper
      label: 違反 OPA Gatekeeper 的限制規定
      noRows: 所有的 OPA Gatekeeper 限制都符合規定
    nodes:
      label: 不健康節點
      noRows: 所有節點都處於健康狀態
    componentStatus:
      etcd: Etcd
      scheduler: 調度器
      controller-manager: Controller Manager
configmap:
  tabs:
    data:
      label: 數據
      protip: 請在此處輸入 UTF-8 文本數據
    binaryData:
      label: 二進制數據
containerResourceLimit:
  cpuPlaceholder: 例如：1000
  gpuPlaceholder: 例如：1
  helpText: 配置容器可以使用的默認資源配額
  helpTextDetail: 容器可以使用的的默認資源配額
  label: 容器默認資源限制
  limitsCpu: CPU 限制
  limitsGpu: NVIDIA GPU 限制/預留
  limitsMemory: 內存限制
  memPlaceholder: 例如：128
  requestsCpu: CPU 預留
  requestsMemory: 內存預留
  maxCpu: 最大 CPU
  maxMemory: 最大內存
  minCpu: 最小 CPU
  minMemory: 最小內存
cruResource:
  backToForm: 返回表單編輯
  backBody: 返回表單編輯不會保留對 YAML 做出的所有更改
  cancelBody: 返回表單編輯不會保留對 YAML 做出的所有更改
  confirmBack: "確認"
  confirmCancel: "確認"
  reviewForm: "繼續編輯 YAML"
  reviewYaml: "繼續編輯 YAML"
  previewYaml: 以 YAML 文件編輯
  showYaml: 以 YAML 形式查看
detailText:
  collapse: 隱藏
  binary: '<二進制數據: {n, number} 字節>'
  empty: '<空白>'
  unsupported: '<UI 不支持該值，請查看 YAML>'
  plusMore: |-
    {n, plural,
      =1 {+ 1個字符}
      other {+ {n, number}個字符}
    }
drainNode:
  action: '清空'
  actionStop: '停止清空'
  titleOne: 清空 {name}
  titleMultiple: '清空 {count} 個節點'
  deleteLocalData: 刪除空目錄數據
  force: 強制
  safe:
    label: 安全
    helpText: 如果一個節點有獨立的 Pod 或臨時數據，它將被封鎖，但不會被清空。
  gracePeriod:
    title: Pod 終止的寬限期
    default: 使用 Pod 本身的默認值
    placeholder: 例如：30
    custom: "忽略默認值，每個 Pod 爲："
  timeout:
    title: "清空超時"
    default: 超時後繼續嘗試清空
    placeholder: 例如：60
    custom: "超時後放棄清空："
etcdInfoBanner:
  hasLeader: "ETCD 有一個 Leader："
  leaderChanges: "Leader 變化的次數："
  failedProposals: "失敗的 proposal 數量"
fleet:
  dashboard:
    pageTitle: 持續交付儀表板
    menuLabel: 儀表板
    welcome: 歡迎使用 Fleet 持續交付
    gitOpsScale: 大規模 GitOps。
    learnMore: 瞭解更多。
    learnMoreLink: https://fleet.rancher.io
    noRepo: "工作區中沒有任何 Git 倉庫"
    getStarted: 開始使用
    thereIsMore: |-
      {count, plural,
      =1 { 還有一個沒有倉庫的工作區 }
      other { 還有 { count } 個沒有倉庫的工作區 }
      }
    expandAll: 展開所有
    collapseAll: 收起所有
  cluster:
    summary: 資源摘要
    nonReady: 非就緒 Bundle
  clusters:
    harvester: |-
      還有 {count, plural,
      =1 {1個 Harvester 集羣未顯示，因爲它不能與持續交付一起使用。}
      other { #個 Harvester 集羣未顯示，因爲它們不能與持續交付一起使用。}
      }
  tokens:
    harvester: |-
      {count, plural,
      =1 {1個 Token 未顯示，因爲它屬於不能與持續交付一起使用的 Harvester 集羣。}
      other {#個 Token 未顯示，因爲它屬於不能與持續交付一起使用的 Harvester 集羣。}
      }
  bundles:
    harvester: |-
      {count, plural,
      =1 {1 個 Bundle 未顯示，因爲它屬於不能與持續交付一起使用的 Harvester 集羣。}
      other {# 個 Bundle 未顯示，因爲它屬於不能與持續交付一起使用的 Harvester 集羣。}
      }
    resources: 資源
  fleetSummary:
    noClustersGitRepo: 這個 Git 倉庫不針對任何集羣
    state:
      ready: '就緒'
      info: '轉換中'
      warning: '警告'
      error: '錯誤'
      unknown: '未知'
      notReady: 未就緒
      waitApplied: 等待應用
  gitRepo:
    createLocalBanner: 將 Git 倉庫部署到本地工作區時，你無法定位任何集羣或集羣組
    tabs:
      resources: 資源
      unready: 未就緒
    auth:
      label: 身份驗證
      git: Git 身份驗證
      helm: Helm 身份驗證
    caBundle:
      label: 證書
      placeholder: "粘貼一個或多個證書，以-----BEGIN CERTIFICATE----開始。"
    paths:
      label: 路徑
      placeholder: 例如：/directory/in/your/repo
      addLabel: 添加路徑
      empty: 默認使用倉庫的根目錄。要使用一個或多個不同的目錄，請在這裏添加。
    repo:
      label: 倉庫 URL
      placeholder: '例如：https://github.com/rancher/fleet-examples.git'
      addRepo: 添加倉庫
      noRepos: 未添加任何倉庫
    ref:
      label: Watch
      branch: 分支
      revision: 修訂
      branchLabel: 分支名稱
      branchPlaceholder: 例如：master
      revisionLabel: Tag 或 Commit Hash
      revisionPlaceholder: 例如：v1.0.0
    serviceAccount:
      label: 服務賬號名稱
      placeholder: "（選填）在目標集羣中使用服務賬號"
    targetNamespace:
      label: 目標命名空間
      placeholder: "（選填）要求所有資源都在此命名空間內"
    target:
      selectLabel: 目標
      advanced: 高級選項
      cluster: 集羣
      clusterGroup: 集羣組
      label: 部署到
      labelLocal: 部署方式
    targetDisplay:
      advanced: 高級選項
      cluster: "集羣"
      clusterGroup: "組"
      all: 全部
      none: 無
      local: 本地
    tls:
      label: TLS 證書驗證
      verify: 需要提供有效的證書
      specify: 指定接受的附加證書
      skip: 接受任何證書（不安全）
    warningTooltip:
      clusterGroup: 此集羣組中沒有集羣
      cluster: 沒有可用的集羣
    workspace:
      label: 工作空間
    add:
      steps:
        repoInfo:
          description: Fleet 將持續監控下方配置的 Git 倉庫，並將倉庫中包含的資源同步到配置的目標。
          label: 倉庫詳情
          subtext: 定義倉庫詳情
          title: 指定要添加到 Fleet 的 Git 倉庫
        targetInfo:
          description: 你可以配置哪些集羣將用作與倉庫資源同步的目標。
          label: 目標詳情
          subtext: 定義目標詳情
          title: 指定要與倉庫同步的目標
  clusterGroup:
    selector:
      label: 集羣選擇器
      matchesAll: 匹配到 {total, number} 個集羣
      matchesNone: 與現有的集羣都不匹配
      matchesSome: |-
        {matched, plural,
          =1 {與現有的{total, number}個集羣中的1個集羣"{sample}"匹配}
          other {現有{total, number}個集羣，與其中的{matched, number}個匹配，包括"{sample}"}
        }
  fdc:
    cluster: 集羣
    error: 錯誤
    errors: 錯誤
    id: ID
    loadingChart: 正在加載 Chart 數據...
    ready: 就緒
    renderingChart: 正在渲染 Chart...
    state: 狀態
    type: 類型
footer:
  docs: Rancher 官方文檔
  download: 下載 CLI
  forums: 論壇
  issue: 提交 GitHub Issue
  slack: Slack 討論羣
  mirror: 下載 Rancher 資源
  wechat:
    title: 微信
    modalText: 掃描二維碼添加 Rancher 小助手
    modalText2: 加入 Rancher 官方微信羣
gatekeeperConstraint:
  match:
    title: 匹配
  tab:
    enforcementAction:
      title: 執行動作
    rules:
      title: 規則
      sub:
        labelSelector:
          addLabel: 添加標籤
          title: 標籤選擇器
    namespaces:
      sub:
        excludedNamespaces: 排除的命名空間
        namespaces: 命名空間
        namespaceSelector:
          addNamespace: 添加命名空間
          title: 命名空間選擇器
        scope:
          title: 範圍
      title: 命名空間
    parameters:
      addParameter: 添加參數
      editAsForm: 以表單編輯
      editAsYaml: 以 YAML 文件編輯
      title: 參數
  template: 模板
  violations:
    title: 違反規定
gatekeeperIndex:
  poweredBy: OPA Gatekeeper
  unavailable: OPA Gatekeeper 不在 system-charts 應用商店中.
  violations: 違反規定
glance:
  created: 創建時間
  cpu: CPU 使用量
  memory: 內存
  nodes:
    total:
      label: |-
        {count, plural,
          =1 { 節點 }
          other { 總節點 }
        }
  pods: Pod
  provider: 提供商
  version: Kubernetes 版本
  monitoringDashboard: 監控儀表板
  installMonitoring: 安裝 Monitoring
  v1MonitoringInstalled: 已安裝 Monitoring V1
  clusterInfo: 集羣信息
clusterBadge:
  addLabel: 添加集羣徽章
  editLabel: 編輯集羣徽章
  modal:
    title: 自定義集羣徽章
    checkbox: 顯示此集羣的徽章
    description: 自定義說明
    iconText: 圖標文本
    buttonAction: 應用
    badgeBgColor: 徽章背景顏色
    badgeTextColor: 徽章文字顏色
    badgeAsIcon: 自定義集羣圖標
    maxCharsTooltip: 最多兩個字符
    previewTitle: "集羣圖標和名稱效果"
grafanaDashboard:
  failedToLoad: 加載圖表失敗
  reload: 重新加載
  grafana: Grafana
graphOptions:
  detail: 詳情
  summary: 概述
  refresh: 刷新
  range: 範圍
hpa:
  detail:
    currentMetrics:
      header: 當前指標
      noMetrics: 沒有當前指標
    metricHeader: '{source} 指標'
  metricIdentifier:
    name:
      label: 指標名稱
      placeholder: 例如：packets-per-second
    selector:
      label: 添加選擇器
  metricTarget:
    averageVal:
      label: 平均值
    quantity:
      label: 數量
    type:
      label: 類型
    utilization:
      label: 平均利用率
    value:
      label: 值
  metrics:
    headers:
      metricName: 名稱
      objectKind: 對象類型
      objectName: 對象名稱
      quantity: 數量
      resource: 資源名稱
      targetName: 目標名稱
      value: 值
    source: 源
  objectReference:
    api:
      label: 引用的 API 版本
      placeholder: 例如：apps/v1beta1
    kind:
      label: 引用類型
      placeholder: 例如：Deployment
    name:
      label: 引用名稱
      placeholder: 例如：php-apache
  tabs:
    labels: 標籤
    metrics: 指標
    target: 目標
    workload: 工作負載
  types:
    cpu: CPU
    memory: 內存
  warnings:
    custom: 爲了使用 HPA 的自定義指標，你需要部署自定義 Metrics Server，如 Prometheus 適配器。
    external: 爲了使用 HPA 的外部指標，你需要部署外部 Metrics Server，如 Prometheus 適配器。
    noMetric: 爲了使用 HPA 的資源指標，你需要部署 Metrics Server。
    resource: 選定的目標引用在規格上沒有正確的資源請求。因此，HPA 指標將不會生效。
  workloadTab:
    current: 當前副本數
    last: 上次擴縮容時間
    max: 最大副本數
    min: 最小副本數
    targetReference: 目標引用
import:
  title: 導入 YAML
  defaultNamespace:
    label: 默認命名空間
  success: |-
    已應用 {count, plural,
    =1 {1個資源}
    other {#個資源}
    }
ingress:
  certificates:
    addCertificate: 添加證書
    addHost: 添加主機
    certificate:
      label: 證書 - 密文名稱
      doesntExist: 所選證書不存在
    defaultCertLabel: 默認 Ingress Controller 證書
    headers:
      certificate: 證書
      hosts: 主機
    host:
      label: 主機
      placeholder: 例如：example.com
    label: 證書
    removeHost: 移除
  defaultBackend:
    label: 默認後端
    noServiceSelected: 沒有配置默認後端。
    port:
      label: 端口
      placeholder: 例如：80 或 http
      notInt: 端口必須是整數
      required: 端口是必填的
    targetService:
      label: 目標服務
      doesntExist: 你選擇的服務不存在
      required: 目標服務是必填的
    warning: "警告：默認後端將全局用於整個集羣"
  rules:
    addPath: 添加路徑
    addRule: 添加規則
    headers:
      pathType: 路徑類型
      path: 路徑
      port: 端口
      target: 目標服務
      certificates: 證書
    hostname: 主機名
    path:
      label: 路徑
      placeholder: 例如：/foo
    port:
      label: 端口
      placeholder: 例如：80 或 http
    removePath: 移除
    requestHost:
      label: 請求主機
      placeholder: 例如：example.com
    target:
      label: 目標服務
      doesntExist: 你選擇的服務不存在
    title: 規則
  rulesAndCertificates:
    title: 規則和證書
    defaultCertificate: 默認
  target:
    default: 默認
  ingressClass:
    label: IngressClass
  rulesOrBackendSpecified: 必須指定默認後端或規則
internalExternalIP:
  none: 無
istio:
  links:
    kiali:
      label: Kiali
      description: '服務網格中的可視化服務及其連接方式。要想讓 Kiali 顯示數據，你需要安裝 Prometheus。如果你需要監控解決方案，請安裝 <a tabindex="0" href="{link}">{vendor} Monitoring</a>。'
    jaeger:
      label: Jaeger
      description: 監控並排除基於微服務的分佈式系統的故障。
    disabled: '沒有安裝 {app} 應用。'
  cni: 啓用 CNI
  customOverlayFile:
    label: 自定義覆蓋文件
    tip: '<a target="_blank" rel="noopener noreferrer nofollow" href="https://istio.io/latest/docs/setup/additional-setup/customize-installation/#patching-the-output-manifest">覆蓋文件</a>支持在基本的 {vendor} Istio 安裝之上進行額外的配置。你可以利用 <a href="https://istio.io/latest/docs/reference/config/istio.operator.v1alpha1/" target="_blank" rel="noopener noreferrer nofollow" >IstioOperator API</a> 對所有組件進行更改和添加，並通過此覆蓋 YAML 文件應用這些更改。'
  description: '{vendor} Istio Helm Chart 爲你安裝了一個最小 Istio 配置，以便你進行應用集成。如果你需要獲得有關 Istio 的更多信息，請訪問<a target="_blank" href="https://istio.io/latest/docs/concepts/what-is-istio" rel="noopener noreferrer nofollow"> What Is Istio</a>'
  destinationRule:
    title:
      new: 添加目標規則
      edit: 編輯目標規則
      view: "目標規則：{name}"
    port:
      label: 端口
      placeholder: 例如：8080 或 myport
    host:
      label: 輸入主機
      error: 主機是必填項。
    name:
      placeholder: 例如：myrule
    loadBalancer:
      title: 負載均衡
      label: 算法
      detail: 配置負載均衡算法
      simple:
        label: 使用標準負載均衡算法
        roundRobin:
          label: 輪詢策略
        leastConn:
          label: 最小連接數負載均衡
        random:
          label: 隨機負載均衡
        passthrough:
          label: 透傳
      consistentHash:
        label: 使用一致並基於哈希的負載均衡，實現軟會話保持
        httpHeaderName:
          label: HTTP 頭部名稱
          placeholder: 例如：end-user
          error: HTTP 頭部名稱是必填項。
        minimumRingSize:
          label: 最小環大小
          placeholder: 例如：1024
        httpCookie:
          name:
            label: Cookie 名稱
            placeholder: 例如：username
            error: Cookie 名稱是必填項。
          path:
            label: Cookie 路徑
            placeholder: 例如：/
          ttl:
            label: TTL
            placeholder: 例如：0s
            error: TTL 是必填項。
        mode:
          label: 哈希模式
          header:
            label: 基於特定 HTTP 頭部的哈希
          cookie:
            label: 基於 HTTP Cookie 的哈希
          sourceIp:
            label: 基於源 IP 地址的哈希
    connectionPool:
      label: 連接池
      detail: 配置與上游服務的連接量
      http1MaxPendingRequests:
        label: HTTP1 最大待處理請求數
        placeholder: 例如：1024
        help: 到目標的最大待處理 HTTP 請求數。
      http2MaxRequests:
        label: HTTP2 最大請求數
        placeholder: 例如：1024
        help: 到後端的最大請求數。
      maxRequestsPerConnection:
        label: 每個連接的最大 HTTP 請求數
        placeholder: 例如：10
        help: 每個連接到後端的最大請求數。如果此參數設爲1，Keep Alive 將被禁用。
      maxRetries:
        label: HTTP 最大重試次數
        placeholder: 例如：1024
        help: 在規定時間內，到集羣中所有主機的允許未完成的最大重試次數。
      connectTimeout:
        label: TCP 連接超時
        placeholder: 例如：30ms
        help: TCP 連接超時。
      maxConnections:
        label: TCP 最大連接數
        placeholder: 例如：1024
        help: 到目標主機的最大 HTTP1 /TCP 連接數。
    outlierDetection:
      label: 異常點檢測
      detail: 負載均衡池中不健康主機的驅逐配置
      baseEjectionTime:
        label: 基礎驅逐時間
        placeholder: 例如：30s
        help: 最短驅逐時長。主機被驅逐的時間，基於其最短驅逐時長，及其已被驅逐的次數。
      consecutiveErrors:
        label: 連續錯誤
        placeholder: 例如：5
        help: 主機被驅逐出連接池前的錯誤數。
      interval:
        label: 間隔
        placeholder: 例如：10s
        help: 驅逐清除分析的時間間隔。
      maxEjectionPercent:
        label: 最大驅逐百分比
        placeholder: 例如：10
        help: 可以驅逐的上游服務，在負載均衡池中的最大主機百分比。
    subsets:
      label: 子集
      noSubsets: 無子集
      addSubsetLabel: 添加子集
      removeSubsetLabel: 移除子集
      name:
        label: 名稱
        placeholder: 例如：v1
        error: 子集名稱是必填項。
      labels:
        error: 請爲子集輸入至少一個標籤。
    tls:
      label: TLS
      detail: 上游服務連接的 TLS 設置
      mode:
        label: TLS 模式
        none:
          label: 無
        istio:
          label: 雙向 Istio - 使用 Istio 雙向 TLS 認證安全連接到上游
        disable:
          label: 關閉 - 不設置與上游端點的 TLS 連接
        simple:
          label: 簡單 - 發起到上游端點的 TLS 連接
        mutual:
          label: 雙向 - 通過客戶端證書進行身份驗證，使用雙向的 TLS 安全連接到上游
      clientCertificate:
        label: 客戶端證書
        placeholder: 例如：/etc/certs/myclientcert.pem
        error: 客戶端證書是必填項。
      privateKey:
        label: 私鑰
        placeholder: 例如：/etc/certs/client_private_key.pem
        error: 私鑰是必填項。
      caCertificates:
        label: CA 證書
        placeholder: 例如：/etc/certs/rootcacerts.pem
      sni:
        label: SNI
        placeholder: 例如：nginx.example.com
      subjectAltNames:
        label: 使用者可選名稱
        placeholder: 例如：example.com
        add: 添加使用者可選名稱
  egressGateway: 啓用 Egress 網關
  ingressGateway: 啓用 Ingress 網關
  istiodRemote: 啓用 istiodRemote
  kiali: 啓用 Kiali
  pilot: 啓用 Pilot
  policy: 啓用 Policy
  poweredBy: 由 <a target="_blank" rel="noopener noreferrer nofollow" href='https://istio.io/latest/'>Istio</a> 提供支持
  telemetry: 啓用遙測
  titles:
    components: 組件
    customAnswers: 自定義回覆
    advanced: 高級選項
    description: 描述
  tracing: 啓用 Jaeger 跟蹤（有限）
  v1Warning: 在安裝這個版本前，請卸載<code>istio-system</code> 命名空間中的當前 Istio 版本。
labels:
  addLabel: 添加標籤
  addSetLabel: 添加/設置標籤
  addTag: 添加標籤
  addTaint: 添加污點
  addAnnotation: 添加註釋
  labels:
    title: 標籤
    fleetClusterTooltip: 標籤更改應用到管理集羣並同步到 Fleet 集羣。
  annotations:
    title: 註釋
landing:
  clusters:
    title: 集羣
    provider: 提供商
    kubernetesVersion: Kubernetes 版本
    explorer: 瀏覽器
    explore: 瀏覽
    cores: |-
      {count, plural,
      =1 {核}
      other {核}}
    cpuUsed: 已用 CPU
    memoryUsed: 已用內存
  seeWhatsNew: 點擊右側鏈接，瞭解此版本的新功能和優化。
  whatsNewLink: "2.6 的新功能"
  learnMore: 瞭解更多
  gettingStarted:
    title: 快速入門
    body: 查看快速入門指南。Cluster Manager 用戶可以瞭解 Dashboard UI 的更多新功能。
  community:
    title: 社區支持
    docs: Rancher 官方文檔
    forums: 論壇
  commercial:
    title: 商業支持
    body: 瞭解商業支持
  landingPrefs:
    title: 更改登錄後顯示的頁面：
    body: "登錄後顯示："
    options:
      homePage: 主頁
      lastVisited: 上次訪問的頁面
      custom: "集羣"
    userPrefs: 偏好設置
  welcomeToRancher: '歡迎使用 {vendor}'
  support: 支持
logging:
  clusterFlow:
    noOutputsBanner: 選定的命名空間中沒有集羣輸出
  flow:
    clusterOutputs:
      doesntExistTooltip: 該集羣輸出不存在
      label: 集羣輸出
    matches:
      label: 匹配
      addSelect: 添加包含規則
      addExclude: 添加排除規則
    filters:
      label: 篩選
    outputs:
      doesntExistTooltip: 該集羣輸出不存在
      label: 輸出
  install:
    k3sContainerEngine: K3S 容器引擎
    enableAdditionalLoggingSources: 啓用加強版雲日誌服務
    dockerRootDirectory: Docker 根目錄
    systemdLogPath: systemd 日誌路徑
    tooltip: '某些 Kubernetes 發行版在 <code>journald</code>中記錄日誌。你需要定義<code>systemdLogPath</code> 以收集日誌。默認路徑是<code>/run/log/journal</code>，但某些 Linux 發行版不默認使用該路徑。'
    url: '<a href="https://rancher.com/docs/rancher/v2.6/en/logging/helm-chart-options/" target="_blank" rel="noopener nofollow noreferrer">瞭解更多</a>'
    default: /run/log/journal
  elasticsearch:
    host: 主機
    scheme: Scheme
    port: 端口
    indexName: 索引名稱
    user: 用戶名
    password: 密碼
    caFile:
      label: CA 證書文件
    clientCert:
      label: 客戶端證書
      placeholder: 粘貼 CA 證書
    clientKey:
      label: 客戶端密鑰
      placeholder: 粘貼客戶端密鑰
    clientKeyPass: 傳自密文的客戶端密鑰
    verifySsl: 驗證 SSL
    sslVersion: SSL 版本
  gelf:
    host: 主機
    port: 端口
    protocol: 協議
    tls: 啓用 TLS
    tlsOptions:
      clientCert: 客戶端證書
      clientKey: 客戶端證書密鑰
      allCiphers: 允許使用任何密碼
      tlsVersion: TLS 版本
      noVerify: 跳過 TLS 驗證
  kafka:
    brokers: Broker
    defaultTopic: 默認主題
    saslOverSsl: 通過 SSL 實現 SASL
    scramMechanism: SCRAM 機制
    username: 用戶名
    password: 密碼
    sslCaCert:
      label: CA 證書
      placeholder: 粘貼 CA 證書
    sslClientCert:
      label: CA 證書
      placeholder: 粘貼客戶端證書
    sslClientCertChain:
      label: 證書鏈
      placeholder: 粘貼客戶端證書鏈
    sslClientCertKey: SSL 客戶端證書密鑰
  loki:
    url: URL
    tenant: 租戶
    username: 用戶名
    password: 密碼
    configureKubernetesLabels: 以類似 Prometheus 的格式配置 Kubernetes 元數據
    extractKubernetesLabels: 提取 Kubernetes 標籤作爲 Loki 標籤
    dropSingleKey: 如果一條記錄只有1個鍵，那麼只需將日誌行設置爲該值並丟棄該鍵。
    caCert: CA 證書
    cert: CA 證書
    key: 密鑰
  awsElasticsearch:
    url: URL
    keyId: 密鑰 ID
    secretKey: 密文密鑰
  azurestorage:
    storageAccount: 賬號
    accessKey: 訪問密鑰
    container: 容器
    path: 路徑
    storeAs: 存儲爲
  cloudwatch:
    keyId: 密鑰 ID
    secretKey: 密文密鑰
    endpoint: 端點
    region: 區域
    logGroupName: 日誌組名稱
    logStreamName: 日誌流名稱
  datadog:
    apiKey: API 密鑰
    useSSL: 使用 SSL
    useCompression: 使用壓縮
    host: 主機
  file:
    path: 路徑
  gcs:
    project: 項目
    credentialsJson: 憑證
    bucket: 存儲桶
    path: 路徑
    overwriteExistingPath: 覆蓋現有路徑
  kinesisStream:
    streamName: 流名稱
    keyId: 密鑰 ID
    secretKey: 密文密鑰
  logdna:
    apiKey: API 密鑰
    hostname: 主機名
    app: 應用
  logz:
    url: URL
    port: 端口
    token: API Token
    enableCompression: 啓用壓縮
  newrelic:
    apiKey: API 密鑰
    licenseKey: 許可證密鑰
    baseURI: 基本 URI
  sumologic:
    endpoint: 端點
    sourceName: 源名稱
  syslog:
    host: 主機
    port: 端口
    transport: 傳輸
    insecure: 不安全
    trustedCaPath: CA 路徑
    format:
      title: 格式
      type: 類型
      addNewLine: 添加新行
      messageKey: 消息密鑰
    buffer:
      title: 緩衝
      tags: 標籤
      chunkLimitSize: 塊大小限制
      chunkLimitRecords: 塊限制 chunkLimitRecords
      totalLimitSize: 總限制大小
      flushInterval: 刷新時間間隔
      timekey: Timekey
      timekeyWait: Timekey 等待
      timekeyUseUTC: Timekey 使用 UTC
  s3:
    keyId: 密鑰 ID
    secretKey: 密文密鑰
    endpoint: 端點
    bucket: 存儲桶
    path: 路徑
    overwriteExistingPath: 覆蓋現有路徑
  output:
    buffer:
      label: 輸出緩衝
    selectOutputs: 選擇輸出
    selectBanner: 選擇以配置輸出
    sections:
      target: 目標
      access: 訪問
      certificate: 連接
      labels: 標籤
      configuration: 配置
    tips:
      multipleProviders: 此輸出配置了不受支持的提供程序。你可以查看或編輯 YAML。
      singleProvider: 此輸出配置了多個提供程序。目前，我們僅支持爲輸出配置單個提供程序。你可以查看或編輯 YAML。
  outputProviders:
    elasticsearch: Elasticsearch
    splunkHec: Splunk
    kafka: Kafka
    forward: Fluentd
    gelf: GELF
    loki: Loki
    awsElasticsearch: Amazon Elasticsearch
    azurestorage: Azure Storage
    cloudwatch: Cloudwatch
    datadog: Datadog
    file: 文件
    gcs: GCS
    kinesisStream: Kinesis Stream
    logdna: LogDNA
    logz: LogZ
    newrelic: New Relic
    sumologic: SumoLogic
    syslog: Syslog
    s3: S3
    unknown: 未知
  overview:
    poweredBy: Banzai Cloud
    clusterLevel: 集羣級別
    namespaceLevel: 命名空間級別
  provider: 提供商
  splunk:
    host: 主機
    port: 端口
    protocol: 協議
    index: 索引
    token: Token
    insecureSsl: 不安全的 SSL
    indexName: 索引名稱
    source: 源
    caFile: CA 證書文件
    caPath: CA 路徑
    clientCert: 客戶端證書
    clientKey: 客戶端密鑰
  forward:
    host: 主機
    port: 端口
    sharedKey: 共享密鑰
    username: 用戶名
    password: 密碼
    clientCertPath: 客戶端證書路徑
    clientPrivateKeyPath: 客戶端私鑰路徑
    clientPrivateKeyPassphrase: 客戶端私鑰密碼
longhorn:
  overview:
    title: 概述
    subtitle: "由 <a href='https://github.com/longhorn' target='_blank' rel='noopener nofollow noreferrer'>Longhorn</a> 提供支持"
    linkedList:
      longhorn:
        label: 'Longhorn'
        description: '通過 UI 管理存儲系統'
        na: 資源不可用
neuvector:
  overview:
    title: 概述
    subtitle: "技術支持：<a href='https://github.com/neuvector' target='_blank' rel='noopener nofollow noreferrer'>NeuVector</a>"
    linkedList:
      neuvector:
        label: 'NeuVector'
        description: '全生命週期容器安全'
        na: 資源不可用
login:
  howdy: 你好！
  welcome: 歡迎使用 {vendor}
  loggedOut: 你已登出當前賬號。
  loginAgain: 請重新登錄。
  serverError:
    authFailedCreds: "登錄失敗。請檢查憑證，或查看你是否有登錄權限。"
    authFailed: "登錄失敗，你可能沒有登錄權限。"
    unknown: "登錄時發生錯誤，請聯繫你的系統管理員。"
    invalidSamlAttrs: "無效的 SAML 屬性"
    noResponse: "沒有收到響應。"
  error: 登錄時發生錯誤，請重試。
  clientError: 無效的用戶名或密碼，請重試。
  useLocal: 使用本地賬號登錄
  loginWithProvider: 使用 {provider} 登錄
  username: 用戶名
  password: 密碼
  loggingIn: 登錄中...
  loggedIn: 已登錄
  loginWithLocal: 使用本地用戶登錄
  useProvider: 使用 {provider} 用戶
  useNonLocal: 使用非本地用戶
  remember:
    label: 記住用戶名
members:
  clusterMembers: 集羣成員
  createActionLabel: 添加
  clusterPermissions:
    noDescription: 已創建用戶 - 沒有描述
    label: 集羣權限
    description: 控制用戶對集羣的訪問權限
    createProjects: 創建項目
    manageClusterBackups: 管理集羣備份
    manageClusterCatalogs: 管理集羣應用商店
    manageClusterMembers: 管理集羣成員
    manageNavlinks: 管理導航菜單鏈接
    manageNodes: 管理節點
    manageStorage: 管理存儲
    viewAllProjects: 查看所有項目
    viewClusterCatalogs: 查看集羣應用商店
    viewClusterMembers: 查看集羣成員
    viewNodes: 查看節點
    owner:
      label: 所有者
      description: 所有者對集羣和集羣內的所有資源擁有完全的控制權。
    member:
      label: 成員
      description: 成員可以管理集羣內的資源，但不能改變集羣本身。
    custom:
      label: 自定義
      description: 爲該用戶自定義角色。
  localClusterWarning: 注意：這是 Rancher 用來存儲數據的集羣。只有管理員才應該對該集羣有寫權限。能夠寫入此集羣的用戶可以授權自己訪問該安裝的任何內容。
membershipEditor:
  label: 成員
  user: 用戶名
  role: 角色
monitoring:
  accessModes:
    many: 多次讀寫
    once: 一次讀寫
    readOnlyMany: 多次只讀
  aggregateDefaultRoles:
    label: 聚合爲默認 Kubernetes 角色
    tip: '將標籤添加到 Monitoring Chart 部署的 ClusterRoles 上，以<a target="_blank" rel="noopener nofollow noreferrer" href="https://kubernetes.io/docs/reference/access-authn-authz/rbac/#aggregated-clusterroles">聚合到相應的默認 K8s 進行管理、編輯和查看 ClusterRoles</a>。'
  alerting:
    config:
      label: Alertmanager 配置
    enable:
      label: 部署 Alertmanager
    secrets:
      additional:
        info: 密文應掛載到容器路徑 <pre class='inline-block m-0'>/etc/alertmanager/secrets/</pre>
        label: 補充密文
      existing: 選擇現有的配置密文
      info: |
        <span class="text-bold">創建默認配置</span>。在部署這個 Chart 時，將在<pre class='inline-block m-0'>cattle-monitoring-system</pre> 命名空間中創建一個包含 Alertmanager 配置的密文，名稱爲<pre class='inline-block m-0'>alertmanager-rancher-monitoring-alertmanager</pre>。默認情況下，在卸載或升級此 Chart 時，此密文均不會被修改。<br />
        部署這個 Chart 之後，你需要在 UI 中編輯密文，從而添加 Alertmanager 用於發送告警的自定義通知配置。<br /> <br />
        <span class="text-bold">選擇一個現有的配置密文</span>：你必須指定一個存在於<pre class='inline-block m-0'>cattle-monitoring-system</pre>命名空間內的密文。如果命名空間不存在，你將無法選擇現有的密鑰。
      label: Alertmanager 密文
      new: 創建默認配置
      radio:
        label: 配置密文
    templates:
      keyLabel: 文件名稱
      label: 模板文件
      valueLabel: YAML 模板
    title: 配置 Alertmanager
  clusterType:
    label: 集羣類型
    placeholder: 選擇集羣類型
  createDefaultRoles:
    label: 創建默認 Monitoring 集羣角色
    tip: '創建分配給用戶的<code>monitoring-admin</code>，<code>monitoring-edit</code>，和<code>monitoring-view</code> ClusterRoles，爲其使用 Monitoring Chart 安裝的 CRD 提供權限。'
  etcdNodeDirectory:
    label: ETCD 節點證書目錄
    tooltip: '如果集羣的 ETCD 節點使用 RancherOS，請把這個選項設置爲<pre class=''inline-block m-0''>/opt/rke/etc/kubernetes/ssl</pre>。不支持需要指定多個證書目錄的混合環境（例如，由 RancherOS 和 Ubuntu 主機組成的 ETCD Plane）。'
  grafana:
    storage:
      annotations: PVC 註釋
      className: 存儲類名稱
      existingClaim: 使用現有 Claim
      finalizers: PVC Finalizer
      label: Grafana 存儲
      mode: 訪問模式
      selector: 選擇器
      size: 大小
      subpath: 使用子路徑
      type: 持久存儲類型
      types:
        existing: 使用現有 PVC 啓用 Grafana
        statefulset: 使用 StatefulSet 模板啓用 Grafana
        template: 使用 PVC 模板啓用 Grafana
      volumeMode: 卷模式
      volumeName: 卷名稱
    title: 配置 Grafana
  hostNetwork:
    label: 爲 Prometheus Operator 使用主機網絡
    tip: 如果你的託管 Kubernetes 集羣使用自定義 CNI（例如 Calico），此選項必須啓用，以允許託管 Controller Plane 與 Prometheus Operator 暴露的准入 Webhook 通信，以更改或驗證傳入的 PrometheusRule。
  overview:
    alertsList:
      ends:
        label: 停止於
      label: 已啓用的告警
      message:
        label: 消息
      severity:
        label: 嚴重程度
      start:
        label: 開始於
    linkedList:
      alertManager:
        description: 已啓用的告警
        label: Alertmanager
      grafana:
        description: Metrics 儀表板
        label: Grafana
      na: 資源不可用
      prometheusPromQl:
        description: PromQL 圖表
        label: Prometheus 圖表
      prometheusRules:
        description: 配置規則
        label: PrometheusRules
      prometheusTargets:
        description: 配置目標
        label: Prometheus 目標
    subtitle: '由 <a href="https://github.com/coreos/prometheus-operator" target="_blank" rel="noopener noreferrer nofollow">Prometheus</a> 提供支持'
    title: 儀表板
  prometheus:
    config:
      adminApi: Admin API
      evaluation: 評估間隔
      ignoreNamespaceSelectors:
        help: '如果忽略命名空間選擇器，集羣管理員可以限制團隊監視命名空間之外的授權資源。然而，這會影響需要跨命名空間抓取監控數據的應用（例如Istio）的功能。'
        label: 命名空間選擇器
        radio:
          enforced: '使用：監控可以訪問命名空間字段匹配的命名空間中的資源'
          ignored: '忽略：監控只能訪問它們所在命名空間中的資源'
      limits:
        cpu: CPU 限制
        memory: 內存限制
      requests:
        cpu: 請求的 CPU
        memory: 請求的內存
      resourceLimits: 資源限制
      retention: 預留
      retentionSize: 預留大小
      scrape: 抓取間隔
    storage:
      className: 存儲類名稱
      label: Prometheus 的持久存儲
      mode: 訪問模式
      selector: 選擇器
      selectorWarning: '如果你使用動態配置器（例如 Longhorn），不要指定選擇器，因爲帶有非空選擇器的 PVC 不能動態配置 PV。'
      size: 大小
      volumeMode: 卷模式
      volumeName: 卷名稱
    title: 配置 Prometheus
    warningInstalled: |
      警告：當前已部署 Prometheus Operator。目前不支持在一個集羣上部署多個Prometheus Operators。在安裝此 Chart 之前，請從該集羣中移除所有其他的 Prometheus Operator。
      如果你是從啓用了 Monitoring 功能的舊版 {vendor} 遷移過來的，請在安裝此 Chart 之前完全禁用此集羣的 Monitoring 功能。
  receiver:
    fields:
      name: 名稱
    tls:
      label: SSL
      caFilePath:
        label: CA 文件路徑
        placeholder: 例如：./ca-file.csr
      certFilePath:
        label: 證書文件路徑
        placeholder: 例如：./cert-file.crt
      keyFilePath:
        label: 密鑰文件路徑
        placeholder: 例如：./key-file.pfx
      secretsBanner: 部署 Monitoring Chart 時，必須在<<pre class="inline-block m-0 p-0 vertical-middle">alertmanager.alertmanagerSpec.secrets</pre>中引用以下文件路徑。詳情請查看<a href="{docsBase}/monitoring-alerting/" target="_blank" rel="noopener noreferrer nofollow">官方文檔</a>。
    addReceiver: 添加接收器
  route:
    fields:
      groupBy: 分組依據
      groupInterval: 組間隔
      groupWait: 組等待時長
      receiver: 接收器
      repeatInterval: 重複間隔
    label: 路由
  thanos:
    title: 配置 Thanos
    sidecar:
      label: 是否開啟 Thanos Sidecar
    tls:
      label: 是否開啟 TLS
  routesAndReceivers: 路由和接收器（已棄用）
  monitors: 監控
  installSteps:
    uninstallV1:
      stepTitle: 卸載 V1
      stepSubtext: 卸載舊版 Monitoring
      warning1: 已部署 Monitoring V1。你需要先卸載 Monitoring V1 才能安裝 Monitoring V2。
      warning2: <a target="blank" href="{docsBase}/monitoring-alerting/guides/migrating/" target='_blank' rel='noopener nofollow'>瞭解遷移到 Monitoring V2 的步驟</a>。
      promptDescription: <div class="mt-20 mb-20">你正在嘗試卸載 Monitoring V1。請確保你已閱讀遷移步驟。</div>
      success1: Monitoring V1 已成功卸載。
      success2: 點擊下一步繼續
  tabs:
    alerting: 告警
    general: 通用
    grafana: Grafana
    prometheus: Prometheus
    thanos: Thanos
    projectMetrics: 項目指標
  v1Warning: '當前 Monitoring 由 Cluster Manager 部署。如果你需要從啓用了 Monitoring 的舊版 {vendor} 遷移，請先在 Cluster Manager 中禁用 Monitoring，然後再在 Cluster Explorer 中安裝新版 {vendor} Monitoring Chart。'
  volume:
    modes:
      block: 塊
      file: 文件系統
  alertmanagerConfig:
    auth:
      basicAuthPassword: 具有基本認證密碼的密文
      basicAuthUsername: 具有基本認證用戶名的密文
      bearerTokenSecret: 持有者令牌密文
    deprecationWarning: 路由和接收器資源已棄用。路由和接收器不能在此頁面上作爲單獨的 Kubernetes 資源進行管理。它們應配置爲 AlertmanagerConfig 資源中的 YAML 字段。
    description: 如果要配置用於項目告警和集羣告警的路由和接收器，你可以在 AlertmanagerConfig 資源中進行配置。
    disabledReceiverButton: 創建 AlertmanagerConfig 後就可以使用接收器
    email:
      password: 具有 Auth 密碼的密文
      username: 認證用戶名
    empty: 還沒有爲任何可訪問的命名空間配置告警。
    getStarted: 單擊“創建”開始配置告警。
    opsgenie:
      apiKey: 具有 API Key 的密文
    pagerDuty:
      routingKey: 具有路由密鑰的密文
      serviceKey: 具有 Service Key 的密文
    receiverFormNames:
      create: 在 AlertmanagerConfig 中創建接收器
      detail: AlertmanagerConfig 中的接收器
      edit: 在 AlertmanagerConfig 中編輯接收器
      editYaml: 編輯 AlertmanagerConfig
    receiverTooltip: 此路由會將告警發送到選定的接收器，該接收器必須在同一個 AlertmanagerConfig 中定義。
    routeInfo: 此表單支持配置一個將流量定向到接收器的路由。通過在 YAML 中配置子路由，你可以將告警定向到更多接收器。
    slack:
      apiUrl: 具有 Slack Webhook URL 的密文
    webhook:
      url: URL
      urlSecret: URL 密文
      urlSecretTooltip: urlSecret 優先於 url。你需要定義 urlSecret 或 url。
  projectMonitoring:
    detail:
      error: '無法獲取具有狀態的儀表板值： '
    list:
      banner: 項目監控配置存儲在 ProjectHelmChart 資源中
      empty:
        canCreate: 單擊“創建”爲項目添加監控
        cannotCreate: 聯繫管理員添加項目監控
        message: 還沒有爲任何項目配置監控
  projectMonitors: 項目監控
monitoringReceiver:
  addButton: 添加 {type}
  custom:
    label: 自定義
    title: 自定義配置
    info: 此處提供的 YAML 將直接附加到 Alertmanager 配置密文的接收器中。
  email:
    label: 電子郵件
    title: 電子郵件配置
  opsgenie:
    label: Opsgenie
    title: Opsgenie 配置
  pagerduty:
    label: PagerDuty
    title: PagerDuty 配置
    info: "你可以點擊<a href='https://www.pagerduty.com/docs/guides/prometheus-integration-guide/' target='_blank' rel='noopener nofollow' class='flex-right'>這裏</a>瞭解更多關於爲 PagerDuty 創建集成密鑰的信息。"
  slack:
    label: Slack
    title: Slack 配置
    info: "你可以點擊<a href='https://rancher.slack.com/apps/A0F7XDUAZ-incoming-webhooks' target='_blank' rel='noopener noreferrer nofollow'>這裏</a> 瞭解更多爲 Slack 創建傳入 Webhook 的信息。"
  webhook:
    label: Webhook
    title: Webhook 配置
    urlTooltip: 對於一些 Webhook 而言，這是一個指向 DNS 服務的 URL
    modifyNamespace: 如果 <pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre> 的默認值改變了，請以 http://&lt;new_service_name&gt;.&lt;new_namespace&gt.svc.&lt;port&gt/&lt;path&gt 格式更新以下 URL。
    banner: 要使用 Microsoft Teams 或短信，請先安裝至少一個 <pre class="inline-block m-0 p-0 vertical-middle">rancher-alerting-drivers</pre> 實例。
    add:
      generic: 通用
      msTeams: Microsoft Teams
      alibabaCloudSms: 阿里巴巴短信
      selectWebhookType: 選擇 Webhook 類型
  auth:
    label: 認證
    authType: 認證類型
    username: 用戶名
    password: 密碼
    none:
      label: 無
    bearerToken:
      label: 持有者令牌
      placeholder: 例如：secret-token
    basicAuth:
      label: 基本認證
    bearerTokenFile:
      label: 持有者令牌文件
      placeholder: 例如：./user_token
  shared:
    proxyUrl:
      label: 代理 URL
      placeholder: 例如：http://my-proxy/
    sendResolved:
      label: 發送已解決告警
  pandariaWebhook:
    add:
      aliyunSMS: 阿里雲短信
      dingTalk: 釘釘
      msTeams: MS Teams
      serviceNow: Service Now
    aliyunSMS:
      accessKeyIdLabel: 訪問祕鑰
      accessKeyIdPlaceholder: 阿里雲訪問祕鑰
      accessKeySecretLabel: 訪問祕鑰令牌
      accessKeySecretPlaceholder: 阿里雲訪問祕鑰所對應的令牌
      phoenNumberButton: 添加手機號
      phoneNumberLabel: 手機號
      phoneNumberPlaceholder: 你要添加的手機號碼
      signatureNameLabel: 簽名名稱
      signatureNamePlaceholder: 簽名管理中配置的簽名名稱
      templateCodeLabel: 模版 CODE
      templateCodePlaceholder: 模版管理中配置的模版對應的 CODE
    banner: 要使用Ding Talk、阿里雲短信或MS Teams，你需要先安裝<pre class="inline-block m-0 p-0 vertical-middle">pandaria-alerting-drivers</pre>。
    dingTalk:
      secretLabel: 密鑰
      secretPlaceholder: 僅在選擇“加簽”時需要填寫
    label: Pandaria Webhook
  tls:
    ca: 具有 CA 的密文
    cert: 具有客戶證書的密文
    key: 帶有客戶端密鑰的密文
    serverName: 服務器名稱
    serverNameTooltip: 用於驗證目標的主機名。
monitoringRoute:
  groups:
    label: 分組依據
    addGroupByLabel: 告警分組標籤
    groupByTooltip: 將每個標籤添加爲 key:value 格式的字符串。特殊標籤 ... 會使用所有可能的標籤聚合。如果指定了，則 ... 必須是列表中的唯一元素。
  info: 這是 Alertmanager 使用的最頂層路由，如果告警不匹配路由，則使用這個路由作爲默認目的位置。此路由必須存在，不能刪除。
  interval:
    label: 組間隔
  matching:
    info: 根路由必須匹配所有內容，因此無法配置匹配。
    label: 匹配
    addMatcher: 添加匹配器
    matchType: 匹配類型
    name: 名稱
    nameTooltip: 要匹配的標籤
    value: 值
    valueTooltip: 要匹配的標籤值
  receiver:
    label: 接收器
    add: 添加接收器
    addMatch: 添加匹配
    oneOrMoreLabel: 一個或多個接收器
    type: 接收器類型
  regex:
    label: 匹配正則表達式
  repeatInterval:
    label: 重複間隔
  wait:
    label: 組等待時長
moveModal:
  title: 移動到新的項目?
  description: '你正在移動下列命名空間：'
  moveButtonLabel: 移動
  targetProject: 目標項目
nameNsDescription:
  name:
    label: 名稱
    placeholder: '獨特的名稱'
  namespace:
    label: 命名空間
    placeholder: ''
  workspace:
    label: 工作空間
    placeholder:
  description:
    label: 描述
    placeholder: 輸入可以描述該資源的文本
namespace:
  containerResourceLimit: 容器資源限制
  resourceQuotas: 資源配額
  project:
    label: 項目
  resources: 資源
  enableAutoInjection: 啓用 Istio 自動注入
  disableAutoInjection: 禁用 Istio 自動注入
  move: 移動
  total: 總計
  workloads: 工作負載
  resourceStates:
    success: '活動'
    info: '轉換中'
    warning: '警告'
    error: '錯誤'
    unknown: '未知'
    paused:
      stateName: '非活動'
      shortDescription: Deployment 已暫停
      longDescription: Deployment 已暫停。如果 Deployment 暫停了，Controller 無法部署修改。
  createNamespace: 創建新的命名空間
  label: 命名空間
  selectNamespace: 選擇命名空間
  selectOrCreate: 選擇或創建命名空間
namespaceFilter:
  noMatchingOptions: 沒有匹配的選項
  more: "+{more}"
  selected:
    label: |-
      {total, plural,
      one {已選擇 1 項}
      other {已選擇 {total} 項}
      }
namespaceList:
  selectLabel: 命名空間
  addLabel: 添加命名空間
navLink:
  name:
    label: 名稱
    placeholder: '例如：foo-bar'
  label:
    label: 顯示名稱
    placeholder: '鏈接顯示的文本'
  tabs:
    link:
      label: 鏈接類型
      type:
        label: 鏈接類型
        service: 鏈接到服務
        url: 鏈接到 URL
      toURL:
        label: 目標 URL
        placeholder: '例如：https://rancher.com'
      toService:
        service:
          label: 服務（命名空間/名稱）
          placeholder: '例如：cattle-system/rancher-webhook'
        path:
          label: 路徑
          placeholder: '例如：proxy/?orgId=1'
        port:
          label: 端口
          placeholder: '例如：80'
        scheme:
          label: 協議
          placeholder: '例如：http'
    target:
      label: 窗口目標
      option:
        blank: 新窗口
        named: 自定義命名窗口
        iframe: 使用 iframe
        self: 替換窗口
      namedValue:
        label: 窗口名稱
    group:
      label: 組
      group:
        label: 組名稱
        tooltip: 將鏈接分配給組
        placeholder: 請輸入組名稱
      sideLabel:
        label: 鏈接標籤
      description:
        label: 鏈接描述
      iconSrc:
        label: 添加圖片
networkpolicy:
  egress:
    label: Egress 規則
    enable: 配置 Egress 規則以限制傳出流量
    ruleLabel: 目標
    ruleHint: 只允許將流量傳出到配置的目標
    portHint: 傳出流量只允許連接到配置的端口
  ingress:
    label: Ingress 規則
    enable: 配置 Ingress 規則以限制傳入流量
    ruleLabel: 來源
    ruleHint: 僅允許來自配置的來源的傳入流量
    portHint: 傳入流量只允許連接到配置的端口
  labelsAnnotations:
    label: 標籤 & 註釋
  rules:
    ruleLabel: 規則 {index}
    addPort: 添加允許的端口
    type: 規則類型
    ingress:
      add: 添加允許的流量源
    egress:
      add: 添加允許的流量目標
    ports:
      label: 允許的端口
      port:
        label: 端口
        placeholder: 例如：8080
      protocol: 協議
    ipBlock:
      label: IP 鎖定
      exceptions: 例外
      cidr:
        label: CIDR
        placeholder: 例如：1.1.1.0/24
      addExcept: 添加例外
      invalidCidr: "無效的 CIDR"
      invalidExceptionCidrs: "無效的例外： "
    podSelector:
      label: Pod 選擇器
    namespaceSelector:
      label: 命名空間選擇器
  config:
    label: 配置
  selectors:
    label: 選擇器
    hint: NetworkPolicy 應用於選定的 Pod
    matchingPods:
      matchesSome: |-
        {matched, plural,
          =0 {匹配 {total, number} 個 Pod 中的 0 個}
          =1 {匹配 {total, number} 個 Pod 中的 1 個："{sample}"}
          other {匹配 {total, number} 個 Pod 中的 {matched, number} 個，包括 "{sample}"}
        }
    matchingNamespaces:
      matchesSome: |-
        {matched, plural,
          =0 {匹配 {total, number} 個命名空間中的 0 個}
          =1 {匹配 {total, number} 個 命名空間中的 1 個："{sample}"}
          other {匹配 {total, number} 個命名空間中的 {matched, number} 個，包括 "{sample}"}
        }
node:
  list:
    pool: 池
    noNodes: 這個池是空的
    nodeTaint: 污點
    scaleDown: 縮容池
    scaleUp: 擴容池
    poolDescription:
      noSize: 沒有大小
      noLocation: 沒有位置
  detail:
    detailTop:
      containerRuntime: 容器運行時
      internalIP: 內網 IP
      externalIP: 外網 IP
      os: 操作系統
      version: 版本
    glance:
      consumptionGauge:
        used: 已使用
        amount: "已使用 {total} {unit} 中的 {used}"
        cpu: CPU
        memory: 內存
        pods: Pod
      diskPressure: 磁盤壓力
      kubelet: Kubelet
      memoryPressure: 內存壓力
      pidPressure: PID 壓力
    tab:
      conditions: 條件
      images: 鏡像
      metrics: 指標
      info:
        label: 信息
        key:
          architecture: 架構
          bootID: Boot ID
          containerRuntimeVersion: 容器運行時版本
          kernelVersion: 內核版本
          kubeProxyVersion: kube-proxy 版本
          kubeletVersion: Kubelet 版本
          machineID: 主機 ID
          operatingSystem: 操作系統
          osImage: 鏡像
          systemUUID: 系統 UUID
      pods: Pod
      taints: 污點
  actions:
    downloadSSHKey: 下載 SSH 密鑰
    downloadNodeConfig: 下載密鑰
    scaleDown: 縮容
    forceDelete: 強制刪除
    editGpuDevicePluginConfig: 修改 NVIDIA GPU 配置
persistentVolume:
  pluginConfiguration:
    label: 插件配置
  plugin:
    label: 卷插件
  capacity:
    label: 容量
  customize:
    label: 自定義
    affinity:
      label: 節點選擇器
      addLabel: 添加節點選擇器
    assignToStorageClass:
      label: 分配給存儲類
    mountOptions:
      label: 掛載選項
      addLabel: 添加選項
    accessModes:
      label: 訪問模式
      readWriteOnce: 單節點讀寫
      readOnlyMany: 多節點只讀
      readWriteMany: 多節點讀寫
  shared:
    partition:
      label: 分區
      placeholder: 例如：1; 0 代表整個設備
    readOnly:
      label: 只讀
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    secretName:
      label: 密文名稱
      placeholder: 例如：secret
    secretNamespace:
      label: 密文所在的命名空間
      placeholder: 例如：default
    monitors:
      add: 添加監控
  vsphereVolume:
    label: VMWare vSphere 卷
    volumePath:
      label: 卷路徑
      placeholder: 例如：/
    storagePolicyName:
      label: 存儲策略名稱
      placeholder: 例如：sp
    storagePolicyId:
      label: 存儲策略 ID
      placeholder: 例如：sp1
  csi:
    label: CSI（不支持）
    driver:
      label: 驅動
      placeholder: 例如：driver.longhorn.io
    volumeHandle:
      label: 卷句柄
      placeholder: 例如：pvc-xxxx
    volumeAttributes:
      add: 添加捲屬性
    nodePublishSecretName:
      label: 節點發布密文名稱
      placeholder: 例如：secret
    nodePublishSecretNamespace:
      label: 節點發布密文命名空間
      placeholder: 例如：default
    nodeStageSecretName:
      label: 節點暫存密文名稱
      placeholder: 例如：secret
    nodeStageSecretNamespace:
      label: 節點暫存密文命名空間
      placeholder: 例如：default
    controllerExpandSecretName:
      label: Controller 展開密文名稱
      placeholder: 例如：secret
    controllerExpandSecretNamespace:
      label: Controller 展開密文命名空間
      placeholder: 例如：default
    controllerPublishSecretName:
      label: Controller 發佈密文名稱
      placeholder: 例如：secret
    controllerPublishSecretNamespace:
      label: Controller 發佈密文命名空間
      placeholder: 例如：default
  cephfs:
    label: Ceph 文件系統（不支持）
    path:
      label: 路徑
      placeholder: 例如：/var
    user:
      label: 用戶名
      placeholder: 例如：root
    secretFile:
      label: 密文文件
      placeholder: 例如：secret
  rbd:
    label: Ceph RBD（不支持）
    user:
      label: 用戶名
      placeholder: 例如：root
    keyRing:
      label: 密鑰環
      placeholder: 例如：/etc/ceph/keyring
    pool:
      label: 池
      placeholder: 例如：rbd
    image:
      label: 鏡像
      placeholder: 例如：image
  fc:
    label: 光纖通道（不支持）
    targetWWNS:
      add: 添加目標 WWN
    wwids:
      add: 添加 WWID
    lun:
      label: Lun
      placeholder: 例如：2
  flexVolume:
    label: FlexVolume（不支持）
    driver:
      label: 驅動
      placeholder: 例如：driver
    options:
      add: 添加選項
  flocker:
    label: Flocker（不支持）
    datasetName:
      label: 數據集名稱
      placeholder: 例如：dataset
    datasetUUID:
      label: 數據集 UUID
      placeholder: 例如：uuid
  glusterfs:
    label: Gluster 卷（不支持）
    endpoints:
      label: 端點
      placeholder: 例如：glusterfs-cluster
    path:
      label: 路徑
      placeholder: 例如：kube-vol
  iscsi:
    label: iSCSI 目標（不支持）
    initiatorName:
      label: 發起者名稱
      placeholder: iqn.1994-05.com.redhat:1df7a24fcb92
    iscsiInterface:
      label: iSCSI 接口
      placeholder: 例如：interface
    chapAuthDiscovery:
      label: CHAP 認證發現
    chapAuthSession:
      label: CHAP 認證會話
    iqn:
      label: IQN
      placeholder: iqn.2001-04.com.example:storage.kube.sys1.xyz
    lun:
      label: Lun
      placeholder: 例如：2
    targetPortal:
      label: 目標 Portal
      placeholder: 例如：portal
    portals:
      add: 添加 Portal
  cinder:
    label: Openstack Cinder 卷（不支持）
    volumeId:
      label: 卷 ID
      placeholder: 例如：vol
  quobyte:
    label: Quobyte 卷（不支持）
    volume:
      label: 卷
      placeholder: 例如：vol
    user:
      label: 用戶名
      placeholder: 例如：root
    group:
      label: 組
      placeholder: 例如：abc
    registry:
      label: 鏡像倉庫
      placeholder: 例如：abc
  photonPersistentDisk:
    label: Photon 卷（不支持）
    pdId:
      label: PD ID
      placeholder: 例如：abc
  portworxVolume:
    label: Portworx 卷（不支持）
    volumeId:
      label: 卷 ID
      placeholder: 例如：abc
  scaleIO:
    label: ScaleIO 卷（不支持）
    volumeName:
      label: 卷名稱
      placeholder: 例如：vol-0
    gateway:
      label: 網關
      placeholder: 例如：https://localhost:443/api
    protectionDomain:
      label: 保護域
      placeholder: 例如：pd01
    storageMode:
      label: 存儲模式
      placeholder: 例如：ThinProvisioned
    storagePool:
      label: 存儲池
      placeholder: 例如：sp01
    system:
      label: 系統
      placeholder: 例如：scaleio
    sslEnabled:
      label: 啓用 SSL
  storageos:
    label: StorageOS（不支持）
    volumeName:
      label: 卷名稱
      placeholder: 例如：vol
    volumeNamespace:
      label: 卷命名空間
      placeholder: 例如：default
  nfs:
    label: NFS 共享
    path:
      label: 路徑
      placeholder: 例如：/var
    server:
      label: Server IP 地址
      placeholder: 例如：10.244.1.4
  longhorn:
    label: Longhorn
    volumeHandle:
      label: 卷句柄
      placeholder: 例如：pvc-xxxx
    options:
      label: 選項
      addLabel: 添加
  local:
    label: 本地
    path:
      label: 路徑
      placeholder: 例如：/mnt/disks/ssd1
  hostPath:
    label: 主機路徑
    pathOnTheNode:
      label: 節點上的路徑
      placeholder: /mnt/disks/ssd1
    mustBe:
      label: 節點上的路徑必須是：
      anything: '任意路徑：不需要檢查目標路徑'
      directory: 一個目錄，如果該目錄不存在，則自動創建一個目錄
      file: 一個文件，如果該文件不存在，則自動創建一個文件
      existingDirectory: 一個現有的目錄
      existingFile: 一個現有的文件
      existingSocket: 一個現有的 socket
      existingCharacter: 一個現有的字符設備
      existingBlock: 一個現有的塊設備
  gcePersistentDisk:
    label: Google 持久磁盤
    persistentDiskName:
      label: 持久磁盤名稱
      placeholder: 例如：abc
  awsElasticBlockStore:
    label: Amazon EBS 磁盤
    volumeId:
      label: 卷 ID
      placeholder: 例如：volume1
  azureFile:
    label: Azure 文件系統
    shareName:
      label: 共享名稱
      placeholder: 例如：abc
  azureDisk:
    label: Azure 磁盤
    diskName:
      label: 磁盤名稱
      placeholder: 例如：kubernetes-pvc
    diskURI:
      label: 磁盤 URI
      placeholder: 例如：https://example.com/disk
    kind:
      label: 類型
      dedicated: 專用
      managed: 託管
      shared: 共享
    cachingMode:
      label: 緩存模式
      none: 無
      readOnly: 只讀
      readWrite: 讀寫
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    readOnly:
      label: 只讀
persistentVolumeClaim:
  name: 持久卷聲明名稱
  accessModes: 訪問模式
  accessModesOptions:
    singleNodeRW: 單節點 讀/寫
    manyNodeR: 多節點 只讀
    manyNodeRW: 多節點 讀/寫
  capacity: 容量
  storageClass: 存儲類
  useDefault: 使用默認類
  volumes: 持久卷
  volumeName: 持久卷名稱
  source:
    label: 源
    options:
      new: 使用存儲類來配置新的持久卷
      existing: 使用現有的持久卷
  volumeClaim:
    label: 卷聲明
    storageClass: 存儲類
    requestStorage: 需要的存儲大小
    persistentVolume: 持久卷
    tooltips:
      noPersistentVolume: 沒有列出持久卷的權限，請手動輸入名稱。
      noStorageClass: 沒有列出存儲類的權限，請手動輸入名稱。
  customize:
    label: 自定義
    accessModes:
      readWriteOnce: 單節點讀寫
      readOnlyMany: 多節點只讀
      readWriteMany: 多節點讀寫
  status:
    label: 狀態
  expand:
    label: 展開
    notBound: 只能擴展綁定的 PVC
    notSupported: 存儲類不支持卷擴展
prefs:
  title: 偏好設置
  theme:
    label: 主題
    light: 淺色
    auto: 自動
    dark: 深色
    autoDetail: 自動模式使用系統設置，或在{pm}點到次日{am}點間自動切換到深色模式。
  landing:
    label: 登錄頁面
    vue: 集羣瀏覽器
    ember: Cluster Manager
  formatting: 格式
  clusterToShow:
    label: 在側邊欄顯示的集羣數量
    value: |-
      {count, number}
  dateFormat:
    label: 日期格式
  timeFormat:
    label: 時間格式
  perPage:
    label: 每頁行數
    value: |-
      {count, number}
  keymap:
    label: YAML 編輯器
    sublime: '默認'
    emacs: 'Emacs'
    vim: 'Vim'
  advanced: 高級選項
  dev:
    label: 啓用開發工具
  hideDesc:
    label: 隱藏所有類型說明框
  helm:
    'true': 包括預發佈版本
    'false': 只顯示正式版本
    label: Helm Chart
  advancedTooltip: 啓用“在 API 中查看”選項並使用鍵盤快捷鍵來切換淺色或深色主題 (shift+t)。此設置還顯示了由 Rancher 管理的命名空間，不要手動編輯或刪除這些命名空間。
  displaySettings:
    detail: 更改在 UI 中顯示信息的方式。
    title: 顯示設置
  language: 語言
principal:
  loading: 正在加載&hellip;
  error: 無法獲取信息
  name: 名稱
  loginName: 用戶名
  type: 類型
probe:
  checkInterval:
    label: 檢查間隔
    placeholder: '默認值是10秒'
  command:
    label: 運行命令
    placeholder: 例如：cat /tmp/health
  failureThreshold:
    label: 失敗閾值
    placeholder: '默認值：3'
  httpGet:
    headers:
      label: 請求頭
    path:
      label: 請求路徑
      placeholder: 例如：/healthz
    port:
      label: 檢查端口
      placeholder: 例如：80
      placeholderDeux: 例如：25
  initialDelay:
    label: 初始延遲
    placeholder: '默認值：0'
  successThreshold:
    label: 成功閾值
    placeholder: '默認值：1'
  timeout:
    label: 超時
    placeholder: '默認值：3'
  type:
    label: 類型
    placeholder: 選擇檢查類型
project:
  members:
    label: 成員
  containerDefaultResourceLimit: 容器默認資源限制
  vmDefaultResourceLimit: 虛擬機默認資源限制
  resourceQuotas: 資源配額
  haveOneOwner: 至少有一名成員需要具有所有者角色。
  psp:
    default: 集羣默認
    label: Pod 安全策略
    current: "{value} (Current)"
  membersEditOnly: 只能應用等於或低於當前用戶的權限
projectMembers:
  project:
    label: 項目
  projectPermissions:
    label: 項目權限
    description: 控制用戶對項目的訪問權限
    noDescription: 已創建用戶 - 沒有描述
    searchForMember: 搜索需要向其提供項目訪問權限的成員
    owner:
      label: 所有者
      description: 所有者對項目和項目內的所有資源擁有完全的控制權限。
    member:
      label: 成員
      description: 成員可以管理項目內的資源，但不能改變項目本身。
    readOnly:
      label: 只讀
      description: 成員只能查看項目內的資源，但不能改變資源。
    custom:
      label: 自定義
      description: 爲該用戶自定義角色。
    createNs: 創建命名空間
    configmapsManage: 管理 ConfigMaps
    ingressManage: 管理 Ingress
    projectcatalogsManage: 管理項目應用商店
    projectroletemplatebindingsManage: 管理項目成員
    secretsManage: 管理密文
    serviceaccountsManage: 管理服務賬號
    servicesManage: 管理服務
    persistentvolumeclaimsManage: 管理卷
    workloadsManage: 管理工作負載
    configmapsView: 查看 ConfigMaps
    ingressView: 查看 Ingress
    monitoringUiView: 查看 Monitoring
    projectcatalogsView: 查看項目應用商店
    projectroletemplatebindingsView: 查看項目成員
    secretsView: 查看密文
    serviceaccountsView: 查看服務賬號
    servicesView: 查看服務
    persistentvolumeclaimsView: 查看卷
    workloadsView: 查看工作負載
projectNamespaces:
  createNamespace: 創建命名空間
  createProject: 創建項目
  label: 項目/命名空間
  noNamespaces: 沒有定義的命名空間。
  noProjectNoNamespaces: 所有命名空間都在一個項目中
prometheusRule:
  alertingRules:
    addLabel: 添加告警
    annotations:
      description:
        input: 描述註釋值
        label: 描述
      label: 註釋
      message:
        input: 消息註釋值
        label: 消息
      runbook:
        input: Runbook URL 註釋值
        label: Runbook URL
      summary:
        input: 概述註釋值
        label: 概述
    bannerText: '觸發告警時，註釋和標籤將被傳遞給配置的 Alertmanager，從而允許它們構造通知信息併發送給接收器。'
    for:
      label: 告警觸發等待時間
      placeholder: '60'
    label: 告警規則
    labels:
      label: 標籤
      severity:
        choices:
          critical: 嚴重
          label: 嚴重標籤值
          none: 無
          warning: 警告
        label: 嚴重程度
    name: 告警名稱
    removeAlert: 移除告警
  groups:
    add: 添加規則組
    groupRowLabel: 規則組 {index}
    groupInterval:
      label: 覆蓋組間隔
      placeholder: '60'
    label: 規則組
    name: 組名稱
    none: 請添加至少一個規則組，其中至少包含一個告警或記錄規則。
    removeGroup: 移除組
    responseStrategy:
      label: 部分響應策略
  promQL:
    label: PromQL 表達式
  recordingRules:
    addLabel: 添加記錄
    label: 記錄規則
    labels: 標籤
    name: 時間序列名稱
    removeRecord: 移除記錄
promptForceRemove:
  modalTitle: 是否確認？
  removeWarning: "刪除底層基礎設施時出現問題。如果你繼續執行此操作，主機<b>{nameToMatch}</b>將從 Rancher 中刪除。強烈建議手動刪除所有引用的基礎設施。"
  forceDelete: 強制刪除
  confirmName: "在下面輸入池名稱以確認："
  namespaceWarning: 強制刪除將會直接修改 finalizers，有可能導致錯誤。
  podRemoveWarning: 強制刪除不會等待到 Pod 的進程已確認終止。這可能會導致<strong>數據損壞或不一致</strong>。
promptScaleMachineDown:
  attemptingToRemove: "你正在嘗試刪除 {count} {type}"
  retainedMachine1: Control Plane 和 Etcd 角色要求至少一臺主機。
  retainedMachine2: <b>{ name }</b> 會保留
promptRemove:
  title: 是否確認？
  andOthers: |-
    {count, plural,
    =0 {.}
    =1 { 還有另<b>一個</b>。}
    other { 還有另外<b>{count}個</b>。}
    }
  attemptingToRemove: "你正在試圖刪除 {type}"
  protip: "提示：按住 {alternateLabel} 鍵的同時單擊刪除，以繞過此確認。"
  confirmName: "在下方輸入 <b>{nameToMatch}</b> 以確認："
  confirmRelatedResource: 刪除 {type} 將刪除這個 {type} 上的所有資源，此過程不可逆。你確定要繼續刪除 {names} 嗎？
  deleteAssociatedNamespaces: 同時刪除此項目中的命名空間：
  willDeleteAssociatedNamespaces: 項目中的所有命名空間也都會被刪除：
promptRemoveApp:
  removeCrd: "刪除與此應用關聯的 CRD"
promptRestore:
  title: 還原快照
  name: 名稱
  date: 日期
  fromS3: 從 S3 恢復
  label: 快照
  placeholder: 選擇要恢復的快照
  notification:
    title: 還原快照
    message: 快照 { selectedSnapshot } 恢復已開始...
promptRollback:
  modalTitle: 回滾 {workloadName}
  dropdownTitle: 回滾到修訂版
  placeholder: 選擇一個修訂版
  attemptingToRollBack: 正在嘗試回滾工作負載...
  differences: 差異
  revisionOption: "版本 {revisionNumber} 創建於 {revisionAge} {units} 前 {currentLabel}"
  currentLabel: "（當前）"
  multipleWorkloadError: "一次只能回滾一個工作負載。"
  singleRevisionBanner: 沒有可用於回滾的修訂版本。
promptSaveAsRKETemplate:
  title: 將 {cluster} 轉換爲新的 RKE 模板
  name: 集羣模板名稱
  description: 創建新的集羣模板，並使用當前集羣配置發起修改。
  warning: 此操作將對集羣進行修改，即把新創建的集羣模板和修改應用到集羣中。此操作不能撤銷。
promptRotateEncryptionKey:
  title: 輪換加密密鑰
  description: 上次備份 {name} 的備份時間爲 {date}
  warning: 在繼續操作前，請確保已成功完成集羣的 ETCD 備份。
  error: 未找到備份
rancherAlertingDrivers:
  msTeams: 啓用 Microsoft Teams 通知
  sms: 啓用短信通知
  selectOne: 你需要從以下選項中選擇至少一個。
rbac:
  roleBinding:
    noData: 沒有與此資源關聯的成員。
    user:
      label: 用戶名
    role:
      label: 角色
    add: 添加成員
  displayRole:
    fleetworkspace-admin: 管理員
    fleetworkspace-member: 成員
    fleetworkspace-readonly: 只讀用戶
  members:
    label: 成員
  roletemplate:
    label: 角色
    newUserDefault:
      no: 否
      tooltip: 不影響已有角色的綁定。
    locked:
      label: 鎖定
      yes: '是：不允許新綁定使用這個角色'
      no: 否
    tabs:
      grantResources:
        label: 授權資源
        noApiGroupClusterScope: 核心 K8s API，集羣內
        noApiGroupNamespaceScope: 核心 K8s API，命名空間內
        deprecatedLabel: （已棄用）
        resourceOptionInfo: 並不是每個 Rancher 管理的 Kubernetes 集羣中可用資源都列在了資源選項中。高級用例可能要求手動輸入資源和 API 組。
        tableHeaders:
          verbs: 操作
          resources: 資源
          nonResourceUrls: 非資源 URL
          apiGroups: API 組
    subtypes:
      GLOBAL:
        createButton: 創建全局角色
        label: 全局
        yes: "是：新用戶的默認角色"
        defaultLabel: 新用戶的默認角色
      CLUSTER:
        createButton: 創建集羣角色
        label: 集羣
        yes: "是：創建新集羣的默認角色"
        defaultLabel: 集羣創建者的默認角色
      NAMESPACE:
        createButton: 創建項目或命名空間的角色
        label: 項目或命名空間
        yes: "是：創建新項目的默認角色"
        defaultLabel: 項目創建者的默認角色
      RBAC_ROLE:
        label: 角色
      RBAC_CLUSTER_ROLE:
        label: 集羣角色
      noContext:
        label: 沒有內容
  globalRoles:
    types:
      global:
        label: 全局權限
        description: |-
          控制 {isUser, select,
          true {用戶}
          false {組}} 管理整個 {appName} 安裝的權限。
      custom:
        label: 自定義
        description: '不是 {vendor} 創建的角色。'
      builtin:
        label: 內置角色
        description: 用於實現更精細的權限模型的補充角色
    unknownRole:
      description: 無描述
    assignOnlyRole: 已分配該角色
    role:
      admin:
        label: 管理員
        description: 管理員可以完全控制整個安裝以及所有集羣中的所有資源。
      restricted-admin:
        label: 受限管理員
        description: 受限管理員可以完全控制所有下游集羣的所有資源，但不能訪問本地集羣。
      user:
        label: 普通用戶
        description: 普通用戶可以創建集羣，並管理其授權訪問的集羣和項目。
      user-base:
        label: User-Base 用戶
        description: User-Base 用戶只擁有登錄權限。
      clusters-create:
        label: 創建集羣
        description: 允許用戶創建集羣，併成爲該集羣的所有者（owner）。普通用戶默認擁有此權限。
      clustertemplates-create:
        label: 創建 RKE 集羣模板
        description: 允許用戶創建 RKE 集羣模板，併成爲該模板的所有者（owner）。
      authn-manage:
        label: 配置身份驗證
        description: 允許用戶啓用、編輯或禁用所有驗證提供程序配置。
      catalogs-manage:
        label: 舊版配置應用
        description: 允許用戶基於應用商店資源添加、編輯和刪除management.cattle.io
      clusters-manage:
        label: 管理所有集羣
        description: 允許用戶管理所有集羣，包括他們不是成員的集羣。
      clusterscans-manage:
        label: 管理 CIS 集羣掃描
        description: 允許用戶運行新建的 CIS 集羣掃描，並管理 CIS 集羣掃描。
      kontainerdrivers-manage:
        label: 創建集羣驅動
        description: 允許用戶創建集羣驅動，併成爲該集羣驅動的所有者（owner）。
      features-manage:
        label: 配置功能開關
        description: 允許用戶通過功能開關設置，來啓用和禁用自定義功能。
      nodedrivers-manage:
        label: 配置主機驅動
        description: 允許用戶啓用、配置和移除所有主機驅動設置。
      nodetemplates-manage:
        label: 管理節點模板
        description: 允許用戶定義、編輯和移除節點模板。
      podsecuritypolicytemplates-manage:
        label: 管理 Pod 安全策略（PSP）
        description: 允許用戶定義、編輯和移除 Pod 安全策略。
      roles-manage:
        label: 管理角色
        description: 允許用戶定義、編輯和移除角色定義。
      settings-manage:
        label: 管理配置
        description: '允許用戶管理 {vendor} 配置。'
      users-manage:
        label: 管理用戶
        description: 允許用戶爲所有用戶創建、移除和設置密碼。
      catalogs-use:
        label: 使用應用商店
        description: 允許用戶查看和部署應用商店中的模板。普通用戶默認擁有此權限。
      nodetemplates-use:
        label: 使用節點模板
        description: 允許用戶使用任何現有的節點模板來部署新節點。
      view-rancher-metrics:
        label: '查看 {vendor} 指標'
        description: 允許用戶通過 API 查看指標。
      base:
        label: 登錄訪問
      clustertemplaterevisions-create:
        label: 創建 RKE 模板修訂版
      read-only-pandaria:
        description: 只讀管理員可以訪問所有下游集羣中的所有資源，但不能訪問local集羣
        label: 只讀管理員
    notBound: '沒有綁定的用戶 <i class="icon icon-checkmark" style="margin-left: 5px"></i>'
    unableToCheck: 無法檢查是否存在綁定了該角色的用戶，請重試。
    usersBound: |-
      {count, plural,
        =1 { 注意：有 1 個用戶綁定了即將被刪除的角色，是否繼續操作？}
        other { 注意：有 {count} 個用戶綁定了即將被刪除的角色，是否繼續操作？}
      }
    waiting: |-
      {count, plural,
        =1 { 檢查是否存在綁定了該角色的用戶 <i class="icon-spin icon icon-spinner" style="margin-left: 5px"></i> }
        other { 檢查是否存在綁定了這些角色的用戶 <i class="icon-spin icon icon-spinner" style="margin-left: 5px"></i> }
      }
resourceDetail:
  detailTop:
    annotations: 註釋
    created: 創建時間
    deleted: 已刪除
    description: 描述
    labels: 標籤
    ownerReferences: |-
      {count, plural,
      =1 {所有者}
      other {所有者}}
    hideLabels: 隱藏系統標籤
    showLabels: 顯示所有標籤
    hideAnnotations: |-
      {annotations, plural,
      =1 {隱藏1個註釋}
      other {隱藏{annotations}個註釋}}
    showAnnotations: |-
      {annotations, plural,
      =1 {顯示1個註釋}
      other {顯示{annotations}個註釋}}
    name: 名稱
    endpoints: 端點
    namespaces: 命名空間
  header:
    clone: "從 {subtype} {name} 克隆"
    create: 創建 {subtype}
    import: 導入 {subtype}
    edit: "{subtype} {name}"
    stage: "從 {subtype} {name} 暫存"
    view: "{subtype} {name}"
  masthead:
    age: 存活時間
    defaultBannerMessage:
      error: 此資源當前處於錯誤狀態，且沒有可用的詳細消息。
      transitioning: 此資源當前處於轉換狀態，且沒有可用的詳細消息。
    sensitive:
      hide: 隱藏敏感信息
      show: 顯示敏感信息
    namespace: 命名空間
    workspace: 工作空間
    project: 項目
    detail: 詳情
    config: 配置
    yaml: YAML
    managedWarning: |-
      此 {type} 由 {hasName, select,
        no { {managedBy} 應用}
        yes { {managedBy} 應用 {appName}}} 管理。在此處所做的更改可能會在下次 {managedBy} 運行時被覆蓋。
    graph: Graph
    restartCount: Pod 重啓
resourceList:
  head:
    create: 創建
    createFromYaml: 使用 YAML 文件創建
    createResource: "創建 {resourceName}"
resourceTable:
  groupBy:
    none: 簡單列表
    namespace: 按命名空間分組
    project: 按項目分組
    node: 按節點分組
    device: 按設備分組
  groupLabel:
    cluster: "<span>集羣：</span> {name}"
    namespace: "<span>命名空間：</span> {name}"
    notInAMachinePool: "不在 Deployment 中"
    machinePool: "<span>節點池：</span> {name}"
    notInANamespace: 不在命名空間內
    notInAProject: 不在項目內
    project: "<span>項目：</span> {name}"
    notInAWorkspace: 不在工作空間內
    workspace: "<span>工作空間</span> {name}"
    notInANodePool: "不在節點池中"
    nodePool: "<span>節點池：</span> {name}"
    node: "<span>節點：</span> {name}"
resourceTabs:
  conditions:
    tab: 條件
  events:
    tab: 最近事件
  related:
    tab: 相關資源
    from: 被引用
    to: 引用
resourceYaml:
  errors:
    namespaceRequired: 這個資源是有命名空間的，所以必須提供一個命名空間。
  buttons:
    continue: 繼續編輯
    edit: 編輯 YAML
    diff: 顯示差異
    hideDiff: 隱藏差異
    unified: 統一
    split: 拆分
secret:
  authentication: 身份驗證
  certificate:
    certificate: 證書
    certificatePlaceholder: "粘貼證書，一般以----BEGIN CERTIFICATE----開頭"
    cn: 域名
    expires: 過期時間
    issuer: 發行者
    plusMore: "+ {n} 更多"
    privateKey: 私鑰
    privateKeyPlaceholder: "粘貼私鑰，一般以----BEGIN RSA PRIVATE KEY----開頭"
  data: 數據
  registry:
    address: 鏡像倉庫
    domainName: 鏡像倉庫域名
    password: 密碼
    username: 用戶名
  basic:
    password: 密碼
    username: 用戶名
  ssh:
    keys: 密鑰
    public: 公鑰
    publicPlaceholder: "粘貼你的公鑰"
    private: 私鑰
    privatePlaceholder: "粘貼你的私鑰"
  serviceAcct:
    ca: CA 證書
    token: Token
  type: 類型
  types:
    'opaque': 'Opaque'
    'kubernetes.io/service-account-token': 'Svc Acct Token'
    'kubernetes.io/dockercfg': '鏡像倉庫'
    'kubernetes.io/dockerconfigjson': '鏡像倉庫'
    'kubernetes.io/basic-auth': 'HTTP 基礎認證'
    'kubernetes.io/ssh-auth': 'SSH 密鑰'
    'kubernetes.io/tls': 'TLS 證書'
    'bootstrap.kubernetes.io/token': 'Bootstrap Token'
    'istio.io/key-and-cert': 'Istio 證書'
    'helm.sh/release.v1': 'Helm 版本'
    'fleet.cattle.io/cluster-registration-values': 'Fleet 集羣'
    'provisioning.cattle.io/cloud-credential': '雲憑證'
    'rke.cattle.io/auth-config': 'RKE 認證配置'
  initials:
    'opaque': 'O'
    'kubernetes.io/service-account-token': 'SAT'
    'kubernetes.io/dockercfg': 'R'
    'kubernetes.io/dockerconfigjson': 'R'
    'kubernetes.io/basic-auth': 'HTTP'
    'kubernetes.io/ssh-auth': 'SSH'
    'kubernetes.io/tls': 'TLS'
    'bootstrap.kubernetes.io/token': 'Boot'
    'istio.io/key-and-cert': 'Ist'
    'helm.sh/release.v1': 'Helm'
    'fleet.cattle.io/cluster-registration-values': 'F'
    'provisioning.cattle.io/cloud-credential': 'CC'
    's3': 'S3'
  relatedWorkloads: 相關的工作負載
  typeDescriptions:
    'kubernetes.io/basic-auth':
      description: '使用用戶名和密碼進行驗證'
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#basic-authentication-secret
    'Opaque':
      description: 使用鍵值對的默認密文類型
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#opaque-secrets
    'kubernetes.io/dockerconfigjson':
      description: 用於拉取容器鏡像的已驗證倉庫
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#docker-config-secrets
    'kubernetes.io/ssh-auth':
      description: 用於 SSH 認證的公鑰和私鑰
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#ssh-authentication-secrets
    'kubernetes.io/tls':
      description: 存儲 TLS 證書和密鑰
      docLink: https://kubernetes.io/docs/concepts/configuration/secret/#tls-secrets
    custom:
      description: 使用自定義類型創建密文
  customType: 自定義類型
selectOrCreateAuthSecret:
  label: 身份驗證
  options:
    none: 無
    basic: HTTP 基礎認證
    ssh: SSH 密鑰
    aws: AWS/S3
    custom: 密文名稱
  s3:
    accessKey: 訪問密鑰
    secretKey: 密文密鑰
  ssh:
    publicKey: 公鑰
    privateKey: 私鑰
  basic:
    username: 用戶名
    password: 密碼
  namespaceGroup: "命名空間：{name}"
  chooseExisting: "選擇一個現有的密文："
  createSsh: 創建 SSH 密鑰密文
  createBasic: 創建 HTTP 基本身份驗證密文
  createS3: 創建與 S3 兼容的身份驗證密文
servicePorts:
  header:
    label: 端口規則
  rules:
    listening:
      label: 監聽端口
      placeholder: 例如：8080
    name:
      label: 端口名稱
      placeholder: 例如：myport
    node:
      label: 節點端口
      placeholder: 例如：30000
    protocol:
      label: 協議
    target:
      label: 目標端口
      placeholder: 例如：80 或 http
serviceTypes:
  clusterip: 集羣 IP
  externalname: 外部名稱
  headless: Headless
  loadbalancer: 負載均衡
  nodeport: 節點端口
servicesPage:
  anyNode: 任何節點
  labelsAnnotations:
    label: 標籤 & 註釋
  affinity:
    actionLabels:
      clientIp: 客戶端 IP
      none: 未配置會話保持
    helpText: 根據源 IP 將連接映射到一個一致的目標
    label: 會話保持
    timeout:
      label: 會話粘滯時間
      placeholder: 例如：10800
  externalName:
    define: 外部名稱
    helpText: "外部名稱用於是指定一個 DNS 名稱。這是必填字段。如果要硬編碼一個 IP 地址，請使用 headless 服務。"
    label: 外部名稱
    placeholder: 例如：my.database.example.com
    input:
      label: DNS 名稱
  ips:
    define: 服務端口
    clusterIpHelpText: 集羣 IP 地址必須在爲 API server 配置的 CIDR 範圍內。
    external:
      label: 外網 IP
      placeholder: 例如：1.1.1.1
      protip: IP 地址列表，集羣中的節點也將使用該服務的流量。
    input:
      label: 集羣 IP
      placeholder: 例如：10.43.xxx.xxx
    label: IP 地址
    loadBalancerIp:
      label: 負載均衡 IP
      placeholder: 例如：192.0.xxx.xxx
      helpText: 如果你指定了 loadBalancerIP 但你的雲提供商不支持該功能，loadBalancerIP 字段的值會被忽略。
    loadBalancer:
      label: 負載均衡
  pods:
    label: Pod
  ports:
    label: 端口
  selectors:
    helpText: ""
    label: 選擇器
    matchingPods:
      matchesSome: |-
        {matched, plural,
          =0 {與{total, number}個 Pod 中的0個匹配。如果沒有創建選擇器，必須進行手動端點。}
          =1 {與{total, number}個 Pod 中的1個匹配："{sample}"}
          other {與{total, number}個 Pod 中的{matched, number}個匹配，包括"{sample}"}
        }
  serviceTypes:
    clusterIp:
      abbrv: IP
      description: 在集羣內網 IP 上公開服務。如果選擇此值，服務只能從集羣內部訪問。這是默認類型。
      label: 集羣 IP
    externalName:
      abbrv: EN
      description: "將服務與`externalName`字段的內容（如 foo.bar.example.com）進行映射，返回一個帶有其值的 CNAME 記錄。沒有設置任何形式的代理。"
      label: 外部名稱
    headless:
      abbrv: H
      description: 既沒有定義集羣 IP，也沒有定義負載均衡。它們是用來對接 Kubernetes 實現之外的其他服務發現機制的。這些服務沒有分配的集羣 IP，kube-proxy 也不處理這些服務。
      label: Headless
    loadBalancer:
      abbrv: LB
      description: 使用雲提供商的負載均衡器向外部公開服務。
      label: 負載均衡
    nodePort:
      abbrv: NP
      description: "在每個節點的 IP 上以靜態端口（`NodePort`）公開服務。你可以通過請求`&lt;NodeIP&gt;:&lt;NodePort&gt;`從集羣外部聯繫這種類型的服務。"
      label: 節點端口
  typeOpts:
    label: 服務類型
  harvester:
    healthCheckEnabled:
      label: 健康檢查
    healthCheckFailureThreshold:
      description: 如果健康檢查失敗的數量達到失敗閾值，後端服務器將停止轉發流量。
      label: 健康檢查失敗閾值
    healthCheckPeriod:
      label: 健康檢查週期
    healthCheckPort:
      label: 健康檢查端口
    healthCheckSuccessThreshold:
      description: 如果探針連續檢測到某個地址的成功次數達到成功閾值，後端服務器就可以開始轉發流量。
      label: 健康檢查成功闕值
    healthCheckTimeout:
      label: 健康檢查超時
    ipam:
      label: IPAM
    title: 附加配置
setup:
  currentPassword: Bootstrap 密碼
  confirmPassword: 確認新密碼
  defaultPassword:
    intro: 這是你第一次訪問 {vendor}。如果你預先設置了 Bootstrap 密碼，請在此處輸入。否則我們會爲你生成一個隨機密碼。找到它：<br/><br/>
    dockerPrefix: '"docker run" 安裝：'
    dockerPs: '運行<code>docker ps</code>找到你的容器 ID，然後運行：'
    dockerSuffix: ""
    helmPrefix: 'Helm 安裝，運行：'
    helmSuffix: ""
  eula: 我同意使用 {name} 的 <a href="https://rancher.com/eula" target="_blank" rel="noopener noreferrer nofollow">條款和條件</a>。
  newPassword: 新密碼
  newUserSetPassword: 請設置強密碼。建議使用生成的隨機密碼。你也可以自行設置。
  serverUrl:
    label: 服務器 URL
    skip: 跳過
    tip: 此 {vendor} 安裝應使用什麼 URL？集羣中的所有節點都需要能訪問該 URL。
  setPassword: 請爲默認用戶 <code>{username}</code>設置強密碼。建議使用生成的隨機密碼。你也可以自行設置。
  telemetry: 允許收集<a href="{docsBase}/faq/telemetry/" target="_blank" rel="noopener noreferrer nofollow">匿名統計數據</a>，以幫我們改進 {name}。
  useManual: 設置密碼
  useRandom: 使用隨機生成的密碼
  welcome: 歡迎使用 {vendor}！
sortableTable:
  actionAvailability:
    selected: "已選擇 {actionable} 項"
    some: "影響 {total} 項中的 {actionable} 項"
  noData: 沒有匹配項
  noRows: 沒有可顯示的內容。
  noActions: 沒有可執行的操作。
  paging:
    generic: |-
      {pages, plural,
      =0 {無項目}
      =1 {{count} {count, plural, =1 {Item} other {Items}}}
      other {{from} - {to} of {count} Items}}
    resource: |-
      {pages, plural,
      =0 {No {pluralLabel}}
      =1 {{count} {count, plural, =1 {{singularLabel}} other {{pluralLabel}}}}
      other {{from} - {to} of {count} {pluralLabel}}}
  search: 篩選
  bulkActions:
    collapsed:
      label: 操作
storageClass:
  actions:
    setAsDefault: 設爲默認配置
    resetDefault: 重設默認設置
  parameters:
    label: 參數
  customize:
    label: 自定義
    reclaimPolicy:
      label: 回收策略
      delete: 刪除卷聲明時，同時刪除卷和底層設備。
      retain: 保留卷以進行手動清理。
    allowVolumeExpansion:
      label: 允許拓展卷
      enabled: 啓用
      disabled: 禁用
    volumeBindingMode:
      label: 卷綁定模式
      now: 在創建 PersistentVolumeClaim 時，立即綁定並配置一個持久卷
      later: 創建了使用 PersistentVolumeClaim 的 Pod 之後，再綁定並配置一個持久卷
    mountOptions:
      label: 掛載選項
      addLabel: 添加選項
  aws-ebs:
    title: Amazon EBS 磁盤
    volumeType:
      label: 卷類型
      gp2: GP2 - 通用 SSD
      io1: IO1 - 預配置 IOPS SSD
      st1: ST1 - 吞吐量優化型 HDD
      sc1: SC1 - 冷存儲 HDD
      provisionedIops:
        label: 預配置 IOPS
        suffix: 每秒，每GB
      gp3: GP3 - 通用 SSD
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    availabilityZone:
      label: 可用區
      automatic: '自動選擇：選擇節點所在區域作爲可用區'
      manual: '手動：自行指定可用區'
      placeholder: us-east-1d, us-east-1c
    encryption:
      label: 加密
      enabled: 啓用
      disabled: 禁用
    keyId:
      label: 用於加密的 KMS 密鑰 ID
      automatic: '自動：生成密鑰'
      manual: '手動：使用指定的密鑰（full ARN）'
  azure-disk:
    title: Azure 磁盤
    storageAccountType:
      label: Storage Account 類型
      placeholder: 例如：Standard_LRS
    kind:
      label: 類型
      shared: 共享（非託管磁盤）
      dedicated: 專用（非託管磁盤）
      managed: 託管
  azure-file:
    title: Azure 文件
    skuName:
      label: Sku 名稱
      placeholder: 例如：Standard_LRS
    location:
      label: 位置
      placeholder: 例如：eastus
    storageAccount:
      label: Storage Account
      placeholder: 例如：azure_storage_account_name
  gce-pd:
    title: Google 持久磁盤
    volumeType:
      label: 卷類型
      standard: 標準
      ssd: SSD
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    availabilityZone:
      label: 可用區
      automatic: '自動選擇：選擇節點所在區域作爲可用區'
      manual: '手動：自行指定可用區'
      placeholder: us-east-1d, us-east-1c
    replicationType:
      label: 副本類型
      zonal: 可用區
      regional: 區域
  longhorn:
    title: Longhorn
    addLabel: 添加參數
  vsphere-volume:
    title: VMWare vSphere 卷
    diskFormat:
      label: 磁盤格式
      thin: Thin
      zeroedthick: Zeroed Thick
      eagerzeroedthick: Eager Zeroed Thick
    storagePolicyName:
      label: 存儲策略名稱
      placeholder: 例如：gold
    datastore:
      label: Datastore
      placeholder: 例如：VSANDatastore
    hostFailuresToTolerate:
      label: 容忍主機失敗的次數
      placeholder: 例如：2
    cacheReservation:
      label: 緩存預留的大小
      placeholder: 例如：20
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext3
  custom:
    addLabel: 添加參數
  glusterfs:
    title: Gluster 卷（不支持）
    restUrl:
      label: REST URL
      placeholder: 例如：http://127.0.0.1:8081
    restUser:
      label: REST 用戶
      placeholder: 例如：admin
    restUserKey:
      label: REST 用戶密鑰
      placeholder: 例如：password
    secretNamespace:
      label: 密文所在的命名空間
      placeholder: 例如：default
    secretName:
      label: 密文名稱
      placeholder: 例如：heketi-secret
    clusterId:
      label: 集羣 ID
      placeholder: 例如：630372ccdc720a92c681fb928f27b53f
    gidMin:
      label: GID MIN
      placeholder: 例如：40000
    gidMax:
      label: GID MAX
      placeholder: 例如：50000
    volumeType:
      label: 卷類型
      placeholder: "例如：replicate:3"
  cinder:
    title: Openstack Cinder 卷（不支持）
    volumeType:
      label: 卷類型
      placeholder: 例如：fast
    availabilityZone:
      label: 可用區
      automatic: "自動選擇：選擇節點所在區域作爲可用區"
      manual:
        label: "手動：自行指定可用區"
        placeholder: 例如：nova
  rbd:
    title: Ceph RBD（不支持）
    monitors:
      label: 監控
      placeholder: 例如：10.16.153.105:6789
    adminId:
      label: Admin ID
      placeholder: 例如：kube
    adminSecretNamespace:
      label: Admin 密文所在的命名空間
      placeholder: 例如：kube-system
    adminSecret:
      label: Admin 密文
      placeholder: 例如：Secret
    pool:
      label: 池
      placeholder: 例如：kube
    userId:
      label: 用戶 ID
      placeholder: 例如：kube
    userSecretNamespace:
      label: 用戶密文所在的命名空間
      placeholder: 例如：default
    userSecretName:
      label: 用戶密文名稱
      placeholder: 例如：ceph-secret-user
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    imageFormat:
      label: 鏡像格式
      placeholder: 例如：2
    imageFeatures:
      label: 鏡像功能
      placeholder: 例如：layering
  quobyte:
    title: Quobyte 卷（不支持）
    quobyteApiServer:
      label: Quobyte API server
      placeholder: "例如：http://138.68.74.142:7860"
    registry:
      label: 鏡像倉庫
      placeholder: 例如：138.68.74.142:7861
    adminSecretNamespace:
      label: Admin 密文所在的命名空間
      placeholder: 例如：kube-system
    adminSecretName:
      label: Admin 密文名稱
      placeholder: 例如：quobyte-admin-secret
    user:
      label: 用戶名
      placeholder: 例如：root
    group:
      label: 組
      placeholder: 例如：root
    quobyteConfig:
      label: Quobyte 配置
      placeholder: 例如：BASE
    quobyteTenant:
      label: Quobyte 租戶
      placeholder: 例如：DEFAULT
  portworx-volume:
    title: Portworx 卷（不支持）
    filesystem:
      label: 文件系統
      placeholder: 例如：ext4
    blockSize:
      label: 塊大小
      placeholder: 例如：32
    repl:
      label: Repl
      placeholder: 例如：1; 0 代表整個設備
    ioPriority:
      label: I/O 優先級
      placeholder: 例如：low
    snapshotsInterval:
      label: 快照間隔
      placeholder: 例如：70
    aggregationLevel:
      label: 聚合度
      placeholder: 例如：0
    ephemeral:
      label: 是否臨時
      placeholder: 例如：true
  scaleio:
    title: ScaleIO 卷（不支持）
    gateway:
      label: 網關
      placeholder: 例如：https://192.168.99.200:443/api
    system:
      label: 系統
      placeholder: 例如：scaleio
    protectionDomain:
      label: 保護域
      placeholder: 例如：pd0
    storagePool:
      label: 存儲池
      placeholder: 例如：sp1
    storageMode:
      label: 存儲模式
      thin: 精簡預配
      thick: 厚預配
    secretRef:
      label: 密文 Ref
      placeholder: 例如：sio-secret
    readOnly:
      label: 只讀
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：xfs
  storageos:
    title: StorageOS（不支持）
    pool:
      label: 池
      placeholder: 例如：default
    description:
      label: 描述
      placeholder: 例如：Kubernetes 卷
    filesystemType:
      label: 文件系統類型
      placeholder: 例如：ext4
    adminSecretNamespace:
      label: Admin 密文所在的命名空間
      placeholder: 例如：default
    adminSecretName:
      label: Admin 密文名稱
      placeholder: 例如：storageos-secret
  no-provisioner:
    title: 本地存儲（不支持）
tableHeaders:
  accessKey: 訪問密鑰
  address: 地址
  age: 存活時間
  apiGroup: API 組
  authRoles:
    globalDefault: 新用戶的默認角色
    clusterDefault: 集羣創建者的默認角色
    projectDefault: 項目創建者的默認角色
  branch: 分支
  builtIn: 內置
  bundlesReady: 就緒 Bundle
  bundleDeploymentsReady: Deployment
  builtin: 內置
  chart: Chart
  clusterCreatorDefault: 集羣創建者的默認角色
  clusterFlow: Cluster Flow
  clusterOutput: 集羣輸出
  clusters: 集羣
  clustersReady: 就緒集羣
  clusterGroups: 集羣組
  commit: Commit
  condition: 狀態
  customVerbs: 自定義操作
  description: 描述
  expires: 過期時間
  providers: 提供商
  cpu: CPU
  date: 日期
  default: 默認
  destination: 目標
  download: 下載
  effect: 效果
  endpoints: 端點
  fleetBundleType: 類型
  flow: Flow
  gitRepos: Git 倉庫
  host: 主機
  health: 健康
  id: ID
  image: 鏡像
  imageSize: 大小
  ingressDefaultBackend: 默認
  ingressTarget: 目標
  internalExternalIp: 外網 IP/內網 IP
  jobs: Job
  key: 鍵
  keys: 數據
  lastUpdated: 最後更新時間
  lastSeen: 最後出現
  loggingOutputProviders: 提供商
  machines: 主機
  machineNodeName: 節點
  manual: 手動
  matches: 匹配
  maxKubernetesVersion: 最大 Kubernetes 版本
  message: 消息
  minKubernetesVersion: 最低 Kubernetes 版本
  memory: 內存
  name: 名稱
  nameDisplay: 顯示名稱
  nameUnlinked: 名稱
  namespace: 命名空間
  namespaceName: 名稱
  namespaceNameUnlinked: 名稱
  node: 節點
  nodeName: 名稱
  nodesReady: 就緒節點
  nodePort: 節點端口
  object: 對象
  operatingSystem: 操作系統
  output: 輸出
  p95: 95 百分位數
  persistentVolumeClaim: 持久卷聲明
  persistentVolumeSource: 源
  podImages: 鏡像
  pods: Pod
  port: 端口
  protocol: 協議
  provider: 提供商
  publicPorts: 公共端口
  ram: 內存（RAM）
  rbac:
    create: Create
    delete: Delete
    get: Get
    list: List
    patch: Patch
    update: Update
    watch: Watch
  ready: 就緒
  reason: 原因
  reclaimPolicy: 回收策略
  repo: 倉庫
  repositories: 倉庫
  repoName: 倉庫名稱
  reposReady: 就緒倉庫
  replicas: 副本數量
  reqRate: 請求頻率
  resource: 資源
  resources: 資源
  resourcesReady: 就緒資源
  restarts: 重啓次數
  role: 角色
  roles: 角色
  scale: 比例
  scope: 範圍
  selector: 選擇器
  simpleName: 名稱
  simpleScale: 比例
  simpleType: 類型
  size: 大小
  started: 已開始
  state: 狀態
  status: 狀態
  storage_class_provisioner: 提供商
  subject: 主題
  subType: 類型
  success: 成功
  summary: 概述
  taints: 污點
  target: 目標
  targetKind: 目標類型
  targetPort: 目標
  type: 類型
  updated: 更新時間
  upgrade: 可升級
  url: URL
  userDisplayName: 顯示名稱
  userId: ID
  userStatus: 狀態
  username: 本地用戶名
  value: 值
  version: 版本
  weight: 權重
  progress: 進度
  fingerprint: 唯一標識
  networkType: 類型
  networkVlan: Vlan ID
  readyToUse: 可用
  backupTarget: 備份路徑
  targetVm: 目標虛擬機
  phase: 階段
  attachedVM: 掛載的虛擬機
  hostIp: 主機 IP
  storage: 存儲大小
  defaultVersion: 默認版本
  ipAddress: IP 地址
  diskState: 磁盤狀態
  routeConnectivity: 路由連接
  Schedule: 調度
  'Last Schedule': 上次調度
  Ready: 就緒
  Current: 當前
  Desired: 期望
  Up-to-date: 最新
  Available: 可用
  Completions: 完成
  Duration: 時長
  Restarts: 重啓
  hpaReference: 工作負載
  minReplicas: 最小副本數
  maxReplicas: 最大副本數
  currentReplicas: 當前副本數
  Pod-Selector: Pod 選擇器
  Status: 狀態
  Volume: 卷
  Capacity: 容量
  Access Modes: 訪問模式
  StorageClass: 存儲類
  VolumeMode: 卷類型
  data: 數據
  Service: 服務
  Endpoints: 端點
  AddressType: 地址類型
  Ports: 端口
  Role: 角色
  Users: 用戶
  Groups: 組
  ServiceAccounts: 服務賬戶
  Value: 值
  Global-Default: 全局默認
  Drivers: 驅動數量
  apikey: API 密鑰
  groupName: 組名稱
  groupRoleNames: 組角色名稱
  Secret-Name: 密文名稱
  restart: 要求重啓
  ipaddress: IP 地址
  podRestarts: 重啓次數
  project: 項目
  receiverTypes: 接收器類型
  receivers: 接收器
  registrationNamespace: 註冊命名空間
  routes: 路由
  ingressClass: IngressClass
target:
  router:
    label: 路由
    placeholder: 選擇路由
  service:
    label: 服務
    placeholder: 選擇服務
  title: 目標
  version:
    label: 版本
    placeholder: 選擇版本
user:
  detail:
    username: 用戶名
    globalPermissions:
      label: 全局權限
      description: 管理影響整個安裝的資源的權限
      adminMessage: 該用戶是一個管理員，擁有所有權限
      tableHeaders:
        permission: 權限
      readOnlyAdminMessage: 此用戶是隻讀管理員並對下級集羣對象擁有隻讀權限
    clusterRoles:
      label: 集羣角色
      description: 授予一個用戶在各個集羣中的角色
      tableHeaders:
        cluster: 集羣
    projectRoles:
      label: 項目角色
      description: 授予一個用戶在各個項目中的角色
      tableHeaders:
        project: 項目
    generic:
      tableHeaders:
        role: 角色
        granted: 授予
  edit:
    credentials:
      label: 憑證
      username:
        label: 用戶名
        placeholder: 例如：jsmith
        exists: '用戶名已被使用。請選擇一個新的用戶名。'
      displayName:
        label: 顯示名稱
        placeholder: 例如：John Smith
      userDescription:
        label: 描述
        placeholder: 例如：這是 John Smith 的賬號。
  list:
    errorRefreshingGroupMemberships: 刷新組成員名單時出錯
validation:
  arrayLength:
    between: '"{key}" 應該包含 {min} 至 {max} {max, plural, =1 {項} other {項}}'
    exactly: '"{key}" 應該包含 {count, plural, =1 {#項} other {#項}}'
    max: '"{key}" 最多可包含 {count} {count, plural, =1 {項} other {項}}'
    min: '"{key}" 至少要包含 {count} {count, plural, =1 {項} other {項}}'
  boolean: '"{key}" 必須是個布爾值。'
  chars: '"{key}" 包含 {count, plural, =1 {1個無效字符} other {#個無效字符}}: {chars}'
  cluster:
    name: 集羣名稱不能設爲"local"或採用"c-xxxxx"形式。
  conflict: |-
    此資源在你開始編輯之後已被修改，某些修改與你的更改衝突。
    此屏幕已更新以反映集羣上的當前值。查看並再次應用你想要的更改，然後再次保存。
    衝突{fieldCount, plural, =1 {字段} other {字段}}：{fields}
  custom:
    missing: '{ validatorName } 不存在校驗。請檢查校驗是否存在於自定義校驗中，以及名稱是否拼寫正確。'
  dns:
    doubleHyphen: '“{key}” 不能包含兩個或兩個以上連續的連字符"-"'
    hostname:
      empty: '"{key}" 至少包含一個字符'
      emptyLabel: '"{key}" 不能包含兩個連續的點“.”'
      endDot: '"{key}" 不能以點“.”結束'
      endHyphen: '"{key}" 不能以連字符“-”結束'
      startDot: '"{key}" 不能以點“.”開始'
      startHyphen: '"{key}" 不能以連字符“-”開始'
      startNumber: '"{key}" 不能以數字開始'
      tooLong: '"{key}" 的長度不能超過{max}個字符'
      tooLongLabel: '"{key}" 不能包含超過 {max} 字符的部分'
    label:
      emptyLabel: '“{key}” 不能爲空'
      endHyphen: '"{key}" 不能以連字符“-”結束'
      startHyphen: '"{key}" 不能以連字符“-”開始'
      startNumber: '"{key}" 不能以數字開始'
      tooLongLabel: '"{key}" 的長度不能超過{max}個字符'
      endDot: '"{key}" 不能以點“.”結束'
      startDot: '"{key}" 不能以點“.”開始'
  flowOutput:
    both: 需要選擇 "輸出" 或 "集羣輸出"。
    global: 需要選擇“集羣輸出”。
  output:
    logdna:
      apiKey: 需要設置“API 密鑰”。
  invalidCron: 無效的 cron 調度
  k8s:
    identifier:
      emptyLabel: '“{key}” 不能有空鍵'
      emptyPrefix: '“{key}” 不能有空前綴'
      endLetter: '“{key}” 末位必須是字母或數字'
      startLetter: '“{key}” 首位必須是字母或數字'
      tooLongKey: '“{key}” 的長度不能超過{max}個字符'
      tooLongPrefix: '"{key}" 前綴的長度不能超過{max}個字符'
    name: 必須由小寫字母數字或“-”組成，並且開頭和結尾必須是字母數字（例如“my-name”或“123-abc”）。
  noSchema: 沒有找到可以驗證的 schema
  noType: 沒有可驗證的類型
  number:
    between: '"{key}" 的長度必須在 {min} 和 {max}之間'
    exactly: '"{key}" 需要設爲 {val}'
    max: '"{key}" 最多可以是 {val}'
    min: '"{key}" 至少需要是 {val}'
    requiredInt: '"{key}" 必須是整數'
  podAffinity:
    affinityTitle: Pod 親和性
    antiAffinityTitle: Pod 反親和性
    requiredDuringSchedulingIgnoredDuringExecution: 所需規則
    preferredDuringSchedulingIgnoredDuringExecution: 首選規則
    topologyKey: "{group} {rules} 的規則 [{index}] - 拓撲鍵是必需的。"
    matchExpressions:
      operator: "{group} {rules} 的規則 [{index}] - 運算符必須是'In'， 'NotIn'，'Exists'，或'DoesNotExist'中的其中一個"
      valueMustBeEmpty: "{group} {rules} 的規則 [{index}] - 如果運算符是'Exists'或'DoesNotExist'，值必須爲空"
      valuesMustBeDefined: "{group} {rules} 的規則 [{index}] - 如果運算符是'In'或'NotIn'，必須定義值"
  port: 端口號的取值範圍是1到65535。
  prometheusRule:
    groups:
      required: 至少需要一個規則組。
      singleAlert: 規則可以包含告警規則或記錄規則，但不能同時包含兩者。
      valid:
        name: '規則組{index}需要名稱。'
        rule:
          alertName: '規則組{groupIndex}的規則{ruleIndex}需要告警名稱。'
          expr: '規則組{groupIndex}的規則{ruleIndex}需要 PromQL 表達式。'
          labels: '規則組{groupIndex}的規則{ruleIndex}至少需要一個標籤。建議使用嚴重程度作爲標籤。'
          recordName: '規則組{groupIndex}的規則{ruleIndex}需要一個時間序列名稱。'
        singleEntry: '規則組{index}至少需要有一個告警規則或一個記錄規則。'
    noEdit: 名稱中的字符無效，可能無法編輯此 PrometheusRule。
  required: '"{key}" 是必填項。'
  invalid: '無效的 "{key}"'
  requiredOrOverride: '"{key}" 是必填項，或必須允許覆蓋。'
  roleTemplate:
    roleTemplateRules:
      missingVerb: 你必須爲每個授予資源指定至少一個動作。
      missingResource: 你必須爲每個授予資源指定一個資源。
      missingApiGroup: 你必須爲每個授予資源指定一個 API 組。
      missingOneResource: 你必須爲每個授予資源指定至少一個資源、非資源 URL 或 API 組。
  service:
    externalName:
      none: 使用 ExternalName 服務時，外部名稱是必填項。
    ports:
      name:
        required: '端口規則 [{position}] - 端口名稱是必填項。'
      nodePort:
        requiredInt: '端口規則 [{position}] - 如果包含節點端口，節點端口必須是整數。'
        between: 端口規則 [{position}] - 節點端口的取值範圍是：1-65535
      port:
        required: '端口規則 [{position}] - 端口是必填項，'
        requiredInt: '端口規則 [{position}] - 如果包含端口，端口必須是整數。'
        between: 端口規則 [{position}] - 端口的取值範圍是：1-65535
      targetPort:
        between: '端口規則 [{position}] - 目標端口的取值範圍是：1-65535'
        iana: '端口規則 [{position}] - 目標端口必須是 IANA 服務名稱或整數'
        ianaAt: '端口穀子額 [{position}] - 目標端口 '
        required: '端口規則[{position}] - 目標端口是必填項。'
  setting:
    serverUrl:
      https: server-url 必須是 https。
  stringLength:
    between: '"{key}" 的長度必須是 {min} 到 {max} {max, plural, =1 {字符} other {字符}}'
    exactly: '"{key}" 的長度必須是 {count, plural, =1 {#字符} other {#字符}}'
    max: '"{key}" 最多可以包含 {count} {count, plural, =1 {字符} other {字符}}'
    min: '"{key}" 最少需要包含 {count} {count, plural, =1 {字符} other {字符}}'
  targets:
    missingProjectId: 必須爲目標選定一個項目。
  monitoring:
    route:
      match: 必須選擇至少一個匹配或匹配正則表達式。
      interval: '"{key}" 必須是以數字後跟單位（如 1h, 2m, 30s）的格式。'
  tab: 此選項卡中的一個或多個字段包含表單驗證錯誤
  noUpperCase: “{key}” 中的字母數字字符必須爲小寫
  path: '"{key}" 必須是絕對路徑'
  arrayCountRequired: 至少需要 {count} 個 {key}，而且 {key} 不能爲空。
wizard:
  previous: 上一步
  finish: 完成
  next: 下一步
  step: "步驟 {number}"
  create: 創建
  edit: 編輯
  view: 查看
wm:
  connection:
    connected: 已連接
    connecting: 正在連接&hellip;
    disconnected: 已斷開連接
    error: 錯誤
  containerLogs:
    clear: 清除
    containerName: "容器：{label}"
    download: 下載
    follow: 回到底部
    noData: 當前範圍內沒有可顯示的日誌項目
    noMatch: 沒有符合當前過濾條件的數據
    previous: 使用前一個容器
    range:
      all: 全部
      hours: |-
        {value, number}
        {value, plural,
        =1 {小時}
        other {小時}
        }
      label: 顯示最後一個
      lines: "{value, number} 行"
      minutes: |-
        {value, number} {value, plural,
        =1 {分鐘}
        other {分鐘}
        }
    search: 篩選
    timestamps: 顯示時間戳
    wrap: 自動換行
  containerShell:
    clear: 清除
    containerName: "容器：{label}"
    permissionDenied:
      message: 無權訪問
      title: 無法打開 Shell 窗口
  kubectlShell:
    title: "Kubectl: {name}"
workload:
  container:
    tags: Tags
    command:
      addEnvVar: 添加變量
      args: 參數
      as: 作爲
      command: 命令
      env: 環境變量
      fromResource:
        key:
          label: 鍵
          placeholder: "例如：metadata.labels['<KEY>']"
        name:
          label: 變量名
          placeholder: "例如：FOO"
        prefix: 前綴
        source:
          label: 源
          placeholder: 例如：my-container
        secret: 密文
        configMap: ConfigMap
        containerName: 容器名稱
        type: 類型
        value:
          label: 值
          placeholder: 例如：bar
      tty: TTY
      workingDir: 工作目錄
      stdin: 標準輸入
    containerName: 容器名稱
    healthCheck:
      checkInterval: 檢查間隔
      command:
        command: 運行命令
      failureThreshold: 失敗閾值
      httpGet:
        headers: 請求頭
        path: 請求路徑
        port: 檢查端口
      initialDelay: 初始延遲
      livenessProbe: 存活檢查
      livenessTip: 當該檢查失敗時，將重新啓動容器。大多數情況下不推薦。
      noHealthCheck: "沒有給容器配置存活、就緒或啓動檢查。"
      readinessProbe: 就緒檢查
      readinessTip: 當該檢查失敗時，會將容器從服務端點中移除（推薦）。
      startupProbe: 啓動檢查
      startupTip: 容器會在此檢查成功後，再嘗試進行其他健康檢查。
      successThreshold: 成功閾值
      timeout: 超時
      kind:
        none: 無
        HTTP: HTTP 請求返回成功的狀態（200-399）
        HTTPS: HTTPS 請求返回成功的狀態
        tcp: 成功啓動 TCP 連接
        exec: 容器內運行的命令以 0 狀態退出
    image: 容器鏡像
    imagePullPolicy: 鏡像拉取策略
    imagePullSecrets: 拉取密文
    init: 初始化容器
    lifecycleHook:
      postStart:
        label: postStart
        add: 添加 postStart 鉤子
      preStop:
        label: PreStop
        add: 添加 PreStop 鉤子
      exec:
        title: 執行
        add: 添加要執行的命令
        command:
          label: 命令
          placeholder: "例如：sh -c 'sleep 10'"
      httpGet:
        title: HttpGet
        add: 創建 HTTP 請求
        host:
          label: 主機 IP
          placeholder: 例如：172.17.0.2
        path:
          label: 路徑
          placeholder: 例如：app/bin/endpoint?param=value
        port:
          label: 端口
          placeholder: 例如：3000
        scheme:
          label: Scheme
          placeholder: 例如：HTTP
      httpHeaders:
        title: HTTP 頭部
        name:
          label: 名稱
          placeholder: 例如：accept-ranges
        value:
          label: 值
          placeholder: 例如：bytes
      tcpSocket:
        title: TCPSocket
        add: 打開 TCP socket
        host:
          label: 主機
          placeholder: 例如：192.168.0.1
        port:
          label: 端口
          placeholder: 例如：80
    name: 容器名稱
    noResourceLimits: 沒有配置資源需求。
    noPorts: 沒有配置端口。
    noServiceAccess: 沒有創建或管理服務的權限
    ports:
      createService: 服務類型
      noCreateService: 不創建服務
      containerPort: 私有容器端口
      hostIP: 主機 IP
      hostPort: 公共主機端口
      name: 名稱
      protocol: 協議
      listeningPort: 監聽端口
    removeContainer: 移除容器
    security:
      addCapabilities: 添加 Capabilities
      addGroupIDs: 添加組 ID
      allowPrivilegeEscalation:
        label: 允許權限提升
        'false': 否
        'true': "是：容器可以獲得比其父進程更多的權限。"
      dropCapabilities: 移除 Capabilities
      fsGroup: 文件系統組
      hostIPC: 使用主機 IPC 命名空間
      hostPID: 使用主機 PID 命名空間
      podFsGroup: Pod 文件系統組
      privileged:
        label: 特權模式
        'false': 否
        'true': "是：容器可以完全訪問主機"
      readOnlyRootFilesystem:
        label: 只讀根文件系統
        'false': 否
        'true': "是：容器有一個只讀的根文件系統"
      runAsGroup: 以組 ID 運行
      runAsNonRoot:
        label: 以非 Root 方式運行
        'false': 否
        'true': "是：容器必須以非 Root 用戶的身份運行"
      runAsNonRootOptions:
        noOption: "否"
        yesOption: "是：容器必須以非 Root 用戶身份運行"
      runAsUser: 以用戶 ID 運行
      shareProcessNamespace: 共享單一進程命名空間
      supplementalGroups: 其他組 ID
      sysctls: Sysctls
      sysctlsKey: 名稱
    standard: 標準容器
    titles:
      container: 容器
      command: 命令
      containers: 容器
      env: 環境變量
      events: 事件
      general: 通用
      healthCheck: 健康檢查
      image: 鏡像
      lifecycle: 生命週期鉤子
      networking: 網絡
      networkSettings: 網絡設置
      podAnnotations: Pod 註釋
      podLabels: Pod 標籤
      metrics: 指標
      podScheduling: Pod 調度
      nodeScheduling: 節點調度
      ports: 端口
      resources: 資源
      securityContext: 安全性上下文
      status: 狀態
      volumeClaimTemplates: 卷聲明模板
      upgrading: 擴縮容和升級策略
      pods: Pod
    terminationState: '最後狀態：以 {lsExitCode}: {lsDescription} 終止，以 {lsStartedAt} 開始，以 {lsFinishedAt} 結束'
    addContainer: 添加容器
  cronSchedule: 調度
  detail:
    pods:
      title: Pod
    cannotFindIngresses: 找不到將流量轉發到在該工作負載中選擇 Pod 的 Service 的 Ingress。
    cannotFindServices: 找不到從該工作負載中選擇 Pod 的 Service。
    cannotViewIngresses: 沒有列出 Ingress 的權限。
    cannotViewIngressesBecauseCannotViewServices: 沒有查看 Service 的權限，因此無法找到相關的 Ingress。
    cannotViewServices: 沒有列出 Service 的權限。
    ingressListCaption: 以下 Ingress 將流量轉發到從該工作負載中選擇 Pod 的 Service：
    ingresses: Ingress
    serviceListCaption: 以下 Service 從該工作負載中選擇 Pod：
    services: 服務
  detailTop:
    node: 節點
    podIP: Pod IP
    podRestarts: Pod 重啓
    workload: 工作負載
    pods: 按狀態劃分的 Pod
    runs: 運行
  gaugeStates:
    succeeded: 成功
    running: 運行中
    failed: 失敗
  hideTabs: '隱藏高級選項'
  job:
    activeDeadlineSeconds:
      label: 活動終止時間
      tip: 在系統試圖終止 job 前，job 處於活動狀態的可能時長。
    backoffLimit:
      label: 重試次數限制
      tip: 標記此 Job 失敗之前的重試次數。
    completions:
      label: 完成 Job 歷史數
      tip: Job 應該成功運行的完成 Pod 數
    failedJobsHistoryLimit:
      label: 失敗 Job 歷史數
      tip: 要保留的失敗但已完成的 job 數
    parallelism:
      label: 併發數
      tip: Job 在給定時間應同時運行的 Pod 的最大數量。
    startingDeadlineSeconds:
      label: 運行 Job 的截止時間（秒）
      tip: 如果 Job 錯過了調度時間，再次嘗試運行 Job 的截止時間，單位是秒
    successfulJobsHistoryLimit:
      label: 成功 Job 歷史數
      tip: 保留成功完成 Job 的數量
    suspend: 暫停
  list:
    errorCannotScale: 無法對 {workloadName} {direction, select, up { 擴容 } down { 縮容 } }
  metrics:
    pod: Pod 指標
    metricsView: 指標視圖
  networking:
    dnsPolicy:
      label: DNS 策略
      options:
        clusterFirst: 集羣優先
        clusterFirstWithHostNet: 集羣優先使用主機網絡
        default: 默認
        none: 無
      placeholder: 選擇策略...
    hostAliases:
      add: 添加別名
      keyLabel: IP 地址
      keyPlaceholder: 例如：1.1.1.1
      label: 主機別名
      tip: 要注入容器的其他 /etc/hosts 條目。
      valueLabel: 主機名
      valuePlaceholder: "例如：foo.com, bar.com"
    hostname:
      label: 主機名
      placeholder: 例如：web
    nameservers:
      add: 添加名稱服務器
      label: 名稱服務器
      placeholder: 例如：1.1.1.1
    networkMode:
      label: 網絡模式
      options:
        hostNetwork: 主機網絡
        normal: 常規
      placeholder: 選擇模式...
    dns: DNS
    resolver:
      label: 解析器選項
      add: 添加選項
    searches:
      add: 添加搜索域
      label: 搜索域
      placeholder: 例如：mycompany.com
    subdomain:
      label: 子域
      placeholder: 例如：web
    vlansubnet:
      ip:
        label: IP
        placeholder: '例如: 192.168.1.100，多個 IP 用逗號連接'
      label: 扁平網絡
      mac:
        label: MAC
        placeholder: '例如: 0a:00:27:00:00:00，多個 MAC 用逗號連接'
      network:
        label: Interface
        placeholder: 請選擇...
      subnet:
        label: Subnet
        placeholder: 請選擇一個 MacvlanSubnet
      tip: '因扁平網絡使用方式限制，Pod 縮放/升級策略已改爲: 先停止舊 Pod，再啓動新 Pod'
  normanWarning: 這個工作負載似乎是在舊版 Rancher UI 中創建的。你可能需要手動刪除爲其自動創建的服務。
  validation:
    containers: 容器
    containerImage: 容器 {name} - "容器鏡像" 是必填項。
  replicas: 副本數量
  showTabs: '顯示高級選項'
  scheduling:
    activeDeadlineSeconds: 判定 Pod 是否活躍的截止時間
    activeDeadlineSecondsTip: 系統將 Pod 判定爲失敗，並終止其關聯容器前的等待時長
    affinity:
      addNodeSelector: 添加節點選擇器
      anyNode: 在任何可用節點上運行 Pod
      affinityTitle: 在選擇器匹配的節點上運行 Pod
      antiAffinityTitle: 在不與選擇器匹配的節點上運行 Pod
      affinityOption: 親和性
      antiAffinityOption: 反親和性
      matchExpressions:
        addRule: 添加規則
        doesNotExist: 未設置
        exists: 已設置
        greaterThan: ">"
        in: 在列表中
        inNamespaces: "這些命名空間中的 Pod："
        key: 鍵
        lessThan: <
        namespaces: 命名空間
        notIn: 不在列表中
        operator: 運算符
        value: 值
        weight: 權重
      noPodRules: 沒有配置 Pod 調度策略
      nodeName: 節點名稱
      priority: 優先級
      preferAny: "傾向於任何一種："
      preferred: 首選
      required: 必須
      requireAny: "需要以下任何一種："
      schedulingRules: 在匹配調度規則的節點上運行 Pod
      specificNode: 在指定節點上運行 Pod
      thisPodNamespace: 此 Pod 的命名空間
      topologyKey:
        label: 拓撲鍵
        placeholder: 例如：failure-domain.beta.kubernetes.io/zone
      type: 類型
      weight:
        label: 權重
        placeholder: 權重範圍：1-100
    priority:
      className: 優先級名稱
      priority: 優先級
    terminationGracePeriodSeconds: 終止寬限期
    terminationGracePeriodSecondsTip: 終止 Pod 運行前的寬限期
    titles:
      advanced: 高級選項
      nodeScheduling: 節點調度
      nodeSelector: 具有以下標籤的節點
      podScheduling: Pod 調度
      priority: 優先級
      tab: 調度
      tolerations: 容忍
      limits: 限制和預留
    tolerations:
      addToleration: 添加容忍
      effect: 效果
      effectOptions:
        all: 全部
        noExecute: 不執行
        noSchedule: "不調度"
        preferNoSchedule: 傾向於不調度
      labelKey: 標籤鍵
      operator: 運算符
      operatorOptions:
        equal: =
        exists: 存在
      tolerationSeconds: "容忍（秒）"
      value: 值
  serviceAccountName:
    label: 服務賬號名稱
    createMessage: 此命名空間中不存在服務名稱 [ {name} ]，請手動創建它。
  serviceName: 服務名稱
  storage:
    subtypes:
      secret: 密文
      configMap: ConfigMap
      hostPath: Bind-Mount
      persistentVolumeClaim: 持久卷聲明
      createPVC: 創建持久卷聲明
      csi: CSI
      nfs: NFS
      awsElasticBlockStore: Amazon EBS 磁盤
      azureDisk: Azure 磁盤
      azureFile: Azure 文件
      gcePersistentDisk: Google 持久磁盤
      driver.longhorn.io: Longhorn
      vsphereVolume: VMWare vSphere 卷
      emptyDir: Empty Dir
    addClaim: 添加聲明
    addMount: 添加掛載
    addVolume: 添加捲
    certificate: 證書
    csi:
      diskName: 磁盤名稱
      diskURI: 磁盤 URI
      cachingMode:
        label: 緩存模式
        options:
          none: 無
          readOnly: 只讀
          readWrite: 讀寫
      kind:
        label: 類型
        options:
          dedicated: 專用
          managed: 託管
          shared: 共享
      drivers:
        driver.longhorn.io: Longhorn
      fsType: 文件系統類型
      shareName: 共享名稱
      secretName: 密文名稱
      volumeID: 卷 ID
      partition: 分區
      pdName: 持久磁盤名稱
      storagePolicyID: 存儲策略 ID
      storagePolicyName: 存儲策略名稱
      volumePath: 卷路徑
    defaultMode: 默認模式
    driver: 驅動
    hostPath:
      label: 節點上的路徑必須是：
      options:
        default: '任意路徑：不需要檢查目標路徑'
        directoryOrCreate: 一個目錄，如果該目錄不存在，則創建一個目錄
        directory: 一個現有的目錄
        fileOrCreate: 一個文件，如果該文件不存在，則創建一個文件
        file: 一個現有的文件
        socket: 一個現有的 socket
        charDevice: 一個現有的字符設備
        blockDevice: 一個現有的塊設備
    mountPoint: 掛載點
    nodePath: 節點上的路徑
    optional:
      label: 選填
      'no': '否'
      'yes': '是'
    path: 路徑
    readOnly: 只讀
    server: Server IP 地址
    subPath: 卷內子路徑
    title: '存儲'
    volumeName: 卷名稱
    volumePath: 卷路徑
    keyToPath:
      addAction: 添加項目
      default: 所有鍵
      header: 項目
      key:
        label: 鍵
        placeholder: '例如: username'
      mode:
        label: 模式
        placeholder: '例如: 400'
      path:
        label: 路徑
        placeholder: '例如: my-group/my-username'
      specific: 選擇特定的鍵
    noVolumes: 在 Pod 選項卡中添加捲後，卷將顯示在此處
    selectVolume: 選擇卷
    emptyDir:
      medium:
        default: 主機的默認存儲
        label: 存儲介質
        memory: 內存
      sizeLimit:
        label: 大小限制
        placeholder: '例如: 300'
  typeDescriptions:
    apps.daemonset: DaemonSet 在每個符合條件的節點上僅運行一個 Pod。當新節點添加到集羣時，DaemonSet 會自動部署新節點。推薦用於全系統或可垂直擴展，且每個節點永遠不需要超過一個 pod 的工作負載。
    apps.deployment: Deployment 運行分佈在符合條件的節點中的可擴展數量的 Pod 副本。變更會逐步推出，並可回滾到之前的版本。推薦用於無狀態和水平可擴展的工作負載。
    apps.statefulset: StatefulSet 管理有狀態的應用，並保證創建的 Pod 的順序和唯一性。推薦用於具有持久化存儲或嚴格身份、法定人數或升級順序要求的工作負載。
    batch.cronjob: CronJob 創建 Job，然後按照重複調度來運行 Pod。該調度以標準的 Unix cron 格式表示，並使用 Kubernetes Control Plane 的時區（通常是 UTC）。
    batch.job: Job 創建一個或多個 Pod。 Job 通過運行 Pod 直到其成功退出，以可靠執行一次性任務。失敗的 Pod 會自動被替換，直到達到指定的完成運行次數。Job 還可以並行運行多個 Pod，或作爲批處理工作隊列。
  upgrading:
    activeDeadlineSeconds:
      label: 判定 Pod 是否活躍的截止時間
      tip: 系統將 Pod 判定爲失敗，並終止其關聯容器前的等待時長
    concurrencyPolicy:
      label: 併發
      options:
        allow: 許多個 CronJob 併發運行
        forbid: 如果當前運行還沒有結束，則跳過下一個運行
        replace: 如果當前運行還沒有結束，則替換運行
    maxSurge:
      label: 最大 Pod 數量
      tip: 在給定時間內允許超出所需規模的最大 Pod 數量。
    maxUnavailable:
      label: 最大不可用數量
      tip: 在給定時間內的最大不可用 Pod 數量。
    minReadySeconds:
      label: 最短就緒時間
      tip: 在容器沒有崩潰的情況下，Pod 變爲可用的最短就緒時間。
    podManagementPolicy:
      label: Pod 管理策略
    progressDeadlineSeconds:
      label: 進程截止時間
      tip: 在標誌部署失敗之前，等待部署到進程的最短時間。
    revisionHistoryLimit:
      label: 修訂歷史記錄限制
      tip: 保留用於回滾的舊 ReplicaSet 的最大數量
    strategies:
      labels:
        delete: "刪除：只有在手動刪除舊 Pod 時纔會創建新 Pod"
        recreate: "重新創建：終止所有 Pod，然後啓動新 Pod。"
        rollingUpdate: "滾動升級：創建新 Pod，直到達到最大 Pod 數量（max surge）的值，然後再刪除舊 Pod。停用的 pod 數量不能超過設定的最大不可用數量。"
    terminationGracePeriodSeconds:
      label: 終止寬限期
      tip: 終止 Pod 前所需的等待時間
    title: 正在升級
  tabs:
    labels:
      containers: 容器
      deployment: Deployment
      pod: Pod
harvester:
  modal:
    backup:
      success: '已啓動備份 { backUpName }。'
      addBackup: 添加備份
    restore:
      success: '{ name } 還原創建成功。'
      title: 備份還原
      selectBackup: 選擇備份
      message:
        backup: 請選擇需要還原的備份。
    createTemplate:
      title: '生成模板'
      name: '名稱'
      description: '描述'
      message:
        tip: 請輸入模板名稱。
        success: '模板 { templateName } 創建成功。'
        failed: '生成模板失敗。'
    exportImage:
      title: 導出鏡像
      name: 名稱
      namespace: 命名空間
      message:
        success: '鏡像 { name } 創建成功。'
    migration:
      failedMessage: 最新遷移失敗。
      title: 遷移
      fields:
        nodeName:
          label: 目標節點
          placeholder: 選擇目標節點
    ejectCDROM:
      title: 彈出 CDROM
      warnTip: 如果你彈出卷，虛擬機將重啓。
      operationTip: '選擇要刪除的卷：'
      delete: 刪除
    bundle:
      title: 生成支持包
      url: Issue URL
      description: 描述
      requiredDesc: 描述是必填項。
      titleDescription: 收集 Harvester 系統日誌，用於定位問題和獲取支持。
    hotplug:
      success: '卷 { diskName } 已掛載到 { vm }。'
      title: 添加捲
    hotunplug:
      success: '卷 { name } 拔出成功。'
  notification:
    title:
      succeed: 成功
      info: 信息
      warning: 警告
      error: 錯誤
  action:
    createVM: 創建虛擬機
    start: 啓動
    restart: 重啓
    softreboot: 安全重啓
    stop: 停止
    pause: 暫停
    unpause: 取消暫停
    ejectCDROM: 彈出 CDROM
    launchFormTemplate: 從模板啓動實例
    modifyTemplate: 修改模板（創建新版本）
    setDefaultVersion: 設置默認版本
    addTemplateVersion: 添加模板版本
    backup: 備份
    restore: 還原
    restoreNewVM: 還原新的虛擬機
    restoreExistingVM: 替換現有虛擬機
    migrate: 遷移
    abortMigration: 中止遷移
    createTemplate: 生成模板
    enableMaintenance: 開啓維護模式
    disableMaintenance: 關閉維護模式
    cordon: 封鎖
    uncordon: 解除封鎖
    addHotplug: 添加捲
    exportImage: 導出鏡像
    viewlogs: 查看日誌
    cancelExpand: 取消展開
  tableHeaders:
    size: 大小
    progress: 進度
    message: 消息
    phase: 階段
    attachedVM: 掛載的虛擬機
    fingerprint: 唯一標識
    value: 值
    actions: 操作
    readyToUse: 可用
    backupTarget: 備份路徑
    targetVm: 目標虛擬機
    hostIp: 主機 IP
    vm:
      ipAddress: IP 地址
      node: 節點
      defaultVersion: 默認版本
    network:
      type: 類型
      vlan: Vlan ID
  tab:
    volume: 卷
    network: 網絡
    advanced: 高級選項
    accessCredentials: 憑證管理
  fields:
    version: 版本
    name: 名稱
    type: 類型
    image: 鏡像
    size: 大小
    volume: 卷
    network: 網絡
    model: 模式
    macAddress: MAC 地址
    port: 端口
    protocol: 協議
    remove: 刪除
    PhysicalNic: 物理網卡
    cpu: CPU
    memory: 內存
    virtualName: 虛擬機名稱
    promiscuous: Promiscuous
    ipv4Address: IPv4 地址
    filterLabels: 標籤過濾
  generic:
    close: 關閉
    open: 打開
    showMore: 顯示更多
    hideMore: 隱藏更多
    memory: 內存
    cpu: CPU
    storage: 存儲
    noFileChosen: 沒有選擇任何文件
  validation:
    custom:
      tooLongName: '"Name" 的長度不能超過{max}個字符。'
    vm:
      name: '"名稱"是必填項。'
      memory: '"內存"是必填項。'
      network:
        error: '網絡 {prefix}：{message}'
        name: '"網絡名稱"是必填項。'
        macFormat: 'MAC 地址格式不正確。'
        duplicatedName: '網絡名稱重複。'
        duplicatedPortName: '端口名重複。'
        duplicatedPortNumber: '端口號重複。'
      volume:
        error: '卷 {prefix}：{message}'
        duplicatedName: '卷名稱重複。'
        type: '"類型"是必填項。'
        size: '"大小"是必填項。'
        image: '"鏡像"是必填項。'
        volume: '"卷"是必填項。'
        docker: '"Docker 鏡像"是必填項。'
        needImageOrExisting: '至少需要一個鏡像卷或已存在的根磁盤卷。'
    image:
      ruleTip: 'URL 後綴不支持。僅支持後綴爲 .img，.iso，.qcow，.qcow2或.raw的鏡像文件。'
      ruleFileTip: '文件後綴不支持。僅支持後綴爲 .img，.iso，.qcow，.qcow2或.raw的鏡像文件。'
  dashboard:
    label: 儀表板
    header: "Harvester 集羣：{cluster}"
    hardwareResourceGauge:
      cpu: CPU
      memory: 內存
      storage: 存儲
    sections:
      events:
        label: 事件
      vmMetrics:
        label: 虛擬機指標
    upgrade:
      upgradeApp: 升級軟件
      upgrade: 升級
      upgradeTip: 請選擇目標升級版本
      currentVersion: 當前版本
      versionLabel: 可用的兼容版本
      upgradeNode: 升級節點
      upgradeSysService: 升級系統服務
    version: 版本
  host:
    label: 主機
    inconsistentIP: "主機 IP 不一致，當前 IP：{currentIP}，初始 IP：{initIP}"
    promote:
      none: ' '
      running: 角色升級中
      failed: 角色升級失敗
      unknown: 角色升級中斷
      promoteRestart: 角色升級重啓中
      promoteSucceed: 角色升級完成
    tabs:
      network: 網絡
      overview: 概述
      basics: 基本信息
      instance: 虛擬機
      monitor: 監控數據
      disk: 磁盤
      labels: 標籤
    detail:
      title:
        network: 網絡配置
      hostIP: 主機 IP
      role: 角色
      os: 操作系統
      create: 創建時間
      update: 上次更新時間
      customName: 自定義名稱
      consoleUrl: 控制檯地址
      more: 更多信息
      uuid: UUID
      containerRuntime: 容器運行時
      kernel: 內核
      management: 管理節點
      compute: 計算節點
      storage: 存儲
      nic: 物理網卡
      notRecommended: '不推薦'
      networkType: 類型
    enableMaintenance:
      title: 開啓維護模式
      protip: 該操作會將此節點上的所有虛擬機遷移到其他節點。
    cordon:
      title: 封鎖
      protip: 此操作會將節點 { node } 標記爲不可調度。
    disk:
      add: 添加磁盤
      path:
        label: 路徑
      storageReserved:
        label: 預留存儲空間
      allowScheduling:
        label: 調度
      evictionRequested:
        label: 驅逐請求
      forceFormatted:
        label: 強制格式化
        toolTip: 強制格式化將會清空磁盤數據。請確保你已對對數據進行備份，以免丟失。
        yes: 是（Ext4 文件系統）
      description:
        label: 描述
      lastFormattedAt:
        info: 此磁盤已被強制格式化。
      notification:
        success: '已更新主機“{name}”配置。'
      error: 主機有未就緒或不可調度的磁盤。
      fileSystem:
        info: 當前文件系統爲 {system}，你可以手動格式化。
  virtualizationManagement:
    manage: 管理
  virtualMachine:
    label: 虛擬機
    osType: 操作系統類型
    instance:
      singleInstance:
      multipleInstance:
      single:
        label: 單個實例
        nameLabel: 名稱
        host:
          label: 主機名
          placeholder: 默認爲虛擬機名稱。
      multiple:
        label: 多個實例
        nameNsDescription: 每個實例的名稱前綴
        count: 數量
        countTip: 範圍：1-10
        nameLabel: 名稱前綴
        host:
          label: 主機名前綴
          placeholder: 默認爲虛擬機名稱。
    useTemplate:
      label: "使用虛擬機模板："
      template:
        label: 模板
      version:
        label: 版本
    console:
      novnc: 在 Web VNC 中打開
      serial: 在串行控制檯中打開
    promptRemove:
      title: '選擇要刪除的卷：'
      deleteAll: 刪除全部
    unplug:
      title: '是否確認要拔出卷 {name} ？'
      actionLabel: 拔出
      detachVolume: 拔出卷
    restartTip: |-
      {restart, select,
        true {重啓}
        other {啓動}
      }虛擬機以使配置更改生效。
    runStrategy: 運行策略
    restartNow: "{restart, select,\n  true {現在重啓}\n  other {現在啓動}\n} "
    createSSHKey: 創建 SSH 密鑰
    installAgent: 安裝訪客代理
    enableUsb: 啓用 USB Tablet
    usbTip: 提供絕對指針設備，有助於在 VNC 中獲得一致的鼠標光標位置。
    sshTitle: 添加 SSH 公鑰
    imageTip: 創建虛擬機所需的.iso，.img，.qcow2或.raw外部鏡像地址
    efiEnabled: EFI 模式下啓動
    secureBoot: 安全啓動
    volume:
      dragTip: 拖放卷或使用卷的箭頭來更改引導順序。
      volumeTip: 虛擬機僅包含一個 cd-rom 卷。你可能想要添加額外的磁盤卷。
      macTip: "訪客系統內顯示的 MAC 地址"
      volumeUpdate: '卷 { name } 設置成功。'
      type: 類型
      size: 大小
      edit: 編輯
      bus: Bus
      bootOrder: 引導順序
      volume: 卷
      dockerImage: Docker 鏡像
      addVolume: 添加捲
      addExistingVolume: 添加現有卷
      addVmImage: 添加虛擬機鏡像
      addContainer: 添加容器
      setFirst: 設置爲根卷
      saveVolume: 更新卷
      title:
        vmImage: 鏡像卷
        existingVolume: 現有卷
        volume: 卷
        container: 容器
      unmount:
        title: 是否確認？
        message: 是否確認卸載此卷？
    network:
      title: 網絡
      addNetwork: 添加網絡
      addPort: 添加端口
    cloudConfig:
      title: Cloud Config
      createTemplateTitle: '創建 { name }。'
      createNew: 創建...
      cloudInit:
        label: Cloud Init
        placeholder: 選擇模板
      user:
        label: 用戶數據模板
        title: "用戶數據："
        tip: "你可以指定用戶數據，以在啓動時配置實例或運行配置腳本。如果一次啓動多個實例，所有預留實均能使用用戶數據。<a href='https://cloudinit.readthedocs.io/en/latest/topics/examples.html' target='_blank'>瞭解更多</a>"
      network:
        label: 網絡數據模板
        title: "網絡數據："
        tip: "通過分配子網配置，創建虛擬設備（bonds，bridges，Vlan）路由和 DNS 配置，來自定義實例的網絡接口。<a href='https://cloudinit.readthedocs.io/en/latest/topics/network-config-format-v1.html' target='_blank'>瞭解更多</a>"
    scheduling:
      affinity:
        anyNode: '在任何可用節點上運行虛擬機'
        schedulingRules: '在匹配調度規則的節點上運行虛擬機'
        specificNode: 在指定節點上運行虛擬機 -（不支持熱遷移）
    accessCredentials:
      resetPwd:
        label: 添加密碼憑證
      injectSSH:
        label: 添加 SSH 密鑰憑證
        users: 選擇用戶
        addUser: 添加用戶
      tips: 要啓用訪問憑證，你需要安裝 qemu-guest-agent。更新憑證內容後無需重啓，而添加憑證後需要重啓虛擬機。刪除憑證後，需要進入虛擬機手動修改密碼/刪除 SSH 密鑰。
      userTips: 添加的用戶需要存在，否則憑證不會生效。
      duplicatedUser: 用戶已存在。
      invalidUser: 無效的用戶名
    input:
      name: 名稱
      memory: 內存
      image: 鏡像
      sshKey: SSH 密鑰
      sshKeyValue: SSH 密鑰
      MachineType: 主機類型
      username: 用戶名
      password: 密碼
      reservedMemory: 預留內存
    machineTypeTip: '指定要模擬的處理器架構。要查看支持的體系結構列表，請運行：qemu-system-x86_64 -cpu ?'
    detail:
      tabs:
        overview: 概述
        details: 詳情
        environment: 環境
        events: 事件
        migration: 遷移
        console: 控制檯
        networkInterfaces: 網絡接口
        disks: 磁盤
        networks: 網絡
        basics: 基本信息
        configurations: 配置
        inventory: 清單
        hostBasic: 基本屬性
        instance: 虛擬機
        monitor: 監控數據
        keypairs: SSH 密鑰
        cloudConfig: Cloud Config
        metrics: 虛擬機指標
      details:
        title:
          vmDetails: 虛擬機詳情
          requirements: 調度和資源要求
          services: 服務
          users: 已登錄用戶
        name: 名稱
        namespace: 命名空間
        created: 創建時間
        hostname: 主機名
        node: 節點
        ipAddress: IP 地址
        status: 狀態
        pod: Pod
        labels: 標籤
        bootOrder: 引導順序
        annotations: 註釋
        CDROMs: CD-ROM
        description: 描述
        operatingSystem: 操作系統
        template: 模板
        kernelRelease: 內核版本
        owner: 所有者
        workloadProfile: 工作負載配置文件
        nodeSelector: 節點選擇器
        flavor: 規格
        tolerations: 容忍
        dedicatedResources: 專用資源
        down: 虛擬機未啓動
        affinityRules: 親和性規則
        sourceNode: 源節點
        targetNode: 目標節點
        started: 開始時間
        ended: 結束時間
      notAvailable: 不可用
      GuestAgentNotInstalled: 未安裝訪客代理
      noOwner: 沒有所有者
      events:
        from: 生成自
        down: 過去一小時沒有事件
      console:
        down: 此虛擬機已關閉。請啓動虛擬機以訪問其控制檯。
        shortKeys: 快捷鍵
  volume:
    label: 卷
    tabs:
      basics: 基本信息
    size: 大小
    source: 源
    sourceOptions:
      new: 創建
      vmImage: 虛擬機鏡像
    image: 鏡像
  image:
    label: 鏡像
    tabs:
      basics: 基本信息
    url: URL
    size: 大小
    urlTip: '支持被 <a href="https://www.qemu.org/docs/master/system/images.html#disk-image-file-formats" target="_blank">qemu</a> 支持的 <code>raw</code> 和 <code>qcow2</code> 鏡像格式。可引導的 ISO 鏡像也是類似 <code>raw</code> 格式的鏡像。'
    fileName: 文件名稱
    uploadFile: 上傳文件
    source: 源
    sourceType:
      download: URL
      upload: 文件
    warning:
      uploading: |-
        {count, plural,
        =1 {正在上傳一個鏡像。請不要刷新或關閉前頁面。}
        other {正在上傳{count}個鏡像。請不要刷新或關閉前頁面。}
        }
  vmTemplate:
    label: 模板
    tabs:
      basics: 基本信息
    nameNsDescription:
      name: 模板名稱
    tips:
      notExistImage:
        message: 請選擇一個新的鏡像。
        title: 鏡像 {name} 不存在。
  upgradePage:
    upgradeApp: 升級軟件
    upgrade: 升級
    upgradeTip: 請選擇目標升級版本
    currentVersion: 當前版本
    versionLabel: 可用的兼容版本
    upgradeNode: 升級節點
    upgradeSysService: 升級系統服務
    upgradeImage: 下載升級鏡像
    osUpgrade: 操作系統升級
    uploadNew: 上傳新鏡像
    selectExisting: 選擇現有鏡像
    createRepository: 創建升級倉庫
    succeeded: 成功
    pending: 等待
    repoInfo:
      upgradeStatus: 升級狀態
      os: 操作系統
      kubernetes: Kubernetes
      monitoringChart: Monitoring Chart
      harvesterChart: Harvester Chart
      success: 成功
      fail: 失敗
      ongoing: 進行中
    dismissMessage: 忽略
  backup:
    label: 備份
    createText: 還原備份
    title: 還原虛擬機
    backupTargetTip: 用於訪問備份存儲的端點。支持 NFS 和 S3。
    message:
      noSetting:
        prefix: 在創建新備份之前, 必須在
        middle: '設置'
        suffix: 中配置備份目標。
      errorTip:
        prefix: 非法的備份目標
        middle: 設置
        suffix: "。錯誤信息： "
      viewSetting:
        prefix: 點擊
        middle: 此處
        suffix: 查看備份配置。
    restore:
      backup: 備份
      deletePreviousVolumes: 刪除先前的卷
      createNew: 創建
      replaceExisting: 替換現有
      virtualMachineName: 虛擬機名稱
    matchTarget: 當前備份目標與現有目標不匹配。
  network:
    label: 網絡
    tabs:
      basics: 基本信息
      layer3Network: 路由
    message:
      vlanInactive: 'VLAN 網絡在 {name} 主機上處於非活動狀態'
      premise:
        prefix: '你需要先進行網絡'
        middle: '設置'
        suffix: '然後才能創建新網絡。'
      viewSetting:
        prefix: 點擊
        middle: 此處
        suffix: 查看默認集羣網絡配置。
      errorTip:
        prefix: 非法的物理網卡
        middle: 設置
        suffix: "。錯誤信息： "
    layer3Network:
      mode:
        label: 模式
        auto: 自動（DHCP）
        manual: 手動
      serverIPAddr:
        label: DHCP 服務器 IP
      gateway:
        label: 網關
        placeholder: 例如：172.16.0.1
      cidr:
        label: CIDR
        placeholder: 例如：172.16.0.1/24
  sshKey:
    label: SSH 密鑰
    keypair: SSH 密鑰
    tabs:
      basics: 基本信息
  setting:
    label: 設置
    validation:
      physicalNIC: 默認物理網卡
    placeholder:
      accessKeyId: 指定你的訪問密鑰 ID
      secretAccessKey: 指定你的密文訪問密鑰
      cert: 上傳自簽名 SSL 證書
    vlanChangeTip: 新修改的默認網絡接口僅在新增節點生效，不在現有節點生效。
    defaultPhysicalNIC: 默認網絡接口
    percentTip: 括號內的數值代表所有主機上的網絡接口的分佈比例。如果選擇了一個小於100%的接口，用戶需要手動指定 VLAN 網絡配置失敗的主機上的網絡接口。
    message:
      ca:
        prefix: '點擊'
        middle: '此處'
        suffix: '添加自定義證書。'
    sslCertificates:
      publicCertificate: 公共證書
      privateKey: 私鑰
      ca: CA
    vmForceDeletionPolicy:
      period: 週期
    supportBundleImage:
      imagePullPolicy: 鏡像拉取策略
      repo: 倉庫
      tag: 標籤
    upgrade:
      selectExitImage: 請選擇要升級的操作系統鏡像。
      imageUrl: 請輸入有效的圖片網址。
      chooseFile: 請選擇上傳圖片。
      checksum: 校驗和
    harvesterMonitoring:
      label: Harvester Monitoring
      section:
        prometheus: Prometheus 配置
        prometheusNodeExporter: Prometheus Node Exporter 配置
      tips:
        scrape: 每次採集數據的間隔時間
        evaluation: 每次評估規則的間隔時間
        retention: 監控數據保留時間
        retentionSize: 監控數據最大佔用存儲
  cloudTemplate:
    label: Cloud Config 模板
    templateType: 模板類型
    userData: 用戶數據
    networkData: 網絡數據
  manager:
    cluster:
      label: Harvester 集羣
      none: 不存在 Harvester 集羣
      learnMore: 訪問 <a target="_blank" href="https://harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester 網站</a> 或閱讀 <a target="_blank" href="https://docs.harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester 官方文檔</a>，以瞭解更多關於 Harvester 的信息。
      description: Harvester 是一個採用企業級開源技術，包括Kubernetes、Kubevirt和Longhorn，爲裸金屬服務器打造的現代超融合基礎設施（HCI）解決方案。
  support:
    title: Harvester 支持
    kubeconfig:
      title: 下載 KubeConfig
      titleDescription: 下載 Kubeconfig 用於調試。
  namespace:
    label: 命名空間
  projectNamespace:
    label: 項目/命名空間
  service:
    title: 附加配置
    ipam:
      label: IPAM
    healthCheckPort:
      label: 健康檢查端口
    healthCheckSuccessThreshold:
      label: 健康檢查成功闕值
      description: 如果探針連續檢測到某個地址的成功次數達到成功閾值，後端服務器就可以開始轉發流量。
    healthCheckFailureThreshold:
      label: 健康檢查失敗閾值
      description: 如果健康檢查失敗的數量達到失敗閾值，後端服務器將停止轉發流量。
    healthCheckPeriod:
      label: 健康檢查週期
    healthCheckTimeout:
      label: 健康檢查超時
    healthCheckEnabled:
      label: 健康檢查
  vip:
    namespace:
      label: 命名空間
    cidr:
      label: CIDR
      invalid: '"CIRD" 無效。'
    add:
      label: 添加 IP 池
  sslParameters:
    protocols:
      label: 協議
    ciphers:
      label: 密碼
##############################
# Model Properties
##############################
model:
  account:
    kind:
      admin: 管理員
      agent: Agent
      project: 環境
      registeredAgent: 註冊代理
      service: 服務
      user: 用戶名
  "catalog.cattle.io.app":
    firstDeployed: 首次部署
    lastDeployed: 最後部署
  authConfig:
    description:
      ldap: LDAP
      saml: SAML
      oauth: OAuth
      oidc: OIDC
    name:
      keycloak: Keycloak (SAML)
      keycloakoidc: Keycloak (OIDC)
    provider:
      system: 系統
      local: 本地
      multiple: Multiple
      activedirectory: Active Directory
      azuread: AzureAD
      github: GitHub
      keycloak: Keycloak
      ldap: LDAP
      openldap: OpenLDAP
      shibboleth: Shibboleth
      ping: Ping Identity
      adfs: ADFS
      okta: Okta
      freeipa: FreeIPA
      googleoauth: Google
      oidc: OIDC
      keycloakoidc: Keycloak
      cas: CAS
  cluster:
    name: 集羣名稱
  ingress:
    displayKind: L7 Ingress
  machine:
    role:
      controlPlane: Control Plane
      etcd: ETCD
      worker: Worker
  openldapconfig:
    domain:
      help: 只有此庫下的用戶能正常登錄。
      label: 用戶搜索庫
      placeholder: "例如：ou=Users,dc=mycompany,dc=com"
    server:
      label: 主機名或 IP 地址
    serviceAccountPassword:
      label: 服務賬號密碼
    serviceAccountUsername:
      label: 服務賬號用戶名
  projectMember:
    role:
      member: 成員
      owner: 所有者
      readonly: 只讀用戶
      restricted: 受限
  service:
    displayKind:
      generic: 服務
      loadBalancer: L4 負載均衡
typeDescription:
  # Map of
  # type: Description to be shown on the top of list view describing the type.
  #       Should fit on one line.
  #       If you link to anything external, it MUST have
  #       target="_blank" rel="noopener noreferrer nofollow"
  chart: "除非另有說明，否則所有 Chart 都至少有一個可以安裝在具有 Linux 和 Windows 節點的集羣上的版本。"
  cis.cattle.io.clusterscanbenchmark: Benchmark 版本是指使用 kube-bench 運行的 Benchmark 名稱，以及該 Benchmark 的有效配置參數。
  cis.cattle.io.clusterscanprofile: 配置文件指定 CIS 掃描的配置，也就是要使用的 Benchmark 版本和該 Benchmark 中要跳過的特定測試。
  cis.cattle.io.clusterscan: 掃描是用來根據定義的配置文件，在集羣上觸發 CIS 掃描的。掃描完成後會創建一份報告。
  cis.cattle.io.clusterscanreport: 報告是集羣 CIS 掃描的結果。
  management.cattle.io.feature: 功能開關用於打開或關閉某些 {vendor} 功能。默認關閉的功能是實驗功能。
  cluster.x-k8s.io.machine: 一個 Machine 封裝一個 Kubernetes 節點的配置。你可以使用此視圖，來查看更新集羣后的情況。
  cluster.x-k8s.io.machinedeployment: Machine Deployment 通過使用模板，在一組 Machine Set（與 Deployment 類似）上編排部署。你可以使用此視圖，來查看更新集羣后的情況。
  cluster.x-k8s.io.machineset: Machine Set 確保所需數量的 Machine 始終啓動並運行（與 ReplicaSet 類似）。你可以使用此視圖，來查看更新集羣后的情況。
  resources.cattle.io.backup: 創建備份是爲了基於 ResourceSet 執行一次性備份或安排重複性備份。
  resources.cattle.io.restore: 創建還原用於根據備份文件觸發對集羣的還原。
  resources.cattle.io.resourceset: Resource Set 定義要在備份中存儲哪些 CRD 和資源。
  monitoring.coreos.com.servicemonitor: Service Monitor 定義了 Prometheus 要抓取的服務組和端點。這是定義指標集合的最常見方法。
  monitoring.coreos.com.podmonitor: PodMonitor 定義了 Prometheus 要抓取指標的 Pod 組。更爲常用的是 ServiceMonitor。然而，PodMonitor 讓你在 ServiceMonitor 不起作用時，處理任何其他情況。
  monitoring.coreos.com.prometheusrule: PrometheusRule 定義了記錄和/或告警規則。記錄規則可以預先計算值並保存結果。告警規則允許你定義向 AlertManager 發送通知的條件。
  monitoring.coreos.com.prometheus: Prometheus server 是一個 Prometheus deployment，其抓取的配置和規則由選定的 ServiceMonitor、PodMonitor 和 PrometheusRule 決定。它將其告警信息發送給所有選擇的具有定製資源配置的 AlertManager。
  monitoring.coreos.com.alertmanager: Alertmanager 是一個 deployment。其配置由同一命名空間中的密文指定，該密文決定了告警的接收器。
  node: Kubernetes 節點資源展示了承載 Deployment 的虛擬機或物理機。請進入"集羣管理"頁面管理可用節點的生命週期。
  catalog.cattle.io.clusterrepo: 'Chart 倉庫是一個 Helm 倉庫或 {vendor} 基於 Git 的應用商店。此處列出了集羣中可用的 Chart。'
  catalog.cattle.io.clusterrepo.local: ' Chart 倉庫是一個 Helm 倉庫或 {vendor} 基於 Git 的應用商店。此處列出了集羣中可用的 Chart。集羣模板是通過 Helm Chart 部署的。'
  catalog.cattle.io.operation: 最近的操作指的是最近應用於集羣的一系列 Helm 操作。
  catalog.cattle.io.app: 已安裝的應用指的是通過我們的 Chart 或 Helm CLI 安裝的 Helm 3 Chart。
  logging.banzaicloud.io.clusterflow: 集羣日誌將被收集並投遞到選定的 ClusterOutput 中。
  logging.banzaicloud.io.clusteroutput: ClusterOutput 定義了日誌可以發送到哪些日誌提供程序。只有部署在 Logging operator 所在的命名空間中時，ClusterOutput 才生效。
  logging.banzaicloud.io.flow: Flow 定義了要收集和過濾的日誌，以及日誌的輸出目標。Flow 是一個命名空間資源。換言之，只有部署了該 Flow 的命名空間日誌才能被該 Flow 收集。
  logging.banzaicloud.io.output: Output 定義了日誌可以發送到哪些日誌提供程序。Output 需要與使用它的 Flow 位於相同的命名空間中。
  group.principal: 爲組分配全局角色的操作，僅適用於支持組的外部驗證提供程序。本地授權不支持組。
  branding: 管理員可以修改 Rancher 產品名稱、Logo 和配色方案來全局自定義 UI 界面。
typeLabel:
  management.cattle.io.token: |-
    {count, plural,
      one { API 密鑰 }
      other { API 密鑰 }
    }
  cis.cattle.io.clusterscan: |-
    {count, plural,
      one { 掃描 }
      other { 掃描 }
    }
  cis.cattle.io.clusterscanprofile: |-
    {count, plural,
      one { 配置文件 }
      other { 配置文件 }
    }
  cis.cattle.io.clusterscanbenchmark: |-
    {count, plural,
      one { Benchmark 版本 }
      other { Benchmark 版本 }
    }
  catalog.cattle.io.operation: |-
    {count, plural,
      one { 最近的操作 }
      other { 最近的操作 }
    }
  catalog.cattle.io.app: |-
    {count, plural,
      one { 已安裝的應用 }
      other { 已安裝的應用 }
    }
  catalog.cattle.io.clusterrepo: |-
    {count, plural,
      one { Chart 倉庫 }
      other { Chart 倉庫 }
    }
  catalog.cattle.io.repo: |-
    {count, plural,
      one { 命名空間倉庫 }
      other { 命名空間倉庫 }
    }
  chartinstallaction: |-
    {count, plural,
      one { 應用 }
      other { 應用 }
    }
  chartupgradeaction: |-
    {count, plural,
      one { 應用 }
      other { 應用 }
    }
  cloudcredential: |-
    {count, plural,
      one { 雲憑證}
      other { 雲憑證 }
    }
  endpoints: |-
    {count, plural,
      one { 端點 }
      other { 端點 }
    }
  fleet.cattle.io.cluster: |-
    {count, plural,
      =1 { 集羣 }
      other { 集羣 }
    }
  fleet.cattle.io.clustergroup: |-
    {count, plural,
      one { 集羣組 }
      other { 集羣組 }
    }
  fleet.cattle.io.gitrepo: |-
    {count, plural,
      one { Git 倉庫 }
      other {Git 倉庫 }
    }
  management.cattle.io.authconfig: |-
    {count, plural,
      one { 認證 }
      other { 認證 }
    }
  management.cattle.io.clusterroletemplatebinding: |-
    {count, plural,
      one { 集羣成員 }
      other { 集羣成員 }
    }
  management.cattle.io.feature: |-
    {count, plural,
      one { 功能開關 }
      other { 功能開關 }
    }
  management.cattle.io.setting: |-
    {count, plural,
      one { 設置 }
      other { 設置 }
    }
  management.cattle.io.fleetworkspace: |-
    {count, plural,
      one { 工作空間 }
      other { 工作空間 }
    }
  # pruh-mee-thee-eyes https://www.prometheus.io/docs/introduction/faq/#what-is-the-plural-of-prometheus
  monitoring.coreos.com.prometheus: |-
    {count, plural,
      one { Prometheus }
      other { Prometheus }
    }
  monitoring.coreos.com.servicemonitor: |-
    {count, plural,
      one { ServiceMonitor }
      other { ServiceMonitor }
    }
  monitoring.coreos.com.alertmanager: |-
    {count, plural,
      one { Alertmanager }
      other { Alertmanager }
    }
  monitoring.coreos.com.podmonitor: |-
    {count, plural,
      one { PodMonitor }
      other { PodMonitor }
    }
  monitoring.coreos.com.prometheusrule: |-
    {count, plural,
      one { PrometheusRule }
      other { PrometheusRule }
    }
  monitoring.coreos.com.thanosruler: |-
    {count, plural,
      one { Thanos 規則 }
      other { Thanos 規則 }
    }
  monitoring.coreos.com.receiver: |-
    {count, plural,
      one { 接收器 }
      other { 接收器 }
    }
  monitoring.coreos.com.route: |-
    {count, plural,
      one { 路由 }
      other { 路由 }
    }
  'management.cattle.io.cluster': |-
    {count, plural,
      one { 管理集羣 }
      other { 管理集羣 }
    }
  'cluster.x-k8s.io.cluster': |-
    {count, plural,
      one { CAPI 集羣 }
      other { CAPI 集羣 }
    }
  'provisioning.cattle.io.cluster': |-
    {count, plural,
      one { 集羣 }
      other { 集羣 }
    }
  'management.cattle.io.user': |-
    {count, plural,
      one { 用戶 }
      other { 用戶 }
    }
  namespace: |-
    {count, plural,
      one { 命名空間 }
      other { 命名空間 }
    }
  node: |-
    {count, plural,
      one { 節點 }
      other { 節點 }
    }
  group.principal: |-
    {count, plural,
      one { 組 }
      other { 組 }
    }
  token: |-
    {count, plural,
      one { API 密鑰 }
      other { API 密鑰 }
    }
  workload: |-
    {count, plural,
      one { 工作負載 }
      other { 工作負載 }
    }
  kubevirt.io.virtualmachine: |-
    {count, plural,
      one { 虛擬機 }
      other { 虛擬機 }
    }
  harvesterhci.io.virtualmachineimage: |-
    {count, plural,
      one { 鏡像 }
      other { 鏡像 }
    }
  harvesterhci.io.keypair: |-
    {count, plural,
      one { SSH 密鑰 }
      other { SSH 密鑰 }
    }
  harvesterhci.io.host: |-
    {count, plural,
      one { 主機 }
      other { 主機 }
    }
  k8s.cni.cncf.io.networkattachmentdefinition: |-
    {count, plural,
      one { 網絡附加定義 }
      other { 網絡附加定義 }
    }
  harvesterhci.io.networkattachmentdefinition: |-
    {count, plural,
      one { 網絡 }
      other { 網絡 }
    }
  harvesterhci.io.volume: |-
    {count, plural,
      one { 卷 }
      other { 卷 }
    }
  harvesterhci.io.user: |-
    {count, plural,
      one { 用戶 }
      other { 用戶 }
    }
  harvesterhci.io.setting: |-
    {count, plural,
      one { 設置 }
      other { 設置 }
    }
  harvesterhci.io.virtualmachinetemplateversion: |-
    {count, plural,
      one { 模板 }
      other { 模板 }
    }
  harvesterhci.io.virtualmachinebackup: |-
    {count, plural,
      one { 備份 }
      other { 備份 }
    }
  harvesterhci.io.management.cluster: |-
    {count, plural,
      one { Harvester 集羣 }
      other { Harvester 集羣 }
    }
  harvesterhci.io.cloudtemplate: |-
    {count, plural,
      one { Cloud Config 模板 }
      other { Cloud Config 模板 }
    }
  fleet.cattle.io.bundle: |-
    {count, plural,
      one { Bundle }
      other { Bundle }
    }
  fleet.cattle.io.clusterregistrationtoken: |-
    {count, plural,
      one { 集羣註冊 Token }
      other { 集羣註冊 Token }
    }
  event: |-
    {count, plural,
      one { 事件 }
      other { 事件 }
    }
  secret: |-
    {count, plural,
      one { 密文 }
      other { 密文 }
    }
  serviceaccount: |-
    {count, plural,
      one { 服務賬戶 }
      other { 服務賬戶 }
    }
  service: |-
    {count, plural,
      one { 服務 }
      other { 服務 }
    }
  management.cattle.io.apiservice: |-
    {count, plural,
      one { API 服務 }
      other { API 服務 }
    }
  management.cattle.io.catalog: |-
    {count, plural,
      one { 應用商店 }
      other { 應用商店 }
    }
  management.cattle.io.nodedriver: |-
    {count, plural,
      one { 主機驅動 }
      other { 主機驅動 }
    }
  management.cattle.io.node: |-
    {count, plural,
      one { 節點 }
      other { 節點 }
    }
  rbac.authorization.k8s.io.clusterrole: |-
    {count, plural,
      one { 集羣角色 }
      other { 集羣角色 }
    }
  rbac.authorization.k8s.io.role: |-
    {count, plural,
      one { 角色 }
      other { 角色 }
    }
  storage.k8s.io.storageclass: |-
    {count, plural,
      one { 存儲類 }
      other { 存儲類 }
    }
  persistentvolume: |-
    {count, plural,
      one { 持久卷 }
      other { 持久卷 }
    }
  persistentvolumeclaim: |-
    {count, plural,
      one { 持久卷聲明 }
      other { 持久卷聲明 }
    }
  configmap: |-
    {count, plural,
      one { 配置映射 }
      other { 配置映射 }
    }
  policy.podsecuritypolicy: |-
    {count, plural,
      one { Pod 安全策略 }
      other { Pod 安全策略 }
    }
  storage.k8s.io.csinode: "{count, plural,\n  one { CSI 節點 }\n  other { CSI 節點 }\n} "
  helm.cattle.io.projecthelmchart: |-
    {count, plural,
      one { 項目監控 }
      other { 項目監控 }
    }
  monitoring.coreos.com.alertmanagerconfig: |-
    {count, plural,
      one { AlertmanagerConfig }
      other { AlertmanagerConfig }
    }
action:
  clone: 克隆
  disable: 禁用
  download: 下載 YAML
  downloadFile: 下載文件
  edit: 編輯配置
  editYaml: 編輯 YAML
  enable: 啓用
  openLogs: 查看日誌
  refresh: 刷新
  remove: 刪除
  view: 查看配置
  viewInApi: 在 API 中查看
  viewYaml: 查看 YAML
  activate: 激活
  deactivate: 停用
  show: 顯示
  hide: 隱藏
  copy: 複製
  unassign: '取消分配'
  uninstall: 卸載
  redeploy: 重新部署
  addSidecar: 添加 Sidecar
  rollback: 回滾
  openShell: 執行命令行
  runNow: 立即運行
  suspend: 暫停
  resume: 重新開始
  forceUpdate: 強制更新 Machine Plan
unit:
  sec: 秒
  min: 分鐘
  hour: |-
    {count, plural,
      one { 小時 }
      other { 小時 }
    }
  day: |-
    {count, plural,
      one { 天 }
      other { 天 }
    }
workloadPorts:
  addPort: 添加端口
  remove: 移除
  addHost: 添加主機
podAffinity:
  addLabel: 添加 Pod 選擇器
keyValue:
  keyPlaceholder: 例如：foo
  valuePlaceholder: 例如：bar
  protip: '把多行 <em>key=value</em> 或 <em>key: value</em> 鍵值對複製到各字段中，以便批量輸入'
registryMirror:
  header: Mirror
  toolTip: 'Mirror 可用來重定向來自一個倉庫的鏡像請求，使其來自你指定的端點列表。例如，你可以把 docker.io 指向到只和你的內部倉庫通信，而不是通過互聯網訪問實際的 DockerHub。'
  addLabel: 添加 Mirror
  valueProtip: 鏡像端點應該包含協議頭
  valuePlaceholder: 例如：https://a.registry.com:5000, https://b.registry.com:5000
  keyPlaceholder: 例如：docker.io 或 *
registryConfig:
  header: 倉庫驗證
  toolTip: '當需要從給定的鏡像倉庫主機名中拉取鏡像時，此信息將用於識別並驗證倉庫。'
  addLabel: 添加鏡像倉庫
modalDownLoadFileComponent:
  title: 容器文件下載
  container: 容器
  filePath: 文件路徑
  placeholder: 請輸入容器中的文件路徑
  notice: 下載超過 600MiB 的文件有可能導致瀏覽器崩潰
  validateContainer: 請選擇容器
  validatePath: 請輸入要下載文件的路徑
  noSuchFile: 文件不存在
  serverError: 服務端發生錯誤
##############################
### Advanced Settings
##############################
advancedSettings:
  label: 設置
  subtext: 一般用戶不需要修改此處的設置。請謹慎操作，不正確的值會破壞 {appName} 的安裝。與默認不同的設置會標記爲 "Modified"。如果這裏沒有您需要的配置項，請查看<a href="/v3/setting" target="_blank">更多設置</a>。
  show: 顯示
  hide: 隱藏
  none: 無
  edit:
    label: 編輯設置
    changeSetting: "修改設置："
    trueOption: "True"
    falseOption: "False"
    value: 值
    useDefault: 使用默認值
    invalidJSON: 無效的 JSON - 請先檢查並修改你輸入的值，然後再保存。
  descriptions:
    'cacerts': "驗證服務器證書所需的 CA 證書。"
    'cluster-defaults': '創建新集羣時覆蓋 RKE 默認值。'
    'engine-install-url': '默認的 Docker 引擎安裝 URL（用於大多數主機驅動）。'
    'engine-iso-url': '默認操作系統安裝 URL（用於 vSphere 驅動）。'
    'engine-newest-version': '此版本發佈時最新支持的 Docker 版本。不在支持範圍，但比此版本更新的 Docker 版本，會被標記爲未測試。'
    'engine-supported-range': '支持的 Docker 引擎版本的 Semver 範圍。不在此範圍內的版本將在 UI 中標記爲不支持。'
    'ingress-ip-domain': '用於自動生成 Ingress 主機名的通配符 DNS 域。<ingress-name>.<namespace-name>.<ip address of ingress controller> 會被添加到該域。'
    'server-url': '默認 {appName} 安裝地址。必須使用 HTTPS。你集羣中的所有節點都必須能夠訪問此地址。'
    'system-default-registry': '用於所有系統 Docker 鏡像的私有倉庫。'
    'ui-index': 'Cluster Manager UI 的 HTML 索引位置。'
    'ui-dashboard-index': '{appName} UI 的 HTML 索引位置。'
    'ui-offline-preferred': '控制 UI 資產是由服務器容器在本地提供，還是從 ui-index 和 ui-dashboard-index 設置中定義的遠程 URL 提供。`動態` 選項將在 {appName} 的生產版本中使用本地資產。'
    'ui-pl': '自有品牌公司名稱。'
    'ui-issues': "使用 URL 地址發送新的\"提交問題\"報告，而不是讓用戶發送到 GitHub Issue 頁面。"
    'telemetry-opt': '遙測報告加入。'
    'auth-user-info-max-age-seconds': '在同步驗證提供程序組成員之前，用戶驗證 Token 的最長存活時間。'
    'auth-user-info-resync-cron': '重新同步驗證提供程序組成員的默認 cron 調度。'
    'cluster-template-enforcement': '非管理員只能通過預先批准的 RKE 模板啓動集羣。'
    'auth-user-session-ttl-minutes': '用戶認證會話的自定義 TTL（單位：分鐘）。'
    'auth-token-max-ttl-minutes': '所有身份驗證 Token 的最大 TTL（單位：分鐘）。如果設置爲 0，則 Token 永不過期。'
    'kubeconfig-generate-token': '請求 kubeconfig 時自動爲用戶生成 Token。'
    'kubeconfig-token-ttl-minutes': '在 CLI 中生成的 Token TTL。已棄用：此設置將被刪除，kubeconfig-default-token-ttl-minutes 將用於所有 kubeconfig Token。'
    'rke-metadata-config': '配置 RKE 元數據刷新參數。'
    'ui-banners': '分類橫幅用於在頁眉、頁腳或兩者中顯示自定義的固定橫幅。'
    'ui-consent-banner': '橫幅用於在登錄期間，向用戶展示自定義同意橫幅。'
    'ui-default-landing': '用戶登錄後的默認頁面。'
    'brand': 在'/assets/brand'中定義，用於替代主題的文件夾名稱
    'harv-vlan': VLAN 網絡的默認網絡接口名稱。
    'harv-backup-target': 用於存儲虛擬機備份的自定義備份目標。
    'harv-log-level': 配置 Harvester server 日誌級別。默認級別爲 info。
    'harv-server-version': Harvester server 版本。
    'harv-upgrade-checker-enabled': 是否啓用 Harvester 升級檢查。默認值爲 true。
    'harv-upgrade-checker-url': 默認 Harvester 升級檢查 URL。只有當 <code>upgrade-checker-enabled</code>  設置爲 true 時可使用。
    'harv-ui-source': 配置加載 UI 資源方式。
    'harv-ui-index': 'UI 的 HTML 索引位置。'
    'harv-cluster-registration-url': 用於多集羣管理的註冊 URL。
    'harv-http-proxy': '用於 Harvester 訪問外部服務的 HTTP 代理。'
    'harv-additional-ca': '用於 TLS 驗證的自定義 CA 根證書。'
    'harv-overcommit-config': '資源超額配置。'
    'harv-vip-pools': '使用 CIDR 配置 VIP 的全局或命名空間 IP 地址池。'
    'harv-support-bundle-timeout': '支持包超時配置（單位：分鐘），你可以使用0禁用超時。'
    'harv-vm-force-reset-policy': 配置當虛擬機卡在停機的節點上時的強制重置動作。
    'harv-ssl-parameters': 用於 TLS 驗證的自定義 SSL 參數。
    'harv-support-bundle-namespaces': 指定支持包要收集的其他命名空間中的資源。
    'harv-auto-disk-provision-paths': 指定 Harvester 將自動添加爲虛擬機存儲的磁盤（使用 glob 模式）。
    'harv-support-bundle-image': 支持捆綁鏡像配置。前往 <a href="https://hub.docker.com/r/rancher/support-bundle-kit/tags" target="_blank">rancher/support-bundle-kit</a> 查看更多版本。
    'harvester-monitoring': 指定 Harvester 內置的 Prometheus 將使用的監控配置。
    ui-footer-text: 額外的頁腳內容
    ui-footer-url: 額外頁腳內容對應的鏈接
    auditlog-server-url: 配置審計日誌服務地址。
    disable-password-encrypt: 禁用密碼加密。
    download-file-size-limit: 容器文件下載大小限制（以Mi爲單位）。
    hide-local-cluster: 隱藏 local 集羣
    pandaria-enable-healthcheck-api: 啓用Rancher local api-server健康檢查。
    restricted-default-admin: 初始化管理員角色是否使用受限管理員權限，權限說明請查看<a href="http://docs.rancher.cn/docs/rancher2.5/admin-settings/rbac/global-permissions/_index/#%E5%8F%97%E9%99%90%E7%AE%A1%E7%90%86%E5%91%98" target="_blank">這裏</a>。
    rotate-certs-if-expiring-in-days: 設置Rancher Server提前輪換證書的時間（以天爲單位）。
    system-catalog: 配置 Rancher 使用 System Chart Repo。
    ui-brand: 定義在 /assets/brand 中的替代主題的文件夾名稱。
    ui-session-logout-minutes: 用戶超過配置時間沒有任何操作將自動註銷(以分鐘爲單位)。
    custom-notifications: 編輯自定義通知
    harv-release-download-url: 此設置用於配置<code>升級版本下載</code>的 URL 地址。Harvester 將從該 URL 託管的 (<code>$URL</code>/<code>$VERSION</code>/version.yaml) 文件中獲取 ISO URL 和校驗和值。
    kubeconfig-default-token-ttl-minutes: 應用於所有 kubeconfig Token 的 TTL（單位：分鐘）。如果設置爲 0，則 Token 永不過期。
    password-min-length: 定義用戶密碼所需的最少字符數。
  editHelp:
    'ui-banners': 此設置使用包含 3 個根參數的 JSON 對象，分別是<code>banner</code>、<code>showHeader</code>和<code>showFooter</code>。<code>banner</code> 是包含 <code>textColor</code>，<code>background</code>和<code>text</code>的對象，其中<code>textColor</code> 和 <code>background</code>的值可以是任何有效的 CSS 顏色值。
  enum:
    'ui-default-landing':
      ember: Cluster Manager
      vue: 集羣瀏覽器
    'telemetry-opt':
      prompt: 提示
      in: 加入遙測
      out: 退出遙測
    'ui-offline-preferred':
      dynamic: 動態
      true: 本地
      false: 遠端
    'harv-ui-source':
      auto: '自動'
      bundled: '包'
      external: '外部'
    'harv-log-level':
      info: 信息
      debug: 調試
      trace: 跟蹤
    system-catalog:
      bundled: 'Bundled'
      external: 'External'
featureFlags:
  label: 功能開關
  warning: |-
    功能開關允許 {vendor} 將某些功能隱藏在開關後面。
    默認關閉的功能是實驗功能。
    某些功能需要重啓 {vendor} server 才能更改。
    這將導致 API 和 UI 短暫中斷，但不會影響正在運行的集羣或工作負載。
  promptActivate: 確認是否要激活功能開關“{flag}”
  promptDeactivate: 確認是否要停用功能開關“{flag}”
  restartRequired: "注意：你需要重啓以更新此功能開關。"
  restart:
    title: 等待重啓
    wait: 重啓需要數分鐘。
  description:
    harvester: 接入 Harvester，以導入和管理 Harvester 集羣
    unsupported-storage-drivers: 允許使用非默認啓用的存儲提供商和卷插件
    legacy: 啓用舊版功能
    istio-virtual-service-ui: 暴露了一個用戶界面，使用戶能夠創建、讀取、更新和刪除虛擬服務和目標規則，這是 Istio 的流量管理功能。
    token-hashing: 啓用 Token 的單程 hash。一旦啓用 Token hash 就不能被禁用。
    continuous-delivery: Fleet 中的 Gitops 組件
    fleet: 啓動 Rancher 時安裝 Fleet
    multi-cluster-management: Kubernetes 集羣的多集羣配置和管理。
    rke2: 啓用 RKE2
banner:
  label: 固定橫幅
  settingName: 橫幅
  headerBanner: 標題橫幅
  footerBanner: 頁腳橫幅
  loginScreenBanner: 登錄屏幕橫幅
  text: 文本
  buttonText: 同意按鈕文本
  textColor: 文本顏色
  background: 背景顏色
  showHeader: 在頁眉中顯示橫幅
  showFooter: 在頁腳中顯示橫幅
  showConsent: 在登錄頁面顯示同意橫幅
  showAsDialog:
    defaultButtonText: 同意
    label: 將登錄同意顯示爲模式對話框
    tooltip: 在登錄屏幕上顯示一個模式對話框，用戶必須先接受該對話框才能登錄
  bannerAlignment:
    label: 文字對齊
    leftOption: 左對齊
    centerOption: 居中
    rightOption: 右對齊
  bannerDecoration:
    label: 文字裝飾
    bannerBold: 加粗
    bannerItalic: 斜體
    bannerUnderline: 下劃線
  bannerFontSize:
    label: '字體大小'
  consent: 同意橫幅
  consentFootnote: "提示：使用 \n 進行換行"
branding:
  label: 品牌
  directoryName: 品牌資產目錄名稱
  logos:
    label: Logo
    tip: '上傳 Logo 以替換頂層導航標題中的 Rancher logo。圖片的高度應爲 21 像素，最大寬度爲 200 像素。最大文件大小爲 20KB'
    lightPreview: 淺色主題預覽
    darkPreview: 深色主題預覽
    uploadLight: 上傳淺色 Logo
    uploadDark: 上傳深色 Logo
    useCustom: 使用自定義 Logo
  options:
    default: 默認 Rancher 主題
    suse: SUSE 主題
    custom: 自定義主題
  uiPL:
    label: 自有品牌
  uiIssues:
    label: 支持鏈接
    issuesUrl: 問題報告 URL
    invalidUrl: 必須是包括協議頭的完整 URL。
    communityLinks: 顯示 Rancher 社區支持鏈接
  color:
    label: 主顏色
    tip: 使用自定義顏色替換整個 UI 中使用的主顏色。
    useCustom: 使用自定義顏色
  linkColor:
    label: 鏈接顏色
    tip: 使用自定義鏈接顏色替換整個 UI 中使用的鏈接顏色。
    useCustom: 使用自定義鏈接顏色
    example: 鏈接示例
  favicon:
    label: 網站圖標
    preview: 網站圖標預覽
    tip: '上傳一個網站圖標來替換瀏覽器選項卡中的 Rancher 圖標。最大文件大小爲 20KB'
    upload: 上傳網站圖標
    useCustom: 使用自定義網站圖標
  loginLandscape:
    label: 登錄頁面的背景圖
    preview: 背景圖預覽
    tip: 上傳一個圖片或SVG來替換登錄頁面的默認背景圖片. 文件最大 100KB
    upload: 上傳背景圖
    useCustom: 使用自定義登錄頁面背景圖
resourceQuota:
  label: 資源配額
  headers:
    limit: 限制
    namespaceDefaultLimit: 命名空間默認限制
    projectLimit: 項目限制
    projectResourceAvailability: 項目資源可用性
    resourceType: 資源類型
  helpText: 配置整個命名空間可用的資源量。
  helpTextDetail: 整個命名空間可以使用的資源量。
  configMaps: ConfigMaps
  limitsCpu: CPU 限制
  limitsMemory: 內存限制
  persistentVolumeClaims: 持久卷聲明
  pods: Pod
  replicationControllers: ReplicationController
  requestsCpu: CPU 預留
  requestsMemory: 內存預留
  requestsStorage: 存儲預留
  secrets: 密文
  services: 服務
  servicesLoadBalancers: 服務負載均衡
  servicesNodePorts: 服務節點端口
  namespaceLimit:
    label: 命名空間限制
  projectLimit:
    label: 項目限制
    cpuPlaceholder: 例如：2000
    memoryPlaceholder: 例如：2048
    storagePlaceholder: 例如：50
    unitlessPlaceholder: 例如：50
  namespaceDefaultLimit:
    label: 命名空間默認限制
    cpuPlaceholder: 例如：500
    memoryPlaceholder: 例如：1024
    storagePlaceholder: 例如：10
    unitlessPlaceholder: 例如：10
  add:
    label: 添加資源
  requestsGpuCount: GPU Count
  requestsGpuMemory: GPU Memory
  requestsStorageClassPVC: Storage Class PVC
  requestsStorageClassStorage: Storage Class 存儲
  tooltip:
    available: 可用：
    max: 總計：
    namespace: 此命名空間：
    reserved: 其他命名空間：
##############################
### Support Page
##############################
support:
  community:
    title: SUSE Rancher 提供世界一流的支持
    linksTitle: 社區支持
    learnMore: 進一步瞭解 SUSE Rancher 支持。
    pricing: 聯繫我們獲取價格
  subscription:
    haveSupport: 已獲得支持？
    addSubscription: 添加訂閱 ID
    removeSubscription: 移除訂閱 ID
    addTitle: 添加 SUSE 訂閱 ID
    addLabel: "請輸入有效的訂閱 ID："
    removeTitle: 是否移除訂閱 ID？
    removeBody: "注意：這不會影響你的訂閱。"
  suse:
    title: "好消息--你已得到保障"
    editBrand: 自定義 UI 主題
    access:
      title: 獲取支持
      text: 登錄 SUSE Customer Center 獲取訂閱支持
      action: SUSE Customer Center
      aws:
        generateConfig: 生成支持配置
        text: 登錄 SUSE Customer Center 獲取訂閱支持。需要開啓新的支持單？下載下面的支持配置文件。
  promos:
    one:
      title: 24x7 支持
      text: 我們提供嚴格的服務級別協議和全天候支持選項。
    two:
      title: 問題解決
      text: 我們的開發人員會快速解決問題，因此你可以放心使用 SUSE Rancher 的產品。
    three:
      title: 故障排除
      text: 無論你使用的 Rancher Labs 產品、Kubernetes、Docker 還是底層基礎架構出現問題，我們都會努力找到問題的根本原因。
    four:
      title: 自由創新
      text: 基於我們與衆多 Kubernetes 供應商、操作系統和開源軟件認證的兼容性，實現自主創新。
embedding:
  retry: 重試
  unavailable: Cluster Manager UI 不可用
v1ClusterTools:
  monitoring:
    label: Monitoring（舊版）
    description: '舊版 Monitoring V1。自 Rancher 2.5.0 起，我們已棄用 Monitoring V1。瞭解<a target="blank" href="{docsBase}/monitoring-alerting/guides/migrating/">遷移到 Monitoring V2 的步驟</a>。'
  logging:
    label: Logging（舊版）
    description: '舊版 Logging V1。自 Rancher 2.5.0 起，我們已棄用 Logging V1。瞭解<a target="blank" href="{docsBase}/logging/migrating/">遷移到 Logging V2 的步驟</a>。'
  istio:
    label: Istio（舊版）
    description: '舊版 Istio V1。自 Rancher 2.5.0 起，我們已棄用 Istio V1.5。瞭解<a target="blank" href="{docsBase}/istio/#migrate-from-previous-istio-version">遷移到最新版本</a> 的更多信息。'
legacy:
  alerts: 告警
  apps: 應用
  catalogs: 應用商店
  cis-scans: CIS 掃描
  configMaps: ConfigMaps
  configuration: 配置
  globalDnsEntries: 全局 DNS 條目
  globalDnsProviders: 全局 DNS 提供商
  istio: Istio
  logging: Logging
  notifiers: Notifiers
  monitoring: 監控
  pipelines: 流水線
  psps: Pod 安全策略
  secrets: 密文
  project:
    label: 項目
    select: "使用頁面頂部的項目/命名空間篩選器選擇一個項目，以查看其舊版項目功能。"
serverUpgrade:
  title: "{vendor} Server 已更改"
  message: "由於你服務器上運行的 {vendor} 版本已變更，頁面需要重新加載。"
volumeClaimTemplate:
  add:
    label: 添加聲明模板
manager:
  cloudCredentials:
    label: 雲憑證
  drivers:
    label: 驅動
  rkeTemplates:
    label: RKE 模板
  nodeTemplates:
    label: 節點模板
auth:
  config:
    label: 認證
vncConsole:
  error:
    message: Web VNC 控制檯連接斷開
charts:
  longhorn:
    group:
      longhornImages: Longhorn 鏡像
      privateRegistrySettings: 私有倉庫設置
      longhornDefaultSettings: Longhorn 默認設置
      longhornStorageClassSettings: Longhorn 存儲類設置
      servicesAndLoadBalancing: 服務與負載均衡
      otherSettings: 其他設置
      longhornCsiDriverSettings: Longhorn CSI驅動設置
    privateRegistry.registryUser:
      label: 用戶
      description: 用於驗證私有倉庫的用戶
    image.defaultImage:
      label: 使用默認鏡像
      description: 使用默認 Longhorn 鏡像
    privateRegistry.registryUrl:
      label: 地址
      description: 私有倉庫地址。留空則使用默認倉庫。
    privateRegistry.registryPasswd:
      label: 密碼
      description: 用於驗證私有倉庫的密碼
    privateRegistry.registrySecret:
      label: 密文名稱
      description: Longhorn 會使用這個名稱自動生成一個 Kubernetes 密文，用於從你的倉庫拉取鏡像
    longhorn.default_setting:
      label: Longhorn 默認設置
      description: 首次安裝 Longhorn 前自定義默認設置。只有集羣未安裝 Longhorn 時該設置才生效。
    persistence.defaultClass:
      label: 默認存儲類
      description: 爲 Longhorn 設置默認存儲類
    persistence.reclaimPolicy:
      label: 存儲類保留策略
      description: 定義回收策略（保留或刪除）
    persistence.defaultClassReplicaCount:
      label: 默認存儲類副本數
      description: 爲 Longhorn 存儲類設置副本數
    persistence.recurringJobSelector.enable:
      label: 啓用存儲類定期 job 選擇器
      description: 爲 Longhorn 存儲類設置定期 job 選擇器
    persistence.backingImage.enable:
      label: 默認存儲類後備鏡像
      description: 爲 Longhorn 存儲類設置後備鏡像
    ingress.enabled:
      label: 使用7層負載均衡暴露應用
      description: 使用7層負載均衡暴露應用 - ingress
    service.ui.type:
      label: Longhorn UI 服務
      description: 定義 Longhorn UI 服務類型
    enablePSP:
      label: Pod 安全策略
      description: 爲 Longhorn 工作負載設置 Pod 安全策略
    csi.kubeletRootDir:
      label: Kubelet 根目錄
      description: 指定 kubelet root-dir。如留空，則自動檢測。
    csi.attacherReplicaCount:
      label: Longhorn CSI Attacher 副本數
      description: 指定 CSI Attacher 的副本數。默認值是 3。
    csi.provisionerReplicaCount:
      label: Longhorn CSI Provisioner 副本數
      description: 指定 CSI Provisioner 的副本數。默認值是 3。
    csi.resizerReplicaCount:
      label: Longhorn CSI Resizer 副本數
      description: 指定 CSI Resizer 的副本數。默認值是 3
    csi.snapshotterReplicaCount:
      label: Longhorn CSI Snapshotter 副本數
      description: 指定 CSI Snapshotter 的副本數。默認值是 3。
    defaultSettings.backupTarget:
      label: 備份目標
      description: 用於訪問備份存儲的端點。支持 NFS 和 S3。
    defaultSettings.backupTargetCredentialSecret:
      label: 備份目標憑證密文
      description: 與備份目標關聯的 Kubernetes 密文
    defaultSettings.allowRecurringJobWhileVolumeDetached:
      label: 拔出卷時允許定時 Job
      description: "如啓用，Longhorn 會自動插入卷，並在定期快照/備份時間創建快照/備份。請知悉，在卷自動插入期間，卷並未爲工作負載就緒。工作負載需要等待直至定期 Job 完成。"
    defaultSettings.createDefaultDiskLabeledNodes:
      label: 在標籤節點上創建默認磁盤
      description: 如果沒有其他磁盤，則僅在標籤爲 "node.longhorn.io/create-default-disk=true" 的節點上自動創建默認磁盤。如禁用，會在最初添加節點時，在所有新節點上創建默認磁盤。
    defaultSettings.defaultDataPath:
      label: 默認數據路徑
      description: 在主機上用於存儲數據的默認路徑。默認路徑是 "/var/lib/longhorn/"。
    defaultSettings.defaultDataLocality:
      label: 默認數據本地性
      description: |
        '如果一個 Longhorn 卷在使用該卷的 pod 的節點上有一個本地副本，我們就認爲該卷具有數據本地性。
        該設置指定了使用 Longhorn UI 創建卷時的默認數據本地性位置。如果是 Kubernetes 配置，請更新 StorageClass 中的 `dataLocality`。
        可用的模式如下：
        - **disabled**：默認選項。插入卷（工作負載）的節點可能有也可能沒有副本。
        - **best-effort**：該選項指示 Longhorn 嘗試在插入卷（工作負載）的節點上保留一個副本。即使出現磁盤空間不充足、磁盤標籤不兼容等環境限制，導致 Longhorn 無法把副本保存在插入卷（工作負載）中的情況，Longhorn 也不會停止該卷。'
    defaultSettings.replicaSoftAntiAffinity:
      label: 副本節點級的軟親和性
      description: 允許使用同一個卷的已有健康副本進行節點調度。默認值是 false。
    defaultSettings.replicaAutoBalance:
      label: 副本自動均衡
      description: |
        '如啓用，則在發現可用節點時，對副本進行自動均衡。
        可用的全局設置如下：
        - **disabled**：默認選項，即不進行副本自動均衡。
        - **least-effort**：該選項指示 Longhorn 對副本進行均衡以獲得最小冗餘。
        - **best-effort**：該選項指示 Longhorn 對副本進行均衡以獲得平均冗餘。
        Longhorn 支持在 volume.spec.replicaAutoBalance 中進行單卷設置，該設置會覆蓋全局設置。
        可用的卷規格選項如下：
        - **ignored**：默認選項。該選項指示 Longhorn 繼承全局設置。
        - **disabled**：該選項指示 Longhorn 不要進行副本自動均衡。
        - **least-effort**：該選項指示 Longhorn 對副本進行均衡以獲得最小冗餘。
        - **best-effort**：該選項指示 Longhorn 對副本進行均衡以獲得平均冗餘。'
    defaultSettings.storageOverProvisioningPercentage:
      label: 存儲配置百分比
      description: 存儲配置百分比定義了相對於硬盤容量可分配的存儲空間。默認值是 200。
    defaultSettings.storageMinimalAvailablePercentage:
      label: 最小可用存儲百分比
      description: 如果最小可用磁盤容量超出了實際的可用磁盤百分比，磁盤會變成不可調度，直至清理出空間。默認值是 25。
    defaultSettings.upgradeChecker:
      label: 啓用升級檢查
      description: 如啓用升級檢查，會定期自動檢查最新的 Longhorn 版本。如有可用的新版本，UI 中會出現提示。默認值爲 true。
    defaultSettings.defaultReplicaCount:
      label: 默認副本數
      description: 通過 Longhorn UI 創建卷時的默認副本數。如果是 Kubernetes 配置，請更新 StorageClass 中的 `numberOfReplicas`。默認值是 3。
    defaultSettings.defaultLonghornStaticStorageClass:
      label: 默認靜態 StorageClass 名稱
      description: "'storageClassName' 會傳到爲已有 Longhorn 卷創建的 PVs 和 PVCs。 StorageClass 名稱也可用作一個標籤。因此，你可以使用 Longhorn StorageClass 把工作負載綁定到現有的 PV，而不需要創建 Kubernetes StorageClass 對象。默認值是 'longhorn-static'。"
    defaultSettings.backupstorePollInterval:
      label: 備份存儲輪詢間隔
      description: "單位是秒。備份存儲輪詢間隔決定了 Longhorn 爲新備份檢查備份存儲的頻率。 如設爲 0，則禁用輪詢。默認值是 300。"
    defaultSettings.autoSalvage:
      label: 自動 Salvage
      description: "如啓用，當所有副本出現網絡斷開等問題時，會自動修復卷。Longhorn 會試圖確定可用的副本，並把可用的副本用於卷。默認值是 true。"
    defaultSettings.autoDeletePodWhenVolumeDetachedUnexpectedly:
      label: 意外拔出卷時，自動刪除工作負載 Pod
      description: '如啓用，在卷意外拔出時（例如 Kubernetes 升級，Docker 重啓，或斷開網絡等）Longhorn 會自動刪除由管理器 （例如 deployment, statefulset, daemonset）管理的工作負載 pod。 刪除 pod 後，pod 的控制器會重啓 pod， Kubernetes 會處理卷的重新插入和掛載。如禁用，Longhorn 不會刪除由控制器管理的工作負載 pod。你需要手動重啓 Pod 以重新插入和掛載卷。**注意**：此設置不適用於沒有控制器的工作負載 Pod。Longhorn 不會刪除這些 Pod。'
    defaultSettings.disableSchedulingOnCordonedNode:
      label: 關閉 Cordoned 節點上的調度
      description: "關閉 Longhorn 管理器以在 Kubernetes cordoned 節點進行副本調度。默認值是 true。"
    defaultSettings.replicaZoneSoftAntiAffinity:
      label: 副本區域級別的軟反親和性
      description: "允許把卷的新副本調度到同區域的節點，作爲健康副本。不屬於任何區域的節點會被認爲存在於同一區域。請知悉，Longhorn 依賴 Kubernetes 節點對象中的 `topology.kubernetes.io/zone=<Zone name of the node>` 標籤來發現區域。默認值是 true。"
    defaultSettings.nodeDownPodDeletionPolicy:
      label: 節點停機時的 Pod 刪除策略
      description: |
        "當卷卡在停機節點上的 StatefulSet/Deployment Pod 時，定義 Longhorn 的操作。
        - **do-nothing**：Kubernetes 的默認操作，即從不強制刪除 StatefulSet/Deployment 終止 pod。由於停機節點上的 Pod 沒有移除，Longhorn 卷會卡在停機的節點上。
        - **delete-statefulset-pod**：Longhorn 會強制刪除停機節點上的 StatefulSet 終止 pod，以發佈 Longhorn 卷，使 Kubernetes 替換 Pod.
        - **delete-deployment-pod**：Longhorn 會強制刪除停機節點上的 Deployment 終止 Pod，以發佈 Longhorn 卷，使 Kubernetes 替換 Pod。
        - **delete-both-statefulset-and-deployment-pod**：Longhorn 會強制刪除停機節點上的 StatefulSet/Deployment 終止 Pod，以發佈 Longhorn 卷，使 Kubernetes 替換 Pod。"
    defaultSettings.allowNodeDrainWithLastHealthyReplica:
      label: 允許使用上一個健康副本進行節點清空
      description: "默認情況下，如果節點包含某個卷的上一個健康副本，Longhorn 會禁用 `kubectl drain` 操作。如果啓用此選項，即使節點包含卷的上一個健康副本，Longhorn 也**不會**在節點上禁用 `kubectl drain` 操作。"
    defaultSettings.mkfsExt4Parameters:
      label: 自定義 mkfs.ext4 參數
      description: "允許爲 ext4 設置額外的文件系統創建參數。如果是舊主機核心，則可能需要使用 `-O ^64bit,^metadata_csum` 禁用可選的 ext4 metadata_csum 參數。"
    defaultSettings.disableReplicaRebuild:
      label: 禁用副本重建
      description: "此選項在整個集羣中禁用副本重建。如果此選項設爲 true，驅逐和數據本地性功能設置都不會生效。此選項不會對當前的副本重建和災備卷還原有任何影響。"
    defaultSettings.replicaReplenishmentWaitInterval:
      label: 副本補充等待間隔
      description: "單位是秒。此間隔決定了副本失敗時，Longhorn 在副本上覆用現有數據至少等待的時間，而不是直接爲降級卷創建新副本。警告：此選項僅在卷中有失敗卷時生效。此選項可能會短暫禁用重建。"
    defaultSettings.concurrentReplicaRebuildPerNodeLimit:
      label: 單節點的併發副本重建限制
      description: |
        "此選項控制節點上可同時重建的副本數量。
        一般情況下，只要節點上的當前重建數量超過限制，Longhorn 會禁止副本啓動。如果值設爲 0，則表示禁用副本重建。
        警告：
        - 此設置已替代 \"Disable Replica Rebuild\" 這個舊設置。
        - 與依賴副本的啓動延遲來限制併發重建不同，如果禁用了重建，會直接跳過副本對象補充。
        - 如果值設爲 0，驅逐和數據本地性功能不會生效。這不會影響當前的副本重建和備份還原。"
    defaultSettings.disableRevisionCounter:
      label: 禁用修改計數器
      description: "此選項僅用於通過 UI 創建的卷。默認情況下，值是 false，即使用一個修改計數文件，來跟蹤每次卷寫入。 在 salvage 恢復中，Longhorn 會選擇有最新修改計數的副本作爲候選，以還原整個卷。如果修改計數器被禁用，Longhorn 不會跟蹤每次卷寫入。在 salvage 恢復中，Longhorn 會根據 'volume-head-xxx.img' 文件的上次修改時間和文件大小，來選擇用於還原整個卷的副本。"
    defaultSettings.systemManagedPodsImagePullPolicy:
      label: 系統管理 Pod 的鏡像拉取策略
      description: "此設置定義了 Longhorn 系統管理 Pod（如 instance manager，engine image，CSI driver）的鏡像拉取策略。新的鏡像拉取策略僅在系統管理 Pod 重啓後生效。"
    defaultSettings.allowVolumeCreationWithDegradedAvailability:
      label: 允許使用降級的可用性創建卷
      description: "此選項允許用戶創建並插入在創建時不具有所有調度副本的卷。"
    defaultSettings.autoCleanupSystemGeneratedSnapshot:
      label: 自動清理系統創建的快照
      description: "此選項使 Longhorn 在副本重建完成後，自動清理系統生成的快照"
    defaultSettings.concurrentAutomaticEngineUpgradePerNodeLimit:
      label: 單節點的併發自動引擎升級限制
      description: "此選項控制 Longhorn 管理器在升級後，Longhorn 如何自動把卷的引擎升級到新的默認引擎鏡像。此選項的值指定了同一時間下，單個節點允許升級到默認引擎鏡像的最大數量。如果值設爲 0, Longhorn 不會自動把卷的引擎更新到默認版本。"
    defaultSettings.backingImageCleanupWaitInterval:
      label: 後備鏡像清理等待間隔
      description: "單位是分鐘。此值定義了磁盤中沒有副本使用後備鏡像文件時，Longhorn 等待多久後會清理後備鏡像文件。"
    defaultSettings.backingImageRecoveryWaitInterval:
      label: 後備鏡像恢復等待間隔
      description: "單位是秒。此值定義了此後備鏡像的所有磁盤文件均失敗或未知時，Longhorn 等待多久後會重新下載後備鏡像文件。警告：- 此-還原僅用於創建類型是 \"download\" 的後備鏡像。- 文件狀態 \"unknown\" 表示 Pod 上相關的 manager pod 不是運行中，或節點本身已關閉/斷開連接。"
    defaultSettings.guaranteedEngineManagerCPU:
      label: 保證的引擎管理器 CPU
      description: |
        "此整數表示每個節點上百分之多少的可分配的 CPU 總資源會爲各個引擎管理器 Pod 保留。例如，10 表示節點上10%的 CPU 總資源會分配給節點上的各個引擎管理器 Pod，以在節點高負荷工作時保持引擎的穩定性。
        爲防止卷引擎意外崩潰，以及保證相對可接受的 I/O 性能，你可以使用以下公式來計算這個設置的值：
          保證的引擎管理器 CPU = 節點上估計的最大 Longhorn 引擎數 * 0.1 / 節點上總共可分配的 CPU 數量 * 100。
          上述計算結果不代表 Longhorn 工作負載所需的最大 CPU 資源。爲了充分發揮 Longhorn 卷的 I/O 性能，你可以通過這個設置分配/保證更多的 CPU 資源。
          如果現在很難估計用量，你可以使用默認值12%。然後在沒有使用 Longhorn 卷的工作負載時對其進行調整。
          警告：
            - 0 代表取消爲每個引擎管理器 Pod 設置的 CPU 請求。
            - 考慮到後續系統升級中可能出現的新實例管理器 pod，此整數值的範圍是0-40。此外，設置了'保證的引擎管理器 CPU'的總和不應該大於40。
            - 在 Longhorn 系統升級後，可能需要再部署一組實例管理器 pod。如果當前節點的可用 CPU 不足以滿足新的實例管理器 pod 的需要，你需要拔出使用最老的實例管理器 pod 的卷，這樣 Longhorn 就可以自動清理舊的 pod 以釋放 CPU 資源，然後使用最新的實例管理器鏡像的新 pod 將被啓動。
            - 如果某個節點設置了 \"EngineManagerCPURequest\" 字段，此全局設置將在節點上忽略。
            - 如果此設置被改變，所有節點上使用此全局設置的所有引擎管理器 pod 都會自動重啓。換言之，不要通過插入捲來修改此設置。"
    defaultSettings.guaranteedReplicaManagerCPU:
      label: 保證的副本管理器 CPU
      description: |
        "此整數表示每個節點上百分之多少的可分配的 CPU 總資源會爲各個副本管理器 Pod 保留。例如，10 表示節點上10%的 CPU 總資源會分配給節點上的各個副本管理器 Pod，以在節點高負荷工作時保持副本的穩定性。
        爲防止卷副本意外崩潰，以及保證相對可接受的 I/O 性能，你可以使用以下公式來計算這個設置的值：
        保證的副本管理器 CPU = 節點上估計的最大 Longhorn 卷副本數 * 0.1 / 節點上總共可分配的 CPU 數量 * 100。
        上述計算結果不代表 Longhorn 工作負載所需的最大 CPU 資源。爲了充分發揮 Longhorn 卷的 I/O 性能，你可以通過這個設置分配/保證更多的 CPU 資源。
        如果現在很難估計用量，你可以使用默認值12%。然後在沒有使用 Longhorn 卷的工作負載時對其進行調整。
        警告：
          - 0 代表取消爲每個副本管理器 Pod 設置的 CPU 請求。
          - 考慮到後續系統升級中可能出現的新實例管理器 pod，此整數值的範圍是0-40。此外，設置了'保證的副本管理器 CPU'的總和不應該大於40。
          - 在 Longhorn 系統升級後，可能需要再部署一組實例管理器 pod。如果當前節點的可用 CPU 不足以滿足新的實例管理器 pod 的需要，你需要拔出使用最老的實例管理器 pod 的卷，這樣 Longhorn 就可以自動清理舊的 pod 以釋放 CPU 資源，然後使用最新的實例管理器鏡像的新 pod 將被啓動。
          - 如果某個節點設置了 'ReplicaManagerCPURequest\" 字段，此全局設置將在節點上忽略。
          - 如果此設置被改變，所有節點上使用此全局設置的所有副本管理器 pod 都會自動重啓。換言之，不要通過插入捲來修改此設置。"
    persistence.recurringJobSelector.jobList:
      label: 存儲類定期 Job 選擇器列表
      description: 'Longhorn StorageClass 的定期 Job 選擇器列表。'
    persistence.backingImage.name:
      label: 存儲類後備鏡像名稱
      description: '指定在 Longhorn StorageClass 中 Longhorn 卷使用的後備鏡像。如果不存在，你需要指定後備鏡像數據源類型和後備鏡像數據源參數，以讓 Longhorn 在使用後備鏡像前先創建它。'
    persistence.backingImage.expectedChecksum:
      label: 存儲類後備鏡像的期望 SHA512 校驗和
      description: '指定在 Longhorn StorageClass 中選定的後備鏡像的期望 SHA512 校驗和。 警告： - 如果沒有指定後備鏡像名稱，設置此字段是沒有效的。 - 如果數據源類型是 \"export-from-volume\"，則不建議設置此字段。'
    persistence.backingImage.dataSourceType:
      label: 存儲類後備鏡像數據源類型
      description: '爲用於 Longhorn StorageClass 的後備鏡像指定數據源類型。 如果後備鏡像不存在，Longhorn 會使用此字段來創建後備鏡像。否則，Longhorn 會以此來驗證所選的後備鏡像。 警告： - 如果不指定後備鏡像名稱，設置這個選項是沒有效的。 - 如果後備鏡像創建時的數據源類型是 \"upload\"，建議你使用 UI，而不是此處提及的 StorageClass。如果是上傳，文件數據需要在對象創建後發送到 Longhorn 後端，手動進行此操作會非常複雜。'
    persistence.backingImage.dataSourceParameters:
      label: 存儲類後備鏡像數據源參數
      description: "爲用於 Longhorn StorageClass 的後備鏡像指定數據源參數。 如果後備鏡像不存在，Longhorn 會使用此字段來創建後備鏡像。否則，Longhorn 會以此來驗證所選的後備鏡像。 該選項接受映射的 JSON 字符串，例如 '{\"url\":\"https://backing-image-example.s3-region.amazonaws.com/test-backing-image\"}'。 警告： - 如果不指定後備鏡像，設置這個選項是沒有效的。 - 請注意引號的使用。"
    ingress.host:
      label: 7 層負載均衡主機名
      description: "7 層負載均衡主機名"
clusterConnectMode:
  actions:
    restartConfirm: 您確定保存連接模式並重啓 {name} 集羣控制器嗎？
    saveAndRestart: 保存並重啓
    yes: 確定
  apiEndpoint:
    label: API Endpoint
    overrideLabel: Override API Endpoints
    placeholder: 例如：https://10.43.0.1:443
    required: API Endpoint 不能爲空
  connectMode:
    label: 連接模式
  connectStatus:
    address: Address
    apiEndpoint: API Endpoint
    driver: Driver
    host: Host
    label: 連接狀態
    provider: Provider
    timeout: Timeout
  detail: 查看集羣連接模式和 API Endpoints
  testConnect:
    error: 測試失敗
    label: 測試
    success: 測試成功
  title: 集羣連接模式
gpuReservation:
  label: NVIDIA GPU 限制/預留
  memUnit: GiB
  placeholder: 例如：1
  set: 限制
  shared: 共享 GPU 內存
  sharedTips: 在設置共享 GPU 內存的同時，Rancher 將自動爲工作負載設置 GPU 調度器名稱
  unit: GPUs
  devices: GPU 設備
  resourceName: GPU 資源名
vGpuReservation:
  label: Orion X GPU 預留
  placeholder: 例如：1
  set: 限制
  unit: vGPUs
autoLogout:
  message: 你在 {autoLogoutTime} 分鐘內沒有任何操作, 系統將自動登出
  title: 自動登出
formReservation:
  limitCpu:
    label: "{component} CPU 限制"
    placeholder: "例如: 1000"
  limitMemory:
    label: "{component} Memory 限制"
    placeholder: "例如: 1000"
  requestCpu:
    label: "{component} CPU 預留"
    placeholder: "例如: 1000"
  requestMemory:
    label: "{component} Memory 預留"
    placeholder: "例如: 1000"
globalMonitoringDashboard:
  globalMonitoring:
    label: 全局監控
    description: 多集羣監控
  grafana:
    label: Grafana
    description: Metrics 儀表盤
  thanos:
    label: Prometheus Thanos
    description: 集羣組件系統
globalMonitoringPage:
  cluster: 全局監控所在集羣
  token:
    label: 使用默認 token
    custom:
      label: 自定義 token
      placeholder: 請配置自定義 token
  customAddress:
    add: 添加地址
    otherHeader: 自定義其他地址
    header: 自定義地址
    placeholder: 例如：172.17.0.1:30901
  enableMonitoring:
    title: 監控端點
    cluster: 集羣
    warning: 配置刮取該下游集羣prometheus數據的端點，仍需要在下游部署開啟了thanos sidecar的監控
  confirmDisable: 你確定嗎? 再次單擊將禁用全局監控
  customAnswers:
    detail: 配置自定義的應答。
    title: 自定義應答
    answer:
      label: 應答
    addAnswerLabel: 添加應答
  disable: 禁用
  disabled: 全局監控未啓用。點擊啓用來激活全局監控。 如果在集羣中啓用了集羣監控並且版本不低於<code>v0.0.7000</code>，你將可以通過全局監控查看多個集羣的指標。
  enableActionLabel: 啓用
  enabled: 全局監控已啓用。如果在集羣中啓用了集羣監控並且版本不低於<code>v0.0.7000</code>，你可以通過全局監控查看多個集羣的指標。
  globalMonitoringClusterUnavailable: 集羣 {clusterName} 不可用。
  grafana:
    header: 監控大屏
    detail: 全局 Grafana 和{appName}監控大屏的配置。
    title:
      label: 標題
      placeholder: 例如 grafana
    tabTitle:
      label: 選項卡標題
      placeholder: 例如 grafana
    logo:
      label: logo
      placeholder: 請輸入 logo 地址
    favicon:
      label: favicon
      placeholder: 請輸入 favicon 地址
    serverUrl:
      label: serverUrl
      placeholder: 例如 http://rancher.cattle-system
    enableGrafanaSidecar:
      label: Grafana 啓用初始化 Sidecar
    enablePersistence:
      label: Grafana 啓用持久化存儲
    serviceType:
      label: Grafana UI SVC 類型
    size:
      label: Grafana 持久化存儲大小
      placeholder: "例如: 10Gi"
    storageClass:
      label: Grafana 默認存儲類
      placeholder: 使用默認的類
  header: 全局監控（實驗性）
  links:
    globalMonitoring:
      label: 監控大屏
    grafana:
      label: Grafana UI
    thanos:
      label: Thanos UI
  noAvailableClusters: 沒有可用集羣，請先添加一個集羣。
  noTemplate: 無法加載全局監控模版
  nodeSelector:
    addSelectorLabel: 添加選擇器
    helpText: 選擇要運行 {component} 工作負載的節點。
  notReady: 正在安裝全局監控到指定集羣的系統項目裏...
  objectStorageWarning: 每個集羣中的 Thanos sidecar 都需要對象存儲的密鑰。所以這些集羣的管理員也可以在集羣的系統項目裏看到你所配置的存儲的密鑰。
  store:
    aliyunoss:
      accessKey:
        label: 阿里雲 Access Key
        placeholder: 你的阿里雲 access key
      bucketName:
        label: 阿里雲存儲桶名稱
        placeholder: 例如：backups
      endpoint:
        beijing: 華北 2（北京）
        chengdu: 西南 1（成都）
        east-1: 美國東部 1 （弗吉尼亞）
        eu-central-1: 歐洲中部 1 （法蘭克福）
        eu-west-1: 英國（倫敦）
        hangzhou: 華東 1（杭州）
        heyuan: 華南 2（河源）
        hongkong: 中國（香港）
        huhehaote: 華北 5（呼和浩特）
        label: 阿里雲區域
        me-east-1: 中東東部 1 （迪拜）
        northeast-1: 亞太東北 1 （日本）
        qingdao: 華北 1（青島）
        shanghai: 華東 2（上海）
        shenzhen: 華南 1（深圳）
        south-1: 亞太南部 1 （孟買）
        southeast-1: 亞太東南 1 （新加坡）
        southeast-2: 亞太東南 2 （悉尼）
        southeast-3: 亞太東南 3 （吉隆坡）
        southeast-5: 亞太東南 5 （雅加達）
        west-1: 美國西部 1 （硅谷）
        zhangjiakou: 華北 3（張家口）
      label: 阿里雲 OSS
      secretKey:
        label: 阿里雲 Secret Key
        placeholder: 你的阿里雲 secret key
        provided: 已提供
    azure:
      bucketName:
        label: Container 名稱
        placeholder: 例如：mycontainer
      endpoint:
        label: Endpoint
        placeholder: 例如：http://mystorageaccount.blob.core.windows.net
      label: Azure 存儲
      maxRetries:
        label: 最大重試次數
        placeholder: 例如：0
      storageAccount:
        label: Storage Account
        placeholder: 你的 Storage Account
      storageAccountKey:
        label: Storage Account Key
        placeholder: 你的 Storage Account Key
    detail: 將多集羣的 Prometheus 指標存儲到對象存儲上。
    enabled:
      label: 存儲指標到對象存儲
    gcs:
      bucketName:
        label: 存儲桶名稱
        placeholder: 例如：backups
      label: Google 雲存儲
      serviceAccount:
        label: Service Account
        placeholder: 你的 Google service account
    s3:
      accessKey:
        label: S3 Access Key
        placeholder: 你的 AWS access key
      bucketName:
        label: S3 存儲桶名稱
        placeholder: 例如：backups
      endpoint:
        label: S3 區域地址
        placeholder: 例如：s3.us-west-2.amazonaws.com
      label: S3
      secretKey:
        label: S3 Secret Key
        placeholder: 你的 AWS secret key
        provided: 已提供
    tencentcloudcos:
      appid:
        label: APP ID
        placeholder: 例如：1250000000
      bucketName:
        label: 存儲桶名稱
        placeholder: 例如：backups
      label: 騰訊雲 COS
      region:
        label: 區域
        placeholder: 例如：cos.ap-beijing-1.myqcloud.com
      secretId:
        label: 密鑰 ID
        placeholder: 騰訊雲密鑰 ID
      secretKey:
        label: 密鑰 Key
        placeholder: 騰訊雲密鑰 Key
    title: 對象存儲
  svc:
    clusterIp: "{appName}代理"
    loadBalancer: 4 層負載均衡
    nodePort: NodePort
  thanos:
    detail: 查詢多集羣 Prometheus 指標的組件。
    serviceType:
      label: Thanos Query UI 服務類型
    title: Thanos Query
  updating: 正在更新全局監控組件...
  version: 全局監控版本
  tls:
    header: 證書
    serverName:
      label: Server Name
    ca:
      label: CA 證書
      placeholder: 粘貼證書，以-----BEGIN CERTIFICATE----- 開始。
    cert:
      label: 證書
      placeholder: 粘貼證書，以-----BEGIN CERTIFICATE----- 開始。
    key:
      label: 私鑰
      placeholder: 粘貼私鑰，一般以-----RSA PRIVATE KEY----- 開始。
    warning: 使用tls方式訪問，下游監控部署也得同步開啟tls認證。
  warning:
    undefindChart: 當前集羣 chart undefined。
  uninstallV1:
    warning1: V1 全局監控目前已部署。在啟用 V2 全局監控之前，需要先將其禁用。
    promptDescription: <div class=\"mt-20 mb-20\">您正在嘗試禁用 V1 全局監控。</div>
    success1: V1 全局監控成功被禁用
formScheduling:
  toleration:
    title: 調度容忍
    add: 增加調度容忍
    workloadTitle: "{workload} Pod 的容忍"
addonConfigConfirmation:
  body: 修改 Kubernetes 版本會重置附加配置的值。請先檢查這些值是否正確。
  title: 附加配置重置
alertmanagerConfigReceiver:
  addButton: 添加接收器
  name: 接收器名稱
  namespaceWarning: 找不到用於獲取密文的命名空間，無法渲染密文選擇器。
  receiverTypes: 可以在表單中編輯以下接收器類型：Email、Slack、PagerDuty、Opsgenie 和 Webhook。如果是其他類型的接收器，則編輯 AlertmanagerConfig YAML。
  receivers: 接收器
  secretKeyId: 密鑰 ID
  slack:
    apiUrlTooltip: 包含 Slack webhook URL 的密文密鑰。該密鑰需要與 AlertmanagerConfig 對象位於同一命名空間中，並且可由 Prometheus Operator 訪問。
    webhookUrl: Webhook URL
notifications:
  header: 自定義通知
  loginError:
    header: 登錄失敗橫幅
    messageLabel: 要顯示的文本
    showCheckboxLabel: 顯示自定義登錄失敗文本
  menuLabel: 自定義通知
resource:
  errors:
    update: 更新 {name} 出錯
serviceAccount:
  automount: 自動掛載服務賬號令牌
  imagePullSecrets: 鏡像拉取密文
  tabs:
    serviceAccount:
      label: 服務賬號
rancher-nvidia-k8s-device-plugin:
  titles:
    image: 容器鏡像
    plugin: 設備插件選項
    gfd: GPU 特性發現選項
    schedule: 節點調度選項
  containerImage:
    repository:
      label: 鏡像倉庫
    tag:
      label: 鏡像標籤
    gfdRepository:
      label: GPU 特性發現鏡像倉庫
    gfdTag:
      label: GPU 特性發現鏡像標籤
    nfdRepository:
      label: 節點特性發現鏡像倉庫
    nfdTag:
      label: 節點特性發現鏡像標籤
  devicePluginOptions:
    configName:
      label: 配置名稱
    migStrategy:
      label: MIG 策略
      tip: 如果 GPU 支持 MIG 設備，選擇暴露 MIG 設備的策略。<a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    failOnInitError:
      label: 初始化錯誤時失敗
      tip: 如果在初始化過程中遇到錯誤，則使 Device Plugin 失敗退出，否則會一直阻塞。 <a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    nvidiaDriverRoot:
      label: NVIDIA 驅動程序根目錄
      tip: 節點中NVIDIA驅動安裝的路徑。 <a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    passDeviceSpecs:
      label: 傳遞設備規格
      tip: 爲分配給容器的任何 NVIDIA 設備傳遞路徑和所需的設備節點權限。 <a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    deviceListStrategy:
      label: 設備列表策略
      tip: 選擇向容器運行時傳遞設備列表的策略。 <a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    deviceIDStrategy:
      label: 設備 ID 策略
      tip: 選擇向容器運行時傳遞設備ID的策略。 <a href="https://github.com/nvidia/k8s-device-plugin#configuration-option-details" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    renameByDefault:
      label: 按默認值重命名
    failRequestsGreaterThanOne:
      label: 大於一次的失敗請求
    resources:
      title: 資源
      add: 添加資源
      name:
        label: 名稱
      replicas:
        label: 副本數
    sharedAccess:
      label: 啓用共享訪問
      tip: 使用 CUDA Time-Slicing 共享訪問 GPU。 <a href="https://github.com/nvidia/k8s-device-plugin#shared-access-to-gpus-with-cuda-time-slicing" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
    addConfig: 添加配置
    removeConfig: 刪除配置
  gfdOptions:
    enabled:
      label: 啓用 GPU 特性發現
      tip: 使用 gpu-feature-discovery 進行部署，以獲得自動節點標籤。 <a href="https://github.com/nvidia/k8s-device-plugin#deploying-with-gpu-feature-discovery-for-automatic-node-labels" target="_blank" rel="noopener noreferrer nofollow">瞭解更多</a>
  scheduleOptions:
    nodeSelector:
      title: 節點選擇器
editGpuDevicePluginConfigDialog:
  title: 修改 {name} NVIDIA 設備插件配置
  subtitle: 選擇 K8s 設備插件配置
  config:
    label: 配置名稱
    placeholder: 請選擇一個配置...
  errors:
    noPermission: 當前用戶沒有權限修改配置
growl:
  clearAll: 清除全部通知
  disconnected:
    message: 與 {url} 的連接意外斷開 {time}，正在重試...
    title: Websocket 斷開連接
  connectError:
    message: '與 {url} 的連接在 {time} 意外斷開，重連次數爲 #{tries}。'
    title: Websocket 重新連接
  disconnectError:
    message: 與 {url} 的連接在 {time} 意外斷開，重連 {tries} 次後斷開連接。請檢查你的網絡連接並重新加載頁面。
    title: Websocket 斷開連接
  reconnected:
    message: '在嘗試第 #{tries} 次時恢復了與 {url} 的連接。'
    title: Websocket 已重新連接
harvesterManager:
  cluster:
    description: Harvester 是一個採用企業級開源技術，包括Kubernetes、Kubevirt和Longhorn，爲裸金屬服務器打造的現代超融合基礎設施（HCI）解決方案。
    label: Harvester 集羣
    learnMore: 訪問 <a target="_blank" href="https://harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester 網站</a> 或閱讀 <a target="_blank" href="https://docs.harvesterhci.io/" rel="noopener noreferrer nofollow">Harvester 官方文檔</a>，以瞭解更多關於 Harvester 的信息。
    none: 不存在 Harvester 集羣
  manage: 管理
  plugins:
    loadError: 加載 Harvester 插件時出錯
managementNode:
  customName: 自定義名稱
performance:
  banner: 這些設置是實驗性的，可能會在後續版本中刪除或更新。
  description: 性能設置允許你在需要處理大量集羣資源時配置 UI 的行爲。設置僅適用於以下資源：Pod、Deployment、CronJob、DaemonSet、Job、StatefulSet、ReplicaSet、Replication Controller、Workload 和 Secret。
  incrementalLoad:
    checkboxLabel: 啓用增量加載
    description: 啓用後，資源會更快出現，但可能需要更長的時間來加載整個資源集。此設置僅適用於以下資源：Pod、Deployment、CronJob、DaemonSet、Job、StatefulSet、ReplicaSet、Replication Controller、Workload 和 Secret。
    inputLabel: 資源閾值
    label: 增量加載
    setting: 你可以配置一個閾值，高於該閾值時則使用增量加載。
  label: UI 性能設置
  manualRefresh:
    buttonTooltip: 刷新列表
    checkboxLabel: 啓用列表數據的手動刷新
    description: 啓用後，列表數據不會自動更新，用戶必須手動刷新列表視圖。此設置僅適用於以下資源：Pod、Deployment、CronJob、DaemonSet、Job、StatefulSet、ReplicaSet、Replication Controller、Workload 和 Secret。
    inputLabel: 資源閾值
    label: 手動刷新
    setting: 你可以配置一個閾值，高於該閾值時則啓用手動刷新。
    banner: 此設置是實驗性的，可能會在後續版本中刪除或更新。
  settingName: 性能
  websocketNotification:
    checkboxLabel: 禁用 WebSocket 通知
    description: 啓用後，UI 檢測到斷開連接時不會出現 WebSocket 通知。
    label: WebSocket 通知
resourceLoadingIndicator:
  loading: 正在加載
forceUpdateMachinePlan:
  attemptingToUpdate: "你正在試圖強制更新 machine-plan"
  error: 強制更新 machine-plan 時出錯
labeledSelect:
  pressEnter: 按回車以添加 “{input}”
  startTyping: 輸入以定義一個項
